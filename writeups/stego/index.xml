<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stego on</title><link>/writeups/stego/</link><description>Recent content in Stego on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:55 +0000</lastBuildDate><atom:link href="/writeups/stego/index.xml" rel="self" type="application/rss+xml"/><item><title> An exclusive!</title><link>/writeups/stego/an_exclusive/</link><pubDate>Mon, 14 Mar 2022 15:23:55 +0000</pubDate><guid>/writeups/stego/an_exclusive/</guid><description>Strings exclusivos para todos!
S1: 44585d6b2368737c65252166234f20626d
S2: 1010101010101010101010101010101010</description></item><item><title>Risks Everywhere!</title><link>/writeups/stego/risks_everywhere/</link><pubDate>Mon, 14 Mar 2022 15:23:55 +0000</pubDate><guid>/writeups/stego/risks_everywhere/</guid><description>Un amigo me envió una imagen que guarda un mensaje secreto. Me dijo que para descubrirlo debo usar cadenas, pero cuando abro la imagen, solo veo un niño asustado.</description></item><item><title>Classic, yet complicated</title><link>/writeups/stego/classic-yet-complicated/</link><pubDate>Tue, 06 Oct 2020 08:49:55 +0000</pubDate><guid>/writeups/stego/classic-yet-complicated/</guid><description>Este es un problema sacado de Hack The Box, es de los inactivos. Fue diseñado por &amp;ldquo;P3t4&amp;rdquo;.
Tenemos un solo archivo, que tiene dentro
alp gwcsepul gtavaf, nlv prgpbpsu mb h jcpbyvdlq, ipltga rv glniypfa we ekl 16xs nsjhlcb. px td o lccjdstslpahzn fptspf xstlxzi te iosj ezv sc xcns ttsoic lzlvrmhaw ez sjqijsa xsp rwhr. tq vxspf sciov, alp wsphvcv pr ess rwxpqlvp nwlvvc dyi dswbhvo ef htqtafvyw hqzfbpg, ezutewwm zcep xzmyr o scio ry tscoos rd woi pyqnmgelvr vpm .</description></item><item><title>EXIF QR</title><link>/writeups/stego/exif_qr/</link><pubDate>Tue, 06 Oct 2020 08:49:55 +0000</pubDate><guid>/writeups/stego/exif_qr/</guid><description>La flag debe ser de la forma CC5325{flag}</description></item><item><title>Máquina cifradora</title><link>/writeups/stego/maquina_cifradora/</link><pubDate>Tue, 06 Oct 2020 08:49:55 +0000</pubDate><guid>/writeups/stego/maquina_cifradora/</guid><description>Un amigo creó una máquina para cifrar mensajes. La usa para todo: cifrar textos secretos, usuarios y contraseñas personales, entre otros. Está tan confiado en que su algoritmo es altamente irrompible, que me envió su código fuente a modo de prueba.
# !/usr/bin/python3 # !/usr/bin/python3 import base64 import codecs # TODO: Delete this # 5447456759327868646q55676332566n636q56305953426p63794244517n557n4q6n556r657964304q46426662444r324q327866557n4r6n636n4q334n33306r class Message: def __init__(self, message): self.message = message def encode(self): message_bytes = self.message.encode(&amp;#39;ascii&amp;#39;) base64_bytes = base64.</description></item><item><title>Senseless Behaviour</title><link>/writeups/stego/senseless-behaviour/</link><pubDate>Tue, 06 Oct 2020 08:49:55 +0000</pubDate><guid>/writeups/stego/senseless-behaviour/</guid><description>Este problema es de Hack The Box, y fue diseñado por &amp;ldquo;sh3llf1sh&amp;rdquo;
En el desafío nos entregan un archivo de audio, llamado meow.wav. Si lo abrimos tenemos el audio de Nyan Cat, pero distorsionado.
Probamos ver algo con audacity o con binwalk, pero no pillamos nada. Vamos a probar con stegseek a ver si tenemos más suerte.
Podemos ver que hay algo &amp;ldquo;steghidden&amp;rdquo; corriendo stegseek --seed meow.wav. Se demora harto, pero sirve para confirmar si hay algo oculto.</description></item><item><title>xorxorxor</title><link>/writeups/stego/xorxorxor/</link><pubDate>Tue, 06 Oct 2020 08:49:55 +0000</pubDate><guid>/writeups/stego/xorxorxor/</guid><description>Este problema es de Hack The Box, y fue diseñado por &amp;ldquo;r4j&amp;rdquo;
Este problema nos entrega dos archivos, uno que &amp;ldquo;tiene la flag&amp;rdquo;:
Flag: 134af6e1297bc4a96f6a87fe046684e8047084ee046d84c5282dd7ef292dc9
Y otro archivo con un programa para &amp;ldquo;encriptar&amp;rdquo; y &amp;ldquo;desencriptar&amp;rdquo;:
#!/usr/bin/python3 #!/usr/bin/python3 import os flag = open(&amp;#39;flag.txt&amp;#39;, &amp;#39;r&amp;#39;).read().strip().encode() class XOR: def __init__(self): self.key = os.urandom(4) def encrypt(self, data: bytes) -&amp;gt; bytes: xored = b&amp;#39;&amp;#39; for i in range(len(data)): xored += bytes([data[i] ^ self.key[i % len(self.key)]]) return xored def decrypt(self, data: bytes) -&amp;gt; bytes: return self.</description></item></channel></rss>