<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ingeniería Reversa on</title><link>/docs/reversa/</link><description>Recent content in Ingeniería Reversa on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="/docs/reversa/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro a la Ingeniería Reversa</title><link>/docs/reversa/intro/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/reversa/intro/</guid><description>Motivación En computación, la ingeniería reversa (reverse engineering o reversing) se refiere al proceso de analizar un ejecutable, código binario o bytecode, para entender su comportamiento interno. Para hacer esto, se suele convertir el código de bajo nivel de entrada en algo de nivel un poco más alto, como Assembler o C. De esta forma, se vuelve mucho más fácil de entender, aunque aún puede requerir un trabajo mental considerable hacerlo.</description></item><item><title>Decompilación</title><link>/docs/reversa/decompiling/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/reversa/decompiling/</guid><description>Con decompilación nos referiremos a la acción de tomar un programa compilado, ya sea a código binario o bytecode, y devolverlo a una forma legible para humanos. Esto puede ser código Assembler, o algo un poco más sofisticado, como C, Java, Python, .Net, PHP, entre otros. Hacer esto de manera manual se puede volver prohibitivamente costoso y difícil, pero afortunadamente existen algunas herramientas que ayudan en el proceso, y muchas veces logran obtener un código casi idéntico al original.</description></item><item><title>Deobfuscación</title><link>/docs/reversa/deobfuscation/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/reversa/deobfuscation/</guid><description>La deobfuscación de ejecutables es similar a la deobfuscación de JavaScript que vimos en los capítulos de esteganografía y aplicaciones web. La diferencia siendo que el código ahora puede estar compilado, y por lo tanto las operaciones utilizadas para obfuscar la funcionalidad podrían estar a nivel de microcódigo.
Este tipo de obfuscación no hace más seguras las aplicaciones, ya que con suficiente trabajo siempre pueden ser deobfuscadas, sino que intenta dificultar la lectura y entendimiento de estas a personas que no tengan acceso al código fuente.</description></item><item><title>Ejercicios Reversing</title><link>/docs/reversa/ejercicios/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/reversa/ejercicios/</guid><description>Decompilación Hack The Box Baby RE Try Hack Me Reversing ELF Deobfuscación Hack The Box Query Longbottom&amp;rsquo;s Locker</description></item></channel></rss>