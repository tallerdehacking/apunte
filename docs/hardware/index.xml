<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hardware on</title><link>/docs/hardware/</link><description>Recent content in Hardware on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 14 Jun 2023 09:25:45 +0000</lastBuildDate><atom:link href="/docs/hardware/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro a Hardware</title><link>/docs/hardware/intro/</link><pubDate>Wed, 14 Jun 2023 09:25:45 +0000</pubDate><guid>/docs/hardware/intro/</guid><description>Hoy en día estamos rodeados de dispositivos con la capacidad de recibir y transmitir información. Desde electrónicos simples, como sensores de luz, hasta dispositivos altamente integrados y complejos, como teléfonos celulares. Cada uno de estos requiere de un programa o software que le otorgue su funcionamiento básico, además de instrucciones sobre cómo leer y enviar información. En este capítulo veremos problemas de Hardware, que tratan de aprovecharse de ciertas fallas o ausencia de mecanismos de seguridad en los dispositivos.</description></item><item><title>Reversing de Firmware</title><link>/docs/hardware/firmware/</link><pubDate>Wed, 14 Jun 2023 09:25:45 +0000</pubDate><guid>/docs/hardware/firmware/</guid><description>El firmware es el código básico que le permite al dispositivo saber cómo funcionar. Le indica cómo encenderse, iniciar servicios, utilizar los sensores, comunicarse y sus configuraciones principales. El firmware puede tomar muchas formas diferentes; puede ser código binario, ejecutables, o incluso un sistema operativo completo.
Este último es el caso para muchos dispotiviso IoT, como cámaras de seguridad, impresoras, routers, y sensores de todo tipo. Como caso de estudio veremos el siguiente dispositivo: TP-Link Wireless N Router TL-WR841N V14.</description></item><item><title>Protocolos de Comunicación</title><link>/docs/hardware/communication/</link><pubDate>Wed, 14 Jun 2023 09:25:45 +0000</pubDate><guid>/docs/hardware/communication/</guid><description>Protocolos A continuación veremos cómo funcionan ciertos protocolos de comunicación serial. Estos se utilizan para comunicar dispositivos directamente, mediante un bus de datos. El bus de datos suele tomar la forma de cables conectando directamente a los dispositivos, y cumlpen ciertas condiciones para lograr establecer la comunicación.
UART Uno de los protocolos de comunicación de bajo nivel más utilizados y antiguos es el Universal Asynchronous Receiver - Transmitter (UART). Es un tipo de comunicación serial y bidireccional (full-duplex) entre 2 dispositivos, utilizando únicamente 2 cables: Transmitter (Tx) y Receiver (Rx).</description></item><item><title>Ejercicios de Hardware</title><link>/docs/hardware/ejercicios/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/hardware/ejercicios/</guid><description>HackTheBox Firmware The Needle Bare Metal Comunicación serial Debugging Interface Mission Pinpossible</description></item></channel></rss>